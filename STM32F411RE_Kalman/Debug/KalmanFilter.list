
KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800b070  0800b070  0001b070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b698  0800b698  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b698  0800b698  0001b698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6a0  0800b6a0  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6a0  0800b6a0  0001b6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800b6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200002ec  0800b994  000202ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f8  0800b994  000207f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012742  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf4  00000000  00000000  00032b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00035810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  000365f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179aa  00000000  00000000  0003702f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109da  00000000  00000000  0004e9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009184e  00000000  00000000  0005f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f50  00000000  00000000  000f0c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000f5b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001689  00000000  00000000  000f5bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  000f7242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002ec 	.word	0x200002ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b058 	.word	0x0800b058

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f0 	.word	0x200002f0
 80001dc:	0800b058 	.word	0x0800b058

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SteadyStateKalmanFilter>:

volatile arm_status Calst;

float checkVal;

float SteadyStateKalmanFilter(float32_t Vin,float32_t Velocity){
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0a01 	vstr	s0, [r7, #4]
 800100a:	edc7 0a00 	vstr	s1, [r7]
	  arm_mat_init_f32(&Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 800100e:	463b      	mov	r3, r7
 8001010:	2201      	movs	r2, #1
 8001012:	2101      	movs	r1, #1
 8001014:	4848      	ldr	r0, [pc, #288]	; (8001138 <SteadyStateKalmanFilter+0x138>)
 8001016:	f004 fbaf 	bl	8005778 <arm_mat_init_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&B_matrix, Vin, &Bu_matrix); 		   				// Bu
 800101a:	4948      	ldr	r1, [pc, #288]	; (800113c <SteadyStateKalmanFilter+0x13c>)
 800101c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001020:	4847      	ldr	r0, [pc, #284]	; (8001140 <SteadyStateKalmanFilter+0x140>)
 8001022:	f004 f9b1 	bl	8005388 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&A_matrix, &X_k_matrix, &Ax_matrix);  		   		// Ax
 8001026:	4a47      	ldr	r2, [pc, #284]	; (8001144 <SteadyStateKalmanFilter+0x144>)
 8001028:	4947      	ldr	r1, [pc, #284]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 800102a:	4848      	ldr	r0, [pc, #288]	; (800114c <SteadyStateKalmanFilter+0x14c>)
 800102c:	f004 f9fe 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_add_f32(&Ax_matrix, &Bu_matrix, &X_k_matrix); 		   		// Xk = Ax + Bu
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 8001032:	4942      	ldr	r1, [pc, #264]	; (800113c <SteadyStateKalmanFilter+0x13c>)
 8001034:	4843      	ldr	r0, [pc, #268]	; (8001144 <SteadyStateKalmanFilter+0x144>)
 8001036:	f004 fba3 	bl	8005780 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&A_matrix, &P_k_matrix, &P_k_matrix);  		   		// Pk = A * P_pk
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 800103c:	4944      	ldr	r1, [pc, #272]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 800103e:	4843      	ldr	r0, [pc, #268]	; (800114c <SteadyStateKalmanFilter+0x14c>)
 8001040:	f004 f9f4 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&P_k_matrix, &A_transpose_matrix, &P_k_matrix); 		// Pk = A * P_pk * A^T
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 8001046:	4943      	ldr	r1, [pc, #268]	; (8001154 <SteadyStateKalmanFilter+0x154>)
 8001048:	4841      	ldr	r0, [pc, #260]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 800104a:	f004 f9ef 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&G_matrix, &G_transpose_matrix, &GGT_matrix);        // G * G^T
 800104e:	4a42      	ldr	r2, [pc, #264]	; (8001158 <SteadyStateKalmanFilter+0x158>)
 8001050:	4942      	ldr	r1, [pc, #264]	; (800115c <SteadyStateKalmanFilter+0x15c>)
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <SteadyStateKalmanFilter+0x160>)
 8001054:	f004 f9ea 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_scale_f32(&GGT_matrix, Q, &GQGT_matrix); 				   	   	// G * Q
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <SteadyStateKalmanFilter+0x164>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	4942      	ldr	r1, [pc, #264]	; (8001168 <SteadyStateKalmanFilter+0x168>)
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	483c      	ldr	r0, [pc, #240]	; (8001158 <SteadyStateKalmanFilter+0x158>)
 8001066:	f004 f98f 	bl	8005388 <arm_mat_scale_f32>
	  arm_mat_add_f32(&P_k_matrix, &GQGT_matrix, &P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800106a:	4a39      	ldr	r2, [pc, #228]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 800106c:	493e      	ldr	r1, [pc, #248]	; (8001168 <SteadyStateKalmanFilter+0x168>)
 800106e:	4838      	ldr	r0, [pc, #224]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 8001070:	f004 fb86 	bl	8005780 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&C_matrix, &P_k_matrix, &CP_matrix);			     // C * Pk
 8001074:	4a3d      	ldr	r2, [pc, #244]	; (800116c <SteadyStateKalmanFilter+0x16c>)
 8001076:	4936      	ldr	r1, [pc, #216]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 8001078:	483d      	ldr	r0, [pc, #244]	; (8001170 <SteadyStateKalmanFilter+0x170>)
 800107a:	f004 f9d7 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&CP_matrix, &C_transpose_matrix, &CPCT_matrix);   // C * Pk * C^T
 800107e:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <SteadyStateKalmanFilter+0x174>)
 8001080:	493d      	ldr	r1, [pc, #244]	; (8001178 <SteadyStateKalmanFilter+0x178>)
 8001082:	483a      	ldr	r0, [pc, #232]	; (800116c <SteadyStateKalmanFilter+0x16c>)
 8001084:	f004 f9d2 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_add_f32(&CPCT_matrix, &R_matrix, &CPCTR_matrix);			 // C * P_k * C^T + R
 8001088:	4a3c      	ldr	r2, [pc, #240]	; (800117c <SteadyStateKalmanFilter+0x17c>)
 800108a:	493d      	ldr	r1, [pc, #244]	; (8001180 <SteadyStateKalmanFilter+0x180>)
 800108c:	4839      	ldr	r0, [pc, #228]	; (8001174 <SteadyStateKalmanFilter+0x174>)
 800108e:	f004 fb77 	bl	8005780 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&CPCTR_matrix, &CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8001092:	493c      	ldr	r1, [pc, #240]	; (8001184 <SteadyStateKalmanFilter+0x184>)
 8001094:	4839      	ldr	r0, [pc, #228]	; (800117c <SteadyStateKalmanFilter+0x17c>)
 8001096:	f004 fa69 	bl	800556c <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&P_k_matrix, &C_transpose_matrix, &PCT_matrix); 		 // P_k * C^T
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <SteadyStateKalmanFilter+0x188>)
 800109c:	4936      	ldr	r1, [pc, #216]	; (8001178 <SteadyStateKalmanFilter+0x178>)
 800109e:	482c      	ldr	r0, [pc, #176]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 80010a0:	f004 f9c4 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&PCT_matrix, &CPCTRinv_matrix, &K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80010a4:	4a39      	ldr	r2, [pc, #228]	; (800118c <SteadyStateKalmanFilter+0x18c>)
 80010a6:	4937      	ldr	r1, [pc, #220]	; (8001184 <SteadyStateKalmanFilter+0x184>)
 80010a8:	4837      	ldr	r0, [pc, #220]	; (8001188 <SteadyStateKalmanFilter+0x188>)
 80010aa:	f004 f9bf 	bl	800542c <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Cx_matrix);				 // C * X_k
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <SteadyStateKalmanFilter+0x190>)
 80010b0:	4925      	ldr	r1, [pc, #148]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 80010b2:	482f      	ldr	r0, [pc, #188]	; (8001170 <SteadyStateKalmanFilter+0x170>)
 80010b4:	f004 f9ba 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&Velocity_matrix,  &Cx_matrix, &yCx_matrix);			  // y - ( C * X_k )
 80010b8:	4a36      	ldr	r2, [pc, #216]	; (8001194 <SteadyStateKalmanFilter+0x194>)
 80010ba:	4935      	ldr	r1, [pc, #212]	; (8001190 <SteadyStateKalmanFilter+0x190>)
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <SteadyStateKalmanFilter+0x138>)
 80010be:	f004 f8f9 	bl	80052b4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&K_matrix, &yCx_matrix, &KyCx_matrix);		     // K( y - ( C * X_k ) )
 80010c2:	4a35      	ldr	r2, [pc, #212]	; (8001198 <SteadyStateKalmanFilter+0x198>)
 80010c4:	4933      	ldr	r1, [pc, #204]	; (8001194 <SteadyStateKalmanFilter+0x194>)
 80010c6:	4831      	ldr	r0, [pc, #196]	; (800118c <SteadyStateKalmanFilter+0x18c>)
 80010c8:	f004 f9b0 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_add_f32(&X_k_matrix, &KyCx_matrix, &X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 80010ce:	4932      	ldr	r1, [pc, #200]	; (8001198 <SteadyStateKalmanFilter+0x198>)
 80010d0:	481d      	ldr	r0, [pc, #116]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 80010d2:	f004 fb55 	bl	8005780 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&C_matrix, &X_k_matrix, &Output_matrix);
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <SteadyStateKalmanFilter+0x19c>)
 80010d8:	491b      	ldr	r1, [pc, #108]	; (8001148 <SteadyStateKalmanFilter+0x148>)
 80010da:	4825      	ldr	r0, [pc, #148]	; (8001170 <SteadyStateKalmanFilter+0x170>)
 80010dc:	f004 f9a6 	bl	800542c <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010e8:	2204      	movs	r2, #4
 80010ea:	2104      	movs	r1, #4
 80010ec:	f004 fb44 	bl	8005778 <arm_mat_init_f32>

	  arm_mat_mult_f32(&K_matrix, &C_matrix, &temp_matrix4);				// K * C
 80010f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010f4:	461a      	mov	r2, r3
 80010f6:	491e      	ldr	r1, [pc, #120]	; (8001170 <SteadyStateKalmanFilter+0x170>)
 80010f8:	4824      	ldr	r0, [pc, #144]	; (800118c <SteadyStateKalmanFilter+0x18c>)
 80010fa:	f004 f997 	bl	800542c <arm_mat_mult_f32>
	  arm_mat_sub_f32(&eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 80010fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001102:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001106:	4619      	mov	r1, r3
 8001108:	4825      	ldr	r0, [pc, #148]	; (80011a0 <SteadyStateKalmanFilter+0x1a0>)
 800110a:	f004 f8d3 	bl	80052b4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &P_k_matrix, &P_k_matrix);			// (I - (K * C)) * P_k
 800110e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <SteadyStateKalmanFilter+0x150>)
 8001116:	4618      	mov	r0, r3
 8001118:	f004 f988 	bl	800542c <arm_mat_mult_f32>
	  Kalman_Speed = X_k[1];
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <SteadyStateKalmanFilter+0x1a4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <SteadyStateKalmanFilter+0x1a8>)
 8001122:	6013      	str	r3, [r2, #0]
	  return  Kalman_Speed;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <SteadyStateKalmanFilter+0x1a8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	ee07 3a90 	vmov	s15, r3
}
 800112c:	eeb0 0a67 	vmov.f32	s0, s15
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000528 	.word	0x20000528
 800113c:	20000448 	.word	0x20000448
 8001140:	20000384 	.word	0x20000384
 8001144:	20000460 	.word	0x20000460
 8001148:	2000031c 	.word	0x2000031c
 800114c:	2000036c 	.word	0x2000036c
 8001150:	20000364 	.word	0x20000364
 8001154:	20000374 	.word	0x20000374
 8001158:	200003b8 	.word	0x200003b8
 800115c:	200003a4 	.word	0x200003a4
 8001160:	2000039c 	.word	0x2000039c
 8001164:	20000110 	.word	0x20000110
 8001168:	20000400 	.word	0x20000400
 800116c:	20000478 	.word	0x20000478
 8001170:	2000038c 	.word	0x2000038c
 8001174:	20000490 	.word	0x20000490
 8001178:	20000394 	.word	0x20000394
 800117c:	2000049c 	.word	0x2000049c
 8001180:	20000514 	.word	0x20000514
 8001184:	200004d8 	.word	0x200004d8
 8001188:	200004c0 	.word	0x200004c0
 800118c:	200004a8 	.word	0x200004a8
 8001190:	200004e4 	.word	0x200004e4
 8001194:	200004f0 	.word	0x200004f0
 8001198:	200004fc 	.word	0x200004fc
 800119c:	200003b0 	.word	0x200003b0
 80011a0:	2000037c 	.word	0x2000037c
 80011a4:	2000030c 	.word	0x2000030c
 80011a8:	20000308 	.word	0x20000308

080011ac <Kalman_Start>:

void Kalman_Start(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	arm_mat_init_f32(&X_k_matrix, 4, 1,(float32_t*) &X_k);
 80011b0:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <Kalman_Start+0x140>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	2104      	movs	r1, #4
 80011b6:	484e      	ldr	r0, [pc, #312]	; (80012f0 <Kalman_Start+0x144>)
 80011b8:	f004 fade 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&P_k_matrix, 4, 4,(float32_t*) &P_k);
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <Kalman_Start+0x148>)
 80011be:	2204      	movs	r2, #4
 80011c0:	2104      	movs	r1, #4
 80011c2:	484d      	ldr	r0, [pc, #308]	; (80012f8 <Kalman_Start+0x14c>)
 80011c4:	f004 fad8 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&A_matrix, 4, 4,(float32_t*) &A);
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <Kalman_Start+0x150>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	2104      	movs	r1, #4
 80011ce:	484c      	ldr	r0, [pc, #304]	; (8001300 <Kalman_Start+0x154>)
 80011d0:	f004 fad2 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&B_matrix, 4, 1,(float32_t*) &B);
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <Kalman_Start+0x158>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	2104      	movs	r1, #4
 80011da:	484b      	ldr	r0, [pc, #300]	; (8001308 <Kalman_Start+0x15c>)
 80011dc:	f004 facc 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&C_matrix, 1, 4,(float32_t*) &C);
 80011e0:	4b4a      	ldr	r3, [pc, #296]	; (800130c <Kalman_Start+0x160>)
 80011e2:	2204      	movs	r2, #4
 80011e4:	2101      	movs	r1, #1
 80011e6:	484a      	ldr	r0, [pc, #296]	; (8001310 <Kalman_Start+0x164>)
 80011e8:	f004 fac6 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&G_matrix, 4, 1,(float32_t*) &G);
 80011ec:	4b49      	ldr	r3, [pc, #292]	; (8001314 <Kalman_Start+0x168>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	2104      	movs	r1, #4
 80011f2:	4849      	ldr	r0, [pc, #292]	; (8001318 <Kalman_Start+0x16c>)
 80011f4:	f004 fac0 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&A_transpose_matrix, 4, 4,(float32_t*) &A_transpose);
 80011f8:	4b48      	ldr	r3, [pc, #288]	; (800131c <Kalman_Start+0x170>)
 80011fa:	2204      	movs	r2, #4
 80011fc:	2104      	movs	r1, #4
 80011fe:	4848      	ldr	r0, [pc, #288]	; (8001320 <Kalman_Start+0x174>)
 8001200:	f004 faba 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&C_transpose_matrix, 4, 1,(float32_t*) &C_transpose);
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <Kalman_Start+0x178>)
 8001206:	2201      	movs	r2, #1
 8001208:	2104      	movs	r1, #4
 800120a:	4847      	ldr	r0, [pc, #284]	; (8001328 <Kalman_Start+0x17c>)
 800120c:	f004 fab4 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&G_transpose_matrix, 1, 4,(float32_t*) &G_transpose);
 8001210:	4b46      	ldr	r3, [pc, #280]	; (800132c <Kalman_Start+0x180>)
 8001212:	2204      	movs	r2, #4
 8001214:	2101      	movs	r1, #1
 8001216:	4846      	ldr	r0, [pc, #280]	; (8001330 <Kalman_Start+0x184>)
 8001218:	f004 faae 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&GGT_matrix, 4, 4,(float32_t*) &GGT);
 800121c:	4b45      	ldr	r3, [pc, #276]	; (8001334 <Kalman_Start+0x188>)
 800121e:	2204      	movs	r2, #4
 8001220:	2104      	movs	r1, #4
 8001222:	4845      	ldr	r0, [pc, #276]	; (8001338 <Kalman_Start+0x18c>)
 8001224:	f004 faa8 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&GQGT_matrix, 4, 4,(float32_t*) &GQGT);
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <Kalman_Start+0x190>)
 800122a:	2204      	movs	r2, #4
 800122c:	2104      	movs	r1, #4
 800122e:	4844      	ldr	r0, [pc, #272]	; (8001340 <Kalman_Start+0x194>)
 8001230:	f004 faa2 	bl	8005778 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&Bu_matrix, 4, 1,(float32_t*) &Bu_data);
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <Kalman_Start+0x198>)
 8001236:	2201      	movs	r2, #1
 8001238:	2104      	movs	r1, #4
 800123a:	4843      	ldr	r0, [pc, #268]	; (8001348 <Kalman_Start+0x19c>)
 800123c:	f004 fa9c 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&Ax_matrix, 4, 1,(float32_t*) &Ax_data);
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <Kalman_Start+0x1a0>)
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	4842      	ldr	r0, [pc, #264]	; (8001350 <Kalman_Start+0x1a4>)
 8001248:	f004 fa96 	bl	8005778 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&CP_matrix, 1, 4,(float32_t*) &CP);
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <Kalman_Start+0x1a8>)
 800124e:	2204      	movs	r2, #4
 8001250:	2101      	movs	r1, #1
 8001252:	4841      	ldr	r0, [pc, #260]	; (8001358 <Kalman_Start+0x1ac>)
 8001254:	f004 fa90 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCT_matrix, 1, 1,(float32_t*) &CPCT);
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <Kalman_Start+0x1b0>)
 800125a:	2201      	movs	r2, #1
 800125c:	2101      	movs	r1, #1
 800125e:	4840      	ldr	r0, [pc, #256]	; (8001360 <Kalman_Start+0x1b4>)
 8001260:	f004 fa8a 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&CPCTR_matrix, 1, 1,(float32_t*) &CPCTR);
 8001264:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <Kalman_Start+0x1b8>)
 8001266:	2201      	movs	r2, #1
 8001268:	2101      	movs	r1, #1
 800126a:	483f      	ldr	r0, [pc, #252]	; (8001368 <Kalman_Start+0x1bc>)
 800126c:	f004 fa84 	bl	8005778 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&K_matrix, 4, 1,(float32_t*) &K);
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <Kalman_Start+0x1c0>)
 8001272:	2201      	movs	r2, #1
 8001274:	2104      	movs	r1, #4
 8001276:	483e      	ldr	r0, [pc, #248]	; (8001370 <Kalman_Start+0x1c4>)
 8001278:	f004 fa7e 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&PCT_matrix, 4, 1,(float32_t*) &PCT);
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <Kalman_Start+0x1c8>)
 800127e:	2201      	movs	r2, #1
 8001280:	2104      	movs	r1, #4
 8001282:	483d      	ldr	r0, [pc, #244]	; (8001378 <Kalman_Start+0x1cc>)
 8001284:	f004 fa78 	bl	8005778 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&CPCTRinv_matrix, 1, 1,(float32_t*) &CPCTRinv);
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <Kalman_Start+0x1d0>)
 800128a:	2201      	movs	r2, #1
 800128c:	2101      	movs	r1, #1
 800128e:	483c      	ldr	r0, [pc, #240]	; (8001380 <Kalman_Start+0x1d4>)
 8001290:	f004 fa72 	bl	8005778 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&Cx_matrix, 1, 1,(float32_t*) &Cx);
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <Kalman_Start+0x1d8>)
 8001296:	2201      	movs	r2, #1
 8001298:	2101      	movs	r1, #1
 800129a:	483b      	ldr	r0, [pc, #236]	; (8001388 <Kalman_Start+0x1dc>)
 800129c:	f004 fa6c 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&yCx_matrix, 1, 1,(float32_t*) &yCx);
 80012a0:	4b3a      	ldr	r3, [pc, #232]	; (800138c <Kalman_Start+0x1e0>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	2101      	movs	r1, #1
 80012a6:	483a      	ldr	r0, [pc, #232]	; (8001390 <Kalman_Start+0x1e4>)
 80012a8:	f004 fa66 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&KyCx_matrix, 4, 1,(float32_t*) &KyCx);
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <Kalman_Start+0x1e8>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	2104      	movs	r1, #4
 80012b2:	4839      	ldr	r0, [pc, #228]	; (8001398 <Kalman_Start+0x1ec>)
 80012b4:	f004 fa60 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&Output_matrix, 1, 1,(float32_t*) &Es_velocity);
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <Kalman_Start+0x1f0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	4838      	ldr	r0, [pc, #224]	; (80013a0 <Kalman_Start+0x1f4>)
 80012c0:	f004 fa5a 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&eye_matrix, 4, 4,(float32_t*) &eye);
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <Kalman_Start+0x1f8>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	2104      	movs	r1, #4
 80012ca:	4837      	ldr	r0, [pc, #220]	; (80013a8 <Kalman_Start+0x1fc>)
 80012cc:	f004 fa54 	bl	8005778 <arm_mat_init_f32>

	arm_mat_init_f32(&R_matrix, 1, 1,(float32_t*) &R);
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <Kalman_Start+0x200>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	4836      	ldr	r0, [pc, #216]	; (80013b0 <Kalman_Start+0x204>)
 80012d8:	f004 fa4e 	bl	8005778 <arm_mat_init_f32>
	arm_mat_init_f32(&Z_matrix, 1, 1,(float32_t*) &Z);
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <Kalman_Start+0x208>)
 80012de:	2201      	movs	r2, #1
 80012e0:	2101      	movs	r1, #1
 80012e2:	4835      	ldr	r0, [pc, #212]	; (80013b8 <Kalman_Start+0x20c>)
 80012e4:	f004 fa48 	bl	8005778 <arm_mat_init_f32>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000030c 	.word	0x2000030c
 80012f0:	2000031c 	.word	0x2000031c
 80012f4:	20000324 	.word	0x20000324
 80012f8:	20000364 	.word	0x20000364
 80012fc:	20000000 	.word	0x20000000
 8001300:	2000036c 	.word	0x2000036c
 8001304:	200000c0 	.word	0x200000c0
 8001308:	20000384 	.word	0x20000384
 800130c:	200000d0 	.word	0x200000d0
 8001310:	2000038c 	.word	0x2000038c
 8001314:	200000f0 	.word	0x200000f0
 8001318:	2000039c 	.word	0x2000039c
 800131c:	20000040 	.word	0x20000040
 8001320:	20000374 	.word	0x20000374
 8001324:	200000e0 	.word	0x200000e0
 8001328:	20000394 	.word	0x20000394
 800132c:	20000100 	.word	0x20000100
 8001330:	200003a4 	.word	0x200003a4
 8001334:	200003c0 	.word	0x200003c0
 8001338:	200003b8 	.word	0x200003b8
 800133c:	20000408 	.word	0x20000408
 8001340:	20000400 	.word	0x20000400
 8001344:	20000450 	.word	0x20000450
 8001348:	20000448 	.word	0x20000448
 800134c:	20000468 	.word	0x20000468
 8001350:	20000460 	.word	0x20000460
 8001354:	20000480 	.word	0x20000480
 8001358:	20000478 	.word	0x20000478
 800135c:	20000498 	.word	0x20000498
 8001360:	20000490 	.word	0x20000490
 8001364:	200004a4 	.word	0x200004a4
 8001368:	2000049c 	.word	0x2000049c
 800136c:	200004b0 	.word	0x200004b0
 8001370:	200004a8 	.word	0x200004a8
 8001374:	200004c8 	.word	0x200004c8
 8001378:	200004c0 	.word	0x200004c0
 800137c:	200004e0 	.word	0x200004e0
 8001380:	200004d8 	.word	0x200004d8
 8001384:	200004ec 	.word	0x200004ec
 8001388:	200004e4 	.word	0x200004e4
 800138c:	200004f8 	.word	0x200004f8
 8001390:	200004f0 	.word	0x200004f0
 8001394:	20000504 	.word	0x20000504
 8001398:	200004fc 	.word	0x200004fc
 800139c:	200003ac 	.word	0x200003ac
 80013a0:	200003b0 	.word	0x200003b0
 80013a4:	20000080 	.word	0x20000080
 80013a8:	2000037c 	.word	0x2000037c
 80013ac:	20000114 	.word	0x20000114
 80013b0:	20000514 	.word	0x20000514
 80013b4:	20000524 	.word	0x20000524
 80013b8:	2000051c 	.word	0x2000051c

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 fe16 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f838 	bl	8001438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 fa0a 	bl	80017e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013cc:	f000 f9de 	bl	800178c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013d0:	f000 f93a 	bl	8001648 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013d4:	f000 f898 	bl	8001508 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013d8:	f000 f98a 	bl	80016f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Kalman_Start();
 80013dc:	f7ff fee6 	bl	80011ac <Kalman_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80013e0:	2104      	movs	r1, #4
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <main+0x68>)
 80013e4:	f002 f926 	bl	8003634 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Motor
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <main+0x6c>)
 80013ea:	f001 feb7 	bl	800315c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013ee:	2100      	movs	r1, #0
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <main+0x6c>)
 80013f2:	f001 ffc9 	bl	8003388 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3); //Timer Interrupt
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <main+0x70>)
 80013f8:	f001 ff0a 	bl	8003210 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t timestamp = 0;
	  	  if(HAL_GetTick() >= timestamp)
 80013fc:	f000 fe5e 	bl	80020bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <main+0x74>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3f8      	bcc.n	80013fc <main+0x40>
	  	  {
	  		timestamp = HAL_GetTick() + 500;
 800140a:	f000 fe57 	bl	80020bc <HAL_GetTick>
 800140e:	4603      	mov	r3, r0
 8001410:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <main+0x74>)
 8001416:	6013      	str	r3, [r2, #0]
	  		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001418:	2120      	movs	r1, #32
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <main+0x78>)
 800141c:	f001 f99b 	bl	8002756 <HAL_GPIO_TogglePin>
  {
 8001420:	e7ec      	b.n	80013fc <main+0x40>
 8001422:	bf00      	nop
 8001424:	20000578 	.word	0x20000578
 8001428:	20000530 	.word	0x20000530
 800142c:	200005c0 	.word	0x200005c0
 8001430:	200006a0 	.word	0x200006a0
 8001434:	40020000 	.word	0x40020000

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2230      	movs	r2, #48	; 0x30
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f005 f98d 	bl	8006766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <SystemClock_Config+0xc8>)
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <SystemClock_Config+0xc8>)
 8001466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146a:	6413      	str	r3, [r2, #64]	; 0x40
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <SystemClock_Config+0xc8>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <SystemClock_Config+0xcc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <SystemClock_Config+0xcc>)
 8001482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <SystemClock_Config+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a8:	2308      	movs	r3, #8
 80014aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b4:	2304      	movs	r3, #4
 80014b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b8:	f107 0320 	add.w	r3, r7, #32
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f965 	bl	800278c <HAL_RCC_OscConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c8:	f000 fb16 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d0:	2302      	movs	r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2103      	movs	r1, #3
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 fbc7 	bl	8002c7c <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014f4:	f000 fb00 	bl	8001af8 <Error_Handler>
  }
}
 80014f8:	bf00      	nop
 80014fa:	3750      	adds	r7, #80	; 0x50
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b096      	sub	sp, #88	; 0x58
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2220      	movs	r2, #32
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f005 f910 	bl	8006766 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <MX_TIM1_Init+0x138>)
 8001548:	4a3e      	ldr	r2, [pc, #248]	; (8001644 <MX_TIM1_Init+0x13c>)
 800154a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <MX_TIM1_Init+0x138>)
 800154e:	2263      	movs	r2, #99	; 0x63
 8001550:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_TIM1_Init+0x138>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <MX_TIM1_Init+0x138>)
 800155a:	2263      	movs	r2, #99	; 0x63
 800155c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_TIM1_Init+0x138>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <MX_TIM1_Init+0x138>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <MX_TIM1_Init+0x138>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001570:	4833      	ldr	r0, [pc, #204]	; (8001640 <MX_TIM1_Init+0x138>)
 8001572:	f001 fda3 	bl	80030bc <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800157c:	f000 fabc 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158a:	4619      	mov	r1, r3
 800158c:	482c      	ldr	r0, [pc, #176]	; (8001640 <MX_TIM1_Init+0x138>)
 800158e:	f002 faa9 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001598:	f000 faae 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800159c:	4828      	ldr	r0, [pc, #160]	; (8001640 <MX_TIM1_Init+0x138>)
 800159e:	f001 fe99 	bl	80032d4 <HAL_TIM_PWM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80015a8:	f000 faa6 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b8:	4619      	mov	r1, r3
 80015ba:	4821      	ldr	r0, [pc, #132]	; (8001640 <MX_TIM1_Init+0x138>)
 80015bc:	f002 fe4e 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80015c6:	f000 fa97 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <MX_TIM1_Init+0x138>)
 80015f0:	f002 f9b6 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80015fa:	f000 fa7d 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <MX_TIM1_Init+0x138>)
 8001622:	f002 fe89 	bl	8004338 <HAL_TIMEx_ConfigBreakDeadTime>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800162c:	f000 fa64 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <MX_TIM1_Init+0x138>)
 8001632:	f000 fb13 	bl	8001c5c <HAL_TIM_MspPostInit>

}
 8001636:	bf00      	nop
 8001638:	3758      	adds	r7, #88	; 0x58
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000530 	.word	0x20000530
 8001644:	40010000 	.word	0x40010000

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f885 	bl	8006766 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_TIM2_Init+0xa4>)
 8001666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_TIM2_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM2_Init+0xa4>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_TIM2_Init+0xa4>)
 800167a:	f04f 32ff 	mov.w	r2, #4294967295
 800167e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_TIM2_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_TIM2_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800168c:	2303      	movs	r3, #3
 800168e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_TIM2_Init+0xa4>)
 80016b8:	f001 ff16 	bl	80034e8 <HAL_TIM_Encoder_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016c2:	f000 fa19 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_TIM2_Init+0xa4>)
 80016d4:	f002 fdc2 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016de:	f000 fa0b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000578 	.word	0x20000578

080016f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM3_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM3_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM3_Init+0x94>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM3_Init+0x94>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM3_Init+0x94>)
 8001720:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM3_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM3_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM3_Init+0x94>)
 8001734:	f001 fcc2 	bl	80030bc <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f9db 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM3_Init+0x94>)
 8001750:	f002 f9c8 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 f9cd 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM3_Init+0x94>)
 800176c:	f002 fd76 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001776:	f000 f9bf 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200005c0 	.word	0x200005c0
 8001788:	40000400 	.word	0x40000400

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_USART2_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f002 fe1e 	bl	8004404 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f993 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000608 	.word	0x20000608
 80017dc:	40004400 	.word	0x40004400

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a2c      	ldr	r2, [pc, #176]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <MX_GPIO_Init+0xd0>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <MX_GPIO_Init+0xd0>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_GPIO_Init+0xd0>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2130      	movs	r1, #48	; 0x30
 800186a:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_GPIO_Init+0xd4>)
 800186c:	f000 ff5a 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001876:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_GPIO_Init+0xd8>)
 8001888:	f000 fdc8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800188c:	2330      	movs	r3, #48	; 0x30
 800188e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_GPIO_Init+0xd4>)
 80018a4:	f000 fdba 	bl	800241c <HAL_GPIO_Init>

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020800 	.word	0x40020800

080018bc <setMotor>:

/* USER CODE BEGIN 4 */
void setMotor(int PWM){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if(PWM >= 0){
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db09      	blt.n	80018de <setMotor+0x22>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,PWM);
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <setMotor+0x4c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2110      	movs	r1, #16
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <setMotor+0x50>)
 80018d8:	f000 ff24 	bl	8002724 <HAL_GPIO_WritePin>
	}
	else if (PWM < 0){
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	}
}
 80018dc:	e00f      	b.n	80018fe <setMotor+0x42>
	else if (PWM < 0){
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	da0c      	bge.n	80018fe <setMotor+0x42>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,abs(PWM));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <setMotor+0x4c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2110      	movs	r1, #16
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <setMotor+0x50>)
 80018fa:	f000 ff13 	bl	8002724 <HAL_GPIO_WritePin>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000530 	.word	0x20000530
 800190c:	40020000 	.word	0x40020000

08001910 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af02      	add	r7, sp, #8
 8001916:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a65      	ldr	r2, [pc, #404]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	f040 80be 	bne.w	8001a9e <HAL_TIM_PeriodElapsedCallback+0x18e>
		 QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim2);
 8001922:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	461a      	mov	r2, r3
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800192c:	601a      	str	r2, [r3, #0]
//		 RawSpeed = (QEIReadRaw - L_QEIReadRaw)*1000.0*2.0*M_PI/280.0;
		 L_QEIReadRaw = QEIReadRaw;
 800192e:	4b62      	ldr	r3, [pc, #392]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a62      	ldr	r2, [pc, #392]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001934:	6013      	str	r3, [r2, #0]
		 QEIAd = (QEIReadRaw*2.0*M_PI/280.0);
 8001936:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fdfa 	bl	8000534 <__aeabi_i2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	f7fe fcaa 	bl	800029c <__adddf3>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	a355      	add	r3, pc, #340	; (adr r3, 8001aa8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fe57 	bl	8000608 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001968:	f7fe ff78 	bl	800085c <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f940 	bl	8000bf8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800197c:	6013      	str	r3, [r2, #0]
		 RawSpeed = (QEIAd - L_QEIAd)*5000.0;
 800197e:	4b51      	ldr	r3, [pc, #324]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001acc <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001998:	edc3 7a00 	vstr	s15, [r3]
		 PWM = 100 * sin(HAL_GetTick()/1000.0);
 800199c:	f000 fb8e 	bl	80020bc <HAL_GetTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdb6 	bl	8000514 <__aeabi_ui2d>
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019ae:	f7fe ff55 	bl	800085c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ec43 2b17 	vmov	d7, r2, r3
 80019ba:	eeb0 0a47 	vmov.f32	s0, s14
 80019be:	eef0 0a67 	vmov.f32	s1, s15
 80019c2:	f008 fb09 	bl	8009fd8 <sin>
 80019c6:	ec51 0b10 	vmov	r0, r1, d0
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019d0:	f7fe fe1a 	bl	8000608 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f8c4 	bl	8000b68 <__aeabi_d2iz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019e4:	6013      	str	r3, [r2, #0]
		 setMotor(PWM);
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff66 	bl	80018bc <setMotor>
		 Voltage = 12.0*PWM/100.0;
 80019f0:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd9d 	bl	8000534 <__aeabi_i2d>
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a00:	f7fe fe02 	bl	8000608 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001a12:	f7fe ff23 	bl	800085c <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff f8eb 	bl	8000bf8 <__aeabi_d2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a26:	6013      	str	r3, [r2, #0]
		 kalman = SteadyStateKalmanFilter(Voltage ,QEIAd);
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	eef0 0a47 	vmov.f32	s1, s14
 8001a38:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3c:	f7ff fae0 	bl	8001000 <SteadyStateKalmanFilter>
 8001a40:	eef0 7a40 	vmov.f32	s15, s0
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
		if (huart2.gState == HAL_UART_STATE_READY)
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	d11f      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x186>
		{
			sprintf(TxBuffer,"%.2f %.2f\r\n",kalman,RawSpeed);
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd7c 	bl	8000558 <__aeabi_f2d>
 8001a60:	4604      	mov	r4, r0
 8001a62:	460d      	mov	r5, r1
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd75 	bl	8000558 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9cd 2300 	strd	r2, r3, [sp]
 8001a76:	4622      	mov	r2, r4
 8001a78:	462b      	mov	r3, r5
 8001a7a:	491d      	ldr	r1, [pc, #116]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a7c:	481d      	ldr	r0, [pc, #116]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a7e:	f004 fe0f 	bl	80066a0 <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)TxBuffer, strlen(TxBuffer));
 8001a82:	481c      	ldr	r0, [pc, #112]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a84:	f7fe fbfc 	bl	8000280 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4919      	ldr	r1, [pc, #100]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a90:	4816      	ldr	r0, [pc, #88]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a92:	f002 fd04 	bl	800449e <HAL_UART_Transmit_IT>
		}


	  	 L_QEIAd = QEIAd;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a9c:	6013      	str	r3, [r2, #0]
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	54442d18 	.word	0x54442d18
 8001aac:	400921fb 	.word	0x400921fb
 8001ab0:	200005c0 	.word	0x200005c0
 8001ab4:	20000578 	.word	0x20000578
 8001ab8:	20000680 	.word	0x20000680
 8001abc:	20000684 	.word	0x20000684
 8001ac0:	40718000 	.word	0x40718000
 8001ac4:	20000694 	.word	0x20000694
 8001ac8:	20000698 	.word	0x20000698
 8001acc:	459c4000 	.word	0x459c4000
 8001ad0:	20000688 	.word	0x20000688
 8001ad4:	408f4000 	.word	0x408f4000
 8001ad8:	40590000 	.word	0x40590000
 8001adc:	20000690 	.word	0x20000690
 8001ae0:	40280000 	.word	0x40280000
 8001ae4:	2000068c 	.word	0x2000068c
 8001ae8:	2000069c 	.word	0x2000069c
 8001aec:	20000608 	.word	0x20000608
 8001af0:	0800b070 	.word	0x0800b070
 8001af4:	2000064c 	.word	0x2000064c

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MspInit+0x4c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b42:	2007      	movs	r0, #7
 8001b44:	f000 fb96 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_TIM_Base_MspInit+0x70>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b82:	e01a      	b.n	8001bba <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_TIM_Base_MspInit+0x78>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d115      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_TIM_Base_MspInit+0x74>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	201d      	movs	r0, #29
 8001bb0:	f000 fb6b 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb4:	201d      	movs	r0, #29
 8001bb6:	f000 fb84 	bl	80022c2 <HAL_NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf0:	d12b      	bne.n	8001c4a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a16      	ldr	r2, [pc, #88]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a0f      	ldr	r2, [pc, #60]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c46:	f000 fbe9 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_MspPostInit+0x68>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d11e      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_TIM_MspPostInit+0x6c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_MspPostInit+0x6c>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_MspPostInit+0x70>)
 8001cb8:	f000 fbb0 	bl	800241c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_UART_MspInit+0x94>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d133      	bne.n	8001d5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_UART_MspInit+0x98>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <HAL_UART_MspInit+0x9c>)
 8001d46:	f000 fb69 	bl	800241c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2026      	movs	r0, #38	; 0x26
 8001d50:	f000 fa9b 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d54:	2026      	movs	r0, #38	; 0x26
 8001d56:	f000 fab4 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40004400 	.word	0x40004400
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 f96a 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM3_IRQHandler+0x10>)
 8001dca:	f001 fcc1 	bl	8003750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200005c0 	.word	0x200005c0

08001dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART2_IRQHandler+0x10>)
 8001dde:	f002 fba3 	bl	8004528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000608 	.word	0x20000608

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e06:	f004 fd01 	bl	800680c <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2e:	e7fe      	b.n	8001e2e <_exit+0x12>

08001e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e00a      	b.n	8001e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e42:	f3af 8000 	nop.w
 8001e46:	4601      	mov	r1, r0
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf0      	blt.n	8001e42 <_read+0x12>
  }

  return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e009      	b.n	8001e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	60ba      	str	r2, [r7, #8]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf1      	blt.n	8001e7c <_write+0x12>
  }
  return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f004 fc66 	bl	800680c <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20020000 	.word	0x20020000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	200006a4 	.word	0x200006a4
 8001f74:	200007f8 	.word	0x200007f8

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack    		 /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb8:	4c0b      	ldr	r4, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc6:	f7ff ffd7 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f004 fc25 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7ff f9f5 	bl	80013bc <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
ldr   sp, =_estack    		 /* set stack pointer */
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8001fe0:	0800b6a8 	.word	0x0800b6a8
  ldr r2, =_sbss
 8001fe4:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8001fe8:	200007f8 	.word	0x200007f8

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <HAL_Init+0x40>)
 8001ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <HAL_Init+0x40>)
 8002006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_Init+0x40>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f92b 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f808 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002024:	f7ff fd6e 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f943 	bl	80022de <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 f90b 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000118 	.word	0x20000118
 800208c:	20000120 	.word	0x20000120
 8002090:	2000011c 	.word	0x2000011c

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000120 	.word	0x20000120
 80020b8:	200006a8 	.word	0x200006a8

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200006a8 	.word	0x200006a8

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff8e 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff29 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff3e 	bl	800211c <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff8e 	bl	80021c8 <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5d 	bl	8002174 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff31 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff feda 	bl	80020bc <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d008      	beq.n	8002328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e052      	b.n	80023ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0216 	bic.w	r2, r2, #22
 8002336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_DMA_Abort+0x62>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0208 	bic.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e013      	b.n	80023a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff fe9f 	bl	80020bc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d90c      	bls.n	80023a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e015      	b.n	80023ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e4      	bne.n	800237a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2280      	movs	r2, #128	; 0x80
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00c      	b.n	800240e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2205      	movs	r2, #5
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e159      	b.n	80026ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8148 	bne.w	80026e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a2 	beq.w	80026e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b57      	ldr	r3, [pc, #348]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a49      	ldr	r2, [pc, #292]	; (800270c <HAL_GPIO_Init+0x2f0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d019      	beq.n	800261e <HAL_GPIO_Init+0x202>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a48      	ldr	r2, [pc, #288]	; (8002710 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d013      	beq.n	800261a <HAL_GPIO_Init+0x1fe>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_GPIO_Init+0x2f8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00d      	beq.n	8002616 <HAL_GPIO_Init+0x1fa>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2fc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d007      	beq.n	8002612 <HAL_GPIO_Init+0x1f6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x300>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_GPIO_Init+0x1f2>
 800260a:	2304      	movs	r3, #4
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800260e:	2307      	movs	r3, #7
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x204>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x204>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	; (8002708 <HAL_GPIO_Init+0x2ec>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_GPIO_Init+0x304>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a24      	ldr	r2, [pc, #144]	; (8002720 <HAL_GPIO_Init+0x304>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_GPIO_Init+0x304>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_GPIO_Init+0x304>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f aea2 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40013c00 	.word	0x40013c00

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43d9      	mvns	r1, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e267      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e242      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6f      	ldr	r2, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6d      	ldr	r3, [pc, #436]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6c      	ldr	r2, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b69      	ldr	r3, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a68      	ldr	r2, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fc3a 	bl	80020bc <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fc36 	bl	80020bc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e207      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fc26 	bl	80020bc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fc22 	bl	80020bc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1f3      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b44      	ldr	r3, [pc, #272]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c7      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4937      	ldr	r1, [pc, #220]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_OscConfig+0x244>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7ff fbdb 	bl	80020bc <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff fbd7 	bl	80020bc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a8      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b28      	ldr	r3, [pc, #160]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4925      	ldr	r1, [pc, #148]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x244>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff fbba 	bl	80020bc <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff fbb6 	bl	80020bc <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e187      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d036      	beq.n	80029e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <HAL_RCC_OscConfig+0x248>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff fb9a 	bl	80020bc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff fb96 	bl	80020bc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e167      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_OscConfig+0x240>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_RCC_OscConfig+0x248>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fb83 	bl	80020bc <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e00e      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff fb7f 	bl	80020bc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d907      	bls.n	80029d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e150      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470000 	.word	0x42470000
 80029d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b88      	ldr	r3, [pc, #544]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ea      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8097 	beq.w	8002b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b81      	ldr	r3, [pc, #516]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b7d      	ldr	r3, [pc, #500]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a7c      	ldr	r2, [pc, #496]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b7a      	ldr	r3, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b77      	ldr	r3, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b74      	ldr	r3, [pc, #464]	; (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a73      	ldr	r2, [pc, #460]	; (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fb3f 	bl	80020bc <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7ff fb3b 	bl	80020bc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e10c      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x2ea>
 8002a68:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x324>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x30c>
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a5e      	ldr	r2, [pc, #376]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	; 0x70
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x324>
 8002a98:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a57      	ldr	r2, [pc, #348]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	4b55      	ldr	r3, [pc, #340]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	4a54      	ldr	r2, [pc, #336]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fb00 	bl	80020bc <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7ff fafc 	bl	80020bc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0cb      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ee      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x334>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7ff faea 	bl	80020bc <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7ff fae6 	bl	80020bc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0b5      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	4b3e      	ldr	r3, [pc, #248]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4a38      	ldr	r2, [pc, #224]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a1 	beq.w	8002c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b2a:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d05c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d141      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff faba 	bl	80020bc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff fab6 	bl	80020bc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e087      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	491b      	ldr	r1, [pc, #108]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7ff fa8f 	bl	80020bc <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7ff fa8b 	bl	80020bc <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e05c      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x416>
 8002bc0:	e054      	b.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fa78 	bl	80020bc <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7ff fa74 	bl	80020bc <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e045      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x444>
 8002bee:	e03d      	b.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e038      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d028      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f9a6 	bl	80020bc <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f9a2 	bl	80020bc <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f821 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f906 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800b07c 	.word	0x0800b07c
 8002e40:	20000118 	.word	0x20000118
 8002e44:	2000011c 	.word	0x2000011c

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b094      	sub	sp, #80	; 0x50
 8002e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	647b      	str	r3, [r7, #68]	; 0x44
 8002e54:	2300      	movs	r3, #0
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	2300      	movs	r3, #0
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e60:	4b79      	ldr	r3, [pc, #484]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d00d      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x40>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	f200 80e1 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e7a:	e0db      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b73      	ldr	r3, [pc, #460]	; (800304c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e80:	e0db      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e86:	e0d8      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e88:	4b6f      	ldr	r3, [pc, #444]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e92:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d063      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	0159      	lsls	r1, r3, #5
 8002ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ecc:	0150      	lsls	r0, r2, #5
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	1a51      	subs	r1, r2, r1
 8002ed6:	6139      	str	r1, [r7, #16]
 8002ed8:	4629      	mov	r1, r5
 8002eda:	eb63 0301 	sbc.w	r3, r3, r1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eec:	4659      	mov	r1, fp
 8002eee:	018b      	lsls	r3, r1, #6
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	018a      	lsls	r2, r1, #6
 8002efa:	4651      	mov	r1, sl
 8002efc:	ebb2 0801 	subs.w	r8, r2, r1
 8002f00:	4659      	mov	r1, fp
 8002f02:	eb63 0901 	sbc.w	r9, r3, r1
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f1a:	4690      	mov	r8, r2
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	eb18 0303 	adds.w	r3, r8, r3
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	462b      	mov	r3, r5
 8002f28:	eb49 0303 	adc.w	r3, r9, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	024b      	lsls	r3, r1, #9
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f44:	4621      	mov	r1, r4
 8002f46:	024a      	lsls	r2, r1, #9
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f58:	f7fd fe9e 	bl	8000c98 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4613      	mov	r3, r2
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	e058      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4611      	mov	r1, r2
 8002f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	0159      	lsls	r1, r3, #5
 8002f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f92:	0150      	lsls	r0, r2, #5
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4641      	mov	r1, r8
 8002f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f9e:	4649      	mov	r1, r9
 8002fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	00eb      	lsls	r3, r5, #3
 8002fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fce:	00e2      	lsls	r2, r4, #3
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	4643      	mov	r3, r8
 8002fd6:	18e3      	adds	r3, r4, r3
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	464b      	mov	r3, r9
 8002fdc:	eb45 0303 	adc.w	r3, r5, r3
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fee:	4629      	mov	r1, r5
 8002ff0:	028b      	lsls	r3, r1, #10
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	028a      	lsls	r2, r1, #10
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003002:	2200      	movs	r2, #0
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	61fa      	str	r2, [r7, #28]
 8003008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800300c:	f7fd fe44 	bl	8000c98 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_GetSysClockFreq+0x200>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800302a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetSysClockFreq+0x204>)
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800303c:	4618      	mov	r0, r3
 800303e:	3750      	adds	r7, #80	; 0x50
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400
 8003050:	007a1200 	.word	0x007a1200

08003054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_RCC_GetHCLKFreq+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000118 	.word	0x20000118

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003070:	f7ff fff0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0a9b      	lsrs	r3, r3, #10
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	0800b08c 	.word	0x0800b08c

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003098:	f7ff ffdc 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0b5b      	lsrs	r3, r3, #13
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4903      	ldr	r1, [pc, #12]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	0800b08c 	.word	0x0800b08c

080030bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e041      	b.n	8003152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fe fd36 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f000 fde2 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e03c      	b.n	80031ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_TIM_Base_Start+0xa0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d018      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d013      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_TIM_Base_Start+0xa4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d00e      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a19      	ldr	r2, [pc, #100]	; (8003204 <HAL_TIM_Base_Start+0xa8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d009      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_TIM_Base_Start+0xac>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <HAL_TIM_Base_Start+0x5c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_TIM_Base_Start+0xb0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d111      	bne.n	80031dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d010      	beq.n	80031ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0201 	orr.w	r2, r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031da:	e007      	b.n	80031ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40010000 	.word	0x40010000
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40014000 	.word	0x40014000

08003210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e044      	b.n	80032b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d018      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x6c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d013      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x6c>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x6c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x6c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	; (80032cc <HAL_TIM_Base_Start_IT+0xbc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <HAL_TIM_Base_Start_IT+0x6c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d111      	bne.n	80032a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b06      	cmp	r3, #6
 800328c:	d010      	beq.n	80032b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329e:	e007      	b.n	80032b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40014000 	.word	0x40014000

080032d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e041      	b.n	800336a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f839 	bl	8003372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 fcd6 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_TIM_PWM_Start+0x24>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e022      	b.n	80033f2 <HAL_TIM_PWM_Start+0x6a>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d109      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x3e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e015      	b.n	80033f2 <HAL_TIM_PWM_Start+0x6a>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d109      	bne.n	80033e0 <HAL_TIM_PWM_Start+0x58>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e008      	b.n	80033f2 <HAL_TIM_PWM_Start+0x6a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e068      	b.n	80034cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_PWM_Start+0x82>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	e013      	b.n	8003432 <HAL_TIM_PWM_Start+0xaa>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_PWM_Start+0x92>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003418:	e00b      	b.n	8003432 <HAL_TIM_PWM_Start+0xaa>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_PWM_Start+0xa2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	e003      	b.n	8003432 <HAL_TIM_PWM_Start+0xaa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fee8 	bl	8004210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_TIM_PWM_Start+0x14c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d107      	bne.n	800345a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003458:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_TIM_PWM_Start+0x14c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_TIM_PWM_Start+0x10e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d013      	beq.n	8003496 <HAL_TIM_PWM_Start+0x10e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_TIM_PWM_Start+0x150>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_TIM_PWM_Start+0x10e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_TIM_PWM_Start+0x154>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_TIM_PWM_Start+0x10e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_TIM_PWM_Start+0x158>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_TIM_PWM_Start+0x10e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <HAL_TIM_PWM_Start+0x15c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d010      	beq.n	80034ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	e007      	b.n	80034ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40014000 	.word	0x40014000

080034e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e097      	b.n	800362c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fb5d 	bl	8001bd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3304      	adds	r3, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 fbc1 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	4313      	orrs	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003588:	f023 030c 	bic.w	r3, r3, #12
 800358c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	4313      	orrs	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	011a      	lsls	r2, r3, #4
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	4313      	orrs	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4313      	orrs	r3, r2
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800365c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d110      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e069      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003684:	e031      	b.n	80036ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d110      	bne.n	80036ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003692:	7b3b      	ldrb	r3, [r7, #12]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d001      	beq.n	800369c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e055      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ac:	e01d      	b.n	80036ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d108      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036b4:	7bbb      	ldrb	r3, [r7, #14]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ba:	7b7b      	ldrb	r3, [r7, #13]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c0:	7b3b      	ldrb	r3, [r7, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d001      	beq.n	80036ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e03e      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_TIM_Encoder_Start+0xc4>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d008      	beq.n	8003708 <HAL_TIM_Encoder_Start+0xd4>
 80036f6:	e00f      	b.n	8003718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2201      	movs	r2, #1
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fd85 	bl	8004210 <TIM_CCxChannelCmd>
      break;
 8003706:	e016      	b.n	8003736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	2104      	movs	r1, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fd7d 	bl	8004210 <TIM_CCxChannelCmd>
      break;
 8003716:	e00e      	b.n	8003736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2201      	movs	r2, #1
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fd75 	bl	8004210 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	2104      	movs	r1, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fd6e 	bl	8004210 <TIM_CCxChannelCmd>
      break;
 8003734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0202 	mvn.w	r2, #2
 800377c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa77 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa69 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fa7a 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0204 	mvn.w	r2, #4
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa4d 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa3f 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa50 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b08      	cmp	r3, #8
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0208 	mvn.w	r2, #8
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa23 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa15 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa26 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b10      	cmp	r3, #16
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2208      	movs	r2, #8
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9f9 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9eb 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9fc 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f81e 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd78 	bl	80043f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9c1 	bl	8003cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b20      	cmp	r3, #32
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0220 	mvn.w	r2, #32
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fd42 	bl	80043dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e0ae      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	f200 809f 	bhi.w	8003acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039c9 	.word	0x080039c9
 8003998:	08003acd 	.word	0x08003acd
 800399c:	08003acd 	.word	0x08003acd
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003acd 	.word	0x08003acd
 80039ac:	08003acd 	.word	0x08003acd
 80039b0:	08003acd 	.word	0x08003acd
 80039b4:	08003a4b 	.word	0x08003a4b
 80039b8:	08003acd 	.word	0x08003acd
 80039bc:	08003acd 	.word	0x08003acd
 80039c0:	08003acd 	.word	0x08003acd
 80039c4:	08003a8b 	.word	0x08003a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9f8 	bl	8003dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0208 	orr.w	r2, r2, #8
 80039e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	619a      	str	r2, [r3, #24]
      break;
 8003a06:	e064      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa3e 	bl	8003e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6999      	ldr	r1, [r3, #24]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]
      break;
 8003a48:	e043      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa89 	bl	8003f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0208 	orr.w	r2, r2, #8
 8003a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0204 	bic.w	r2, r2, #4
 8003a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
      break;
 8003a88:	e023      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fad3 	bl	800403c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b4      	b.n	8003c6a <HAL_TIM_ConfigClockSource+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b38:	d03e      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3e:	f200 8087 	bhi.w	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	f000 8086 	beq.w	8003c56 <HAL_TIM_ConfigClockSource+0x172>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4e:	d87f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b70      	cmp	r3, #112	; 0x70
 8003b52:	d01a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xa6>
 8003b54:	2b70      	cmp	r3, #112	; 0x70
 8003b56:	d87b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b60      	cmp	r3, #96	; 0x60
 8003b5a:	d050      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x11a>
 8003b5c:	2b60      	cmp	r3, #96	; 0x60
 8003b5e:	d877      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d03c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0xfa>
 8003b64:	2b50      	cmp	r3, #80	; 0x50
 8003b66:	d873      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d058      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x13a>
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d86f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d064      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b30      	cmp	r3, #48	; 0x30
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d867      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d05a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	e062      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f000 fb19 	bl	80041d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
      break;
 8003bb6:	e04f      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f000 fb02 	bl	80041d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 fa76 	bl	80040dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	; 0x50
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 facf 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fa95 	bl	800413a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	; 0x60
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fabf 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 fa56 	bl	80040dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	; 0x40
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 faaf 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 faa6 	bl	800419a <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00f      	beq.n	8003cfc <TIM_Base_SetConfig+0x38>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d00b      	beq.n	8003cfc <TIM_Base_SetConfig+0x38>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a31      	ldr	r2, [pc, #196]	; (8003dac <TIM_Base_SetConfig+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d007      	beq.n	8003cfc <TIM_Base_SetConfig+0x38>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a30      	ldr	r2, [pc, #192]	; (8003db0 <TIM_Base_SetConfig+0xec>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_Base_SetConfig+0x38>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	; (8003db4 <TIM_Base_SetConfig+0xf0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d108      	bne.n	8003d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01b      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d017      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <TIM_Base_SetConfig+0xe8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <TIM_Base_SetConfig+0xec>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00f      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a20      	ldr	r2, [pc, #128]	; (8003db4 <TIM_Base_SetConfig+0xf0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00b      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <TIM_Base_SetConfig+0xf4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <TIM_Base_SetConfig+0xf8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d003      	beq.n	8003d4e <TIM_Base_SetConfig+0x8a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <TIM_Base_SetConfig+0xfc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d108      	bne.n	8003d60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <TIM_Base_SetConfig+0xe4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d103      	bne.n	8003d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	615a      	str	r2, [r3, #20]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40000c00 	.word	0x40000c00
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800

08003dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f023 0302 	bic.w	r3, r3, #2
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <TIM_OC1_SetConfig+0xc8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10c      	bne.n	8003e3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f023 0308 	bic.w	r3, r3, #8
 8003e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <TIM_OC1_SetConfig+0xc8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d111      	bne.n	8003e66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40010000 	.word	0x40010000

08003e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0320 	bic.w	r3, r3, #32
 8003eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <TIM_OC2_SetConfig+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10d      	bne.n	8003f0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <TIM_OC2_SetConfig+0xd4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d113      	bne.n	8003f3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40010000 	.word	0x40010000

08003f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <TIM_OC3_SetConfig+0xd0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10d      	bne.n	8003fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <TIM_OC3_SetConfig+0xd0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40010000 	.word	0x40010000

0800403c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	031b      	lsls	r3, r3, #12
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <TIM_OC4_SetConfig+0x9c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40010000 	.word	0x40010000

080040dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413a:	b480      	push	{r7}
 800413c:	b087      	sub	sp, #28
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0210 	bic.w	r2, r3, #16
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	031b      	lsls	r3, r3, #12
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f043 0307 	orr.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2201      	movs	r2, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	431a      	orrs	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e050      	b.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d013      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000

08004338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e03d      	b.n	80043d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4313      	orrs	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e03f      	b.n	8004496 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fc50 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	; 0x24
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fcbf 	bl	8004dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695a      	ldr	r2, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800447c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	4613      	mov	r3, r2
 80044aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d130      	bne.n	800451a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Transmit_IT+0x26>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e029      	b.n	800451c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Transmit_IT+0x38>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e022      	b.n	800451c <HAL_UART_Transmit_IT+0x7e>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2221      	movs	r2, #33	; 0x21
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004514:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b0ba      	sub	sp, #232	; 0xe8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fb65 	bl	8004c56 <UART_Receive_IT>
      return;
 800458c:	e256      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800458e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80de 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
 8004598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80d1 	beq.w	8004754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d011      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 81ed 	beq.w	8004a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
 8004664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 faf0 	bl	8004c56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_UART_IRQHandler+0x17a>
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04f      	beq.n	8004742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9f8 	bl	8004a98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d141      	bne.n	800473a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3314      	adds	r3, #20
 80046de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1d9      	bne.n	80046b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_UART_IRQHandler+0x3dc>)
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fe5d 	bl	80023d6 <HAL_DMA_Abort_IT>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800472c:	4610      	mov	r0, r2
 800472e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00e      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f99a 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e00a      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f996 	bl	8004a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	e006      	b.n	8004750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f992 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800474e:	e170      	b.n	8004a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	bf00      	nop
    return;
 8004752:	e16e      	b.n	8004a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	2b01      	cmp	r3, #1
 800475a:	f040 814a 	bne.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8143 	beq.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 813c 	beq.w	80049f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	f040 80b4 	bne.w	8004908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8140 	beq.w	8004a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047be:	429a      	cmp	r2, r3
 80047c0:	f080 8139 	bcs.w	8004a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	f000 8088 	beq.w	80048ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800480a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1d9      	bne.n	80047da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800484a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800484e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800485c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e1      	bne.n	8004826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3314      	adds	r3, #20
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800488c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e3      	bne.n	8004862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ba:	f023 0310 	bic.w	r3, r3, #16
 80048be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e3      	bne.n	80048a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd fd06 	bl	80022f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8c0 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004900:	e099      	b.n	8004a36 <HAL_UART_IRQHandler+0x50e>
 8004902:	bf00      	nop
 8004904:	08004b5f 	.word	0x08004b5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004910:	b29b      	uxth	r3, r3
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 808b 	beq.w	8004a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 8086 	beq.w	8004a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	330c      	adds	r3, #12
 8004934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004952:	647a      	str	r2, [r7, #68]	; 0x44
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e3      	bne.n	800492e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	623b      	str	r3, [r7, #32]
   return(result);
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800498a:	633a      	str	r2, [r7, #48]	; 0x30
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e3      	bne.n	8004966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0310 	bic.w	r3, r3, #16
 80049c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e3      	bne.n	80049ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f848 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f0:	e023      	b.n	8004a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_UART_IRQHandler+0x4ea>
 80049fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f8bb 	bl	8004b86 <UART_Transmit_IT>
    return;
 8004a10:	e014      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00e      	beq.n	8004a3c <HAL_UART_IRQHandler+0x514>
 8004a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8fb 	bl	8004c26 <UART_EndTransmit_IT>
    return;
 8004a30:	e004      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
    return;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
      return;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_UART_IRQHandler+0x514>
      return;
 8004a3a:	bf00      	nop
  }
}
 8004a3c:	37e8      	adds	r7, #232	; 0xe8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b095      	sub	sp, #84	; 0x54
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d119      	bne.n	8004b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	647b      	str	r3, [r7, #68]	; 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b30:	61ba      	str	r2, [r7, #24]
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6979      	ldr	r1, [r7, #20]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b52:	bf00      	nop
 8004b54:	3754      	adds	r7, #84	; 0x54
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ff77 	bl	8004a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b21      	cmp	r3, #33	; 0x21
 8004b98:	d13e      	bne.n	8004c18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d114      	bne.n	8004bce <UART_Transmit_IT+0x48>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d110      	bne.n	8004bce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]
 8004bcc:	e008      	b.n	8004be0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	1c59      	adds	r1, r3, #1
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6211      	str	r1, [r2, #32]
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4619      	mov	r1, r3
 8004bee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10f      	bne.n	8004c14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fefc 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b08c      	sub	sp, #48	; 0x30
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b22      	cmp	r3, #34	; 0x22
 8004c68:	f040 80ab 	bne.w	8004dc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d117      	bne.n	8004ca6 <UART_Receive_IT+0x50>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d113      	bne.n	8004ca6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca4:	e026      	b.n	8004cf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb8:	d007      	beq.n	8004cca <UART_Receive_IT+0x74>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <UART_Receive_IT+0x82>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d106      	bne.n	8004cd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	701a      	strb	r2, [r3, #0]
 8004cd6:	e008      	b.n	8004cea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	4619      	mov	r1, r3
 8004d02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d15a      	bne.n	8004dbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0220 	bic.w	r2, r2, #32
 8004d16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d135      	bne.n	8004db4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6e:	623a      	str	r2, [r7, #32]
 8004d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	69f9      	ldr	r1, [r7, #28]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d10a      	bne.n	8004da6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fe67 	bl	8004a80 <HAL_UARTEx_RxEventCallback>
 8004db2:	e002      	b.n	8004dba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fe4f 	bl	8004a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e002      	b.n	8004dc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3730      	adds	r7, #48	; 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b0c0      	sub	sp, #256	; 0x100
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	68d9      	ldr	r1, [r3, #12]
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	ea40 0301 	orr.w	r3, r0, r1
 8004df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e24:	f021 010c 	bic.w	r1, r1, #12
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e32:	430b      	orrs	r3, r1
 8004e34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e46:	6999      	ldr	r1, [r3, #24]
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	ea40 0301 	orr.w	r3, r0, r1
 8004e52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b8f      	ldr	r3, [pc, #572]	; (8005098 <UART_SetConfig+0x2cc>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d005      	beq.n	8004e6c <UART_SetConfig+0xa0>
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b8d      	ldr	r3, [pc, #564]	; (800509c <UART_SetConfig+0x2d0>)
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d104      	bne.n	8004e76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe f912 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004e70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e74:	e003      	b.n	8004e7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e76:	f7fe f8f9 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8004e7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e88:	f040 810c 	bne.w	80050a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e9e:	4622      	mov	r2, r4
 8004ea0:	462b      	mov	r3, r5
 8004ea2:	1891      	adds	r1, r2, r2
 8004ea4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ea6:	415b      	adcs	r3, r3
 8004ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eae:	4621      	mov	r1, r4
 8004eb0:	eb12 0801 	adds.w	r8, r2, r1
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	eb43 0901 	adc.w	r9, r3, r1
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ece:	4690      	mov	r8, r2
 8004ed0:	4699      	mov	r9, r3
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	eb18 0303 	adds.w	r3, r8, r3
 8004ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004edc:	462b      	mov	r3, r5
 8004ede:	eb49 0303 	adc.w	r3, r9, r3
 8004ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ef2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ef6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004efa:	460b      	mov	r3, r1
 8004efc:	18db      	adds	r3, r3, r3
 8004efe:	653b      	str	r3, [r7, #80]	; 0x50
 8004f00:	4613      	mov	r3, r2
 8004f02:	eb42 0303 	adc.w	r3, r2, r3
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54
 8004f08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f10:	f7fb fec2 	bl	8000c98 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4b61      	ldr	r3, [pc, #388]	; (80050a0 <UART_SetConfig+0x2d4>)
 8004f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	011c      	lsls	r4, r3, #4
 8004f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f34:	4642      	mov	r2, r8
 8004f36:	464b      	mov	r3, r9
 8004f38:	1891      	adds	r1, r2, r2
 8004f3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f3c:	415b      	adcs	r3, r3
 8004f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f44:	4641      	mov	r1, r8
 8004f46:	eb12 0a01 	adds.w	sl, r2, r1
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f64:	4692      	mov	sl, r2
 8004f66:	469b      	mov	fp, r3
 8004f68:	4643      	mov	r3, r8
 8004f6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f72:	464b      	mov	r3, r9
 8004f74:	eb4b 0303 	adc.w	r3, fp, r3
 8004f78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f90:	460b      	mov	r3, r1
 8004f92:	18db      	adds	r3, r3, r3
 8004f94:	643b      	str	r3, [r7, #64]	; 0x40
 8004f96:	4613      	mov	r3, r2
 8004f98:	eb42 0303 	adc.w	r3, r2, r3
 8004f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fa6:	f7fb fe77 	bl	8000c98 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <UART_SetConfig+0x2d4>)
 8004fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2264      	movs	r2, #100	; 0x64
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	1acb      	subs	r3, r1, r3
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <UART_SetConfig+0x2d4>)
 8004fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fd4:	441c      	add	r4, r3
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	1891      	adds	r1, r2, r2
 8004fee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff0:	415b      	adcs	r3, r3
 8004ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	1851      	adds	r1, r2, r1
 8004ffc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ffe:	4649      	mov	r1, r9
 8005000:	414b      	adcs	r3, r1
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005010:	4659      	mov	r1, fp
 8005012:	00cb      	lsls	r3, r1, #3
 8005014:	4651      	mov	r1, sl
 8005016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501a:	4651      	mov	r1, sl
 800501c:	00ca      	lsls	r2, r1, #3
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	4603      	mov	r3, r0
 8005024:	4642      	mov	r2, r8
 8005026:	189b      	adds	r3, r3, r2
 8005028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800502c:	464b      	mov	r3, r9
 800502e:	460a      	mov	r2, r1
 8005030:	eb42 0303 	adc.w	r3, r2, r3
 8005034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005044:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800504c:	460b      	mov	r3, r1
 800504e:	18db      	adds	r3, r3, r3
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
 8005052:	4613      	mov	r3, r2
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800505e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005062:	f7fb fe19 	bl	8000c98 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <UART_SetConfig+0x2d4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	2164      	movs	r1, #100	; 0x64
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	3332      	adds	r3, #50	; 0x32
 800507e:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <UART_SetConfig+0x2d4>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f003 0207 	and.w	r2, r3, #7
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4422      	add	r2, r4
 8005092:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005094:	e106      	b.n	80052a4 <UART_SetConfig+0x4d8>
 8005096:	bf00      	nop
 8005098:	40011000 	.word	0x40011000
 800509c:	40011400 	.word	0x40011400
 80050a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a8:	2200      	movs	r2, #0
 80050aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050b6:	4642      	mov	r2, r8
 80050b8:	464b      	mov	r3, r9
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	6239      	str	r1, [r7, #32]
 80050be:	415b      	adcs	r3, r3
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
 80050c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050c6:	4641      	mov	r1, r8
 80050c8:	1854      	adds	r4, r2, r1
 80050ca:	4649      	mov	r1, r9
 80050cc:	eb43 0501 	adc.w	r5, r3, r1
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	00eb      	lsls	r3, r5, #3
 80050da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050de:	00e2      	lsls	r2, r4, #3
 80050e0:	4614      	mov	r4, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4643      	mov	r3, r8
 80050e6:	18e3      	adds	r3, r4, r3
 80050e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050ec:	464b      	mov	r3, r9
 80050ee:	eb45 0303 	adc.w	r3, r5, r3
 80050f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005102:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005112:	4629      	mov	r1, r5
 8005114:	008b      	lsls	r3, r1, #2
 8005116:	4621      	mov	r1, r4
 8005118:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511c:	4621      	mov	r1, r4
 800511e:	008a      	lsls	r2, r1, #2
 8005120:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005124:	f7fb fdb8 	bl	8000c98 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4b60      	ldr	r3, [pc, #384]	; (80052b0 <UART_SetConfig+0x4e4>)
 800512e:	fba3 2302 	umull	r2, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	011c      	lsls	r4, r3, #4
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005140:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005144:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005148:	4642      	mov	r2, r8
 800514a:	464b      	mov	r3, r9
 800514c:	1891      	adds	r1, r2, r2
 800514e:	61b9      	str	r1, [r7, #24]
 8005150:	415b      	adcs	r3, r3
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005158:	4641      	mov	r1, r8
 800515a:	1851      	adds	r1, r2, r1
 800515c:	6139      	str	r1, [r7, #16]
 800515e:	4649      	mov	r1, r9
 8005160:	414b      	adcs	r3, r1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005170:	4659      	mov	r1, fp
 8005172:	00cb      	lsls	r3, r1, #3
 8005174:	4651      	mov	r1, sl
 8005176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517a:	4651      	mov	r1, sl
 800517c:	00ca      	lsls	r2, r1, #3
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	4603      	mov	r3, r0
 8005184:	4642      	mov	r2, r8
 8005186:	189b      	adds	r3, r3, r2
 8005188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800518c:	464b      	mov	r3, r9
 800518e:	460a      	mov	r2, r1
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051b0:	4649      	mov	r1, r9
 80051b2:	008b      	lsls	r3, r1, #2
 80051b4:	4641      	mov	r1, r8
 80051b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ba:	4641      	mov	r1, r8
 80051bc:	008a      	lsls	r2, r1, #2
 80051be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051c2:	f7fb fd69 	bl	8000c98 <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <UART_SetConfig+0x4e4>)
 80051ce:	fba3 2301 	umull	r2, r3, r3, r1
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2264      	movs	r2, #100	; 0x64
 80051d6:	fb02 f303 	mul.w	r3, r2, r3
 80051da:	1acb      	subs	r3, r1, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <UART_SetConfig+0x4e4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ec:	441c      	add	r4, r3
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f2:	2200      	movs	r2, #0
 80051f4:	673b      	str	r3, [r7, #112]	; 0x70
 80051f6:	677a      	str	r2, [r7, #116]	; 0x74
 80051f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	415b      	adcs	r3, r3
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800520c:	4641      	mov	r1, r8
 800520e:	1851      	adds	r1, r2, r1
 8005210:	6039      	str	r1, [r7, #0]
 8005212:	4649      	mov	r1, r9
 8005214:	414b      	adcs	r3, r1
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005224:	4659      	mov	r1, fp
 8005226:	00cb      	lsls	r3, r1, #3
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522e:	4651      	mov	r1, sl
 8005230:	00ca      	lsls	r2, r1, #3
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	4603      	mov	r3, r0
 8005238:	4642      	mov	r2, r8
 800523a:	189b      	adds	r3, r3, r2
 800523c:	66bb      	str	r3, [r7, #104]	; 0x68
 800523e:	464b      	mov	r3, r9
 8005240:	460a      	mov	r2, r1
 8005242:	eb42 0303 	adc.w	r3, r2, r3
 8005246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	663b      	str	r3, [r7, #96]	; 0x60
 8005252:	667a      	str	r2, [r7, #100]	; 0x64
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005260:	4649      	mov	r1, r9
 8005262:	008b      	lsls	r3, r1, #2
 8005264:	4641      	mov	r1, r8
 8005266:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526a:	4641      	mov	r1, r8
 800526c:	008a      	lsls	r2, r1, #2
 800526e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005272:	f7fb fd11 	bl	8000c98 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b0d      	ldr	r3, [pc, #52]	; (80052b0 <UART_SetConfig+0x4e4>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <UART_SetConfig+0x4e4>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4422      	add	r2, r4
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b0:	51eb851f 	.word	0x51eb851f

080052b4 <arm_mat_sub_f32>:
 80052b4:	b4f0      	push	{r4, r5, r6, r7}
 80052b6:	e9d1 4700 	ldrd	r4, r7, [r1]
 80052ba:	6803      	ldr	r3, [r0, #0]
 80052bc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80052c0:	6856      	ldr	r6, [r2, #4]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	d15d      	bne.n	8005382 <arm_mat_sub_f32+0xce>
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d15a      	bne.n	8005382 <arm_mat_sub_f32+0xce>
 80052cc:	8803      	ldrh	r3, [r0, #0]
 80052ce:	8844      	ldrh	r4, [r0, #2]
 80052d0:	fb04 f403 	mul.w	r4, r4, r3
 80052d4:	08a5      	lsrs	r5, r4, #2
 80052d6:	d032      	beq.n	800533e <arm_mat_sub_f32+0x8a>
 80052d8:	f10c 0110 	add.w	r1, ip, #16
 80052dc:	f107 0210 	add.w	r2, r7, #16
 80052e0:	f106 0310 	add.w	r3, r6, #16
 80052e4:	4628      	mov	r0, r5
 80052e6:	ed12 7a04 	vldr	s14, [r2, #-16]
 80052ea:	ed51 7a04 	vldr	s15, [r1, #-16]
 80052ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052f2:	3801      	subs	r0, #1
 80052f4:	ed43 7a04 	vstr	s15, [r3, #-16]
 80052f8:	ed12 7a03 	vldr	s14, [r2, #-12]
 80052fc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005304:	f101 0110 	add.w	r1, r1, #16
 8005308:	ed43 7a03 	vstr	s15, [r3, #-12]
 800530c:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005310:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8005314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005318:	f102 0210 	add.w	r2, r2, #16
 800531c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005320:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8005324:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800532c:	f103 0310 	add.w	r3, r3, #16
 8005330:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005334:	d1d7      	bne.n	80052e6 <arm_mat_sub_f32+0x32>
 8005336:	012b      	lsls	r3, r5, #4
 8005338:	449c      	add	ip, r3
 800533a:	441f      	add	r7, r3
 800533c:	441e      	add	r6, r3
 800533e:	f014 0403 	ands.w	r4, r4, #3
 8005342:	d01b      	beq.n	800537c <arm_mat_sub_f32+0xc8>
 8005344:	eddc 7a00 	vldr	s15, [ip]
 8005348:	ed97 7a00 	vldr	s14, [r7]
 800534c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005350:	3c01      	subs	r4, #1
 8005352:	edc6 7a00 	vstr	s15, [r6]
 8005356:	d011      	beq.n	800537c <arm_mat_sub_f32+0xc8>
 8005358:	eddc 7a01 	vldr	s15, [ip, #4]
 800535c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005364:	2c01      	cmp	r4, #1
 8005366:	edc6 7a01 	vstr	s15, [r6, #4]
 800536a:	d007      	beq.n	800537c <arm_mat_sub_f32+0xc8>
 800536c:	eddc 7a02 	vldr	s15, [ip, #8]
 8005370:	ed97 7a02 	vldr	s14, [r7, #8]
 8005374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005378:	edc6 7a02 	vstr	s15, [r6, #8]
 800537c:	2000      	movs	r0, #0
 800537e:	bcf0      	pop	{r4, r5, r6, r7}
 8005380:	4770      	bx	lr
 8005382:	f06f 0002 	mvn.w	r0, #2
 8005386:	e7fa      	b.n	800537e <arm_mat_sub_f32+0xca>

08005388 <arm_mat_scale_f32>:
 8005388:	b470      	push	{r4, r5, r6}
 800538a:	e9d1 3500 	ldrd	r3, r5, [r1]
 800538e:	6802      	ldr	r2, [r0, #0]
 8005390:	6846      	ldr	r6, [r0, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d147      	bne.n	8005426 <arm_mat_scale_f32+0x9e>
 8005396:	8803      	ldrh	r3, [r0, #0]
 8005398:	8840      	ldrh	r0, [r0, #2]
 800539a:	fb00 f003 	mul.w	r0, r0, r3
 800539e:	0884      	lsrs	r4, r0, #2
 80053a0:	d025      	beq.n	80053ee <arm_mat_scale_f32+0x66>
 80053a2:	f106 0210 	add.w	r2, r6, #16
 80053a6:	f105 0310 	add.w	r3, r5, #16
 80053aa:	4621      	mov	r1, r4
 80053ac:	ed52 7a04 	vldr	s15, [r2, #-16]
 80053b0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053b4:	3901      	subs	r1, #1
 80053b6:	ed43 7a04 	vstr	s15, [r3, #-16]
 80053ba:	ed52 7a03 	vldr	s15, [r2, #-12]
 80053be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053c2:	f102 0210 	add.w	r2, r2, #16
 80053c6:	ed43 7a03 	vstr	s15, [r3, #-12]
 80053ca:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
 80053ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053d2:	f103 0310 	add.w	r3, r3, #16
 80053d6:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80053da:	ed52 7a05 	vldr	s15, [r2, #-20]	; 0xffffffec
 80053de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053e2:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 80053e6:	d1e1      	bne.n	80053ac <arm_mat_scale_f32+0x24>
 80053e8:	0124      	lsls	r4, r4, #4
 80053ea:	4426      	add	r6, r4
 80053ec:	4425      	add	r5, r4
 80053ee:	f010 0003 	ands.w	r0, r0, #3
 80053f2:	d015      	beq.n	8005420 <arm_mat_scale_f32+0x98>
 80053f4:	edd6 7a00 	vldr	s15, [r6]
 80053f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80053fc:	3801      	subs	r0, #1
 80053fe:	edc5 7a00 	vstr	s15, [r5]
 8005402:	d00d      	beq.n	8005420 <arm_mat_scale_f32+0x98>
 8005404:	edd6 7a01 	vldr	s15, [r6, #4]
 8005408:	ee67 7a80 	vmul.f32	s15, s15, s0
 800540c:	2801      	cmp	r0, #1
 800540e:	edc5 7a01 	vstr	s15, [r5, #4]
 8005412:	d005      	beq.n	8005420 <arm_mat_scale_f32+0x98>
 8005414:	edd6 7a02 	vldr	s15, [r6, #8]
 8005418:	ee27 0a80 	vmul.f32	s0, s15, s0
 800541c:	ed85 0a02 	vstr	s0, [r5, #8]
 8005420:	2000      	movs	r0, #0
 8005422:	bc70      	pop	{r4, r5, r6}
 8005424:	4770      	bx	lr
 8005426:	f06f 0002 	mvn.w	r0, #2
 800542a:	e7fa      	b.n	8005422 <arm_mat_scale_f32+0x9a>

0800542c <arm_mat_mult_f32>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	8845      	ldrh	r5, [r0, #2]
 8005432:	880b      	ldrh	r3, [r1, #0]
 8005434:	8806      	ldrh	r6, [r0, #0]
 8005436:	6847      	ldr	r7, [r0, #4]
 8005438:	6854      	ldr	r4, [r2, #4]
 800543a:	6848      	ldr	r0, [r1, #4]
 800543c:	b08b      	sub	sp, #44	; 0x2c
 800543e:	42ab      	cmp	r3, r5
 8005440:	9109      	str	r1, [sp, #36]	; 0x24
 8005442:	9604      	str	r6, [sp, #16]
 8005444:	8849      	ldrh	r1, [r1, #2]
 8005446:	f040 808a 	bne.w	800555e <arm_mat_mult_f32+0x132>
 800544a:	8815      	ldrh	r5, [r2, #0]
 800544c:	42b5      	cmp	r5, r6
 800544e:	f040 8086 	bne.w	800555e <arm_mat_mult_f32+0x132>
 8005452:	8852      	ldrh	r2, [r2, #2]
 8005454:	428a      	cmp	r2, r1
 8005456:	f040 8082 	bne.w	800555e <arm_mat_mult_f32+0x132>
 800545a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800545e:	1d01      	adds	r1, r0, #4
 8005460:	0116      	lsls	r6, r2, #4
 8005462:	9108      	str	r1, [sp, #32]
 8005464:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005468:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800546c:	9101      	str	r1, [sp, #4]
 800546e:	fb06 f108 	mul.w	r1, r6, r8
 8005472:	0095      	lsls	r5, r2, #2
 8005474:	9103      	str	r1, [sp, #12]
 8005476:	00d2      	lsls	r2, r2, #3
 8005478:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800547c:	f003 0903 	and.w	r9, r3, #3
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f107 0b10 	add.w	fp, r7, #16
 8005486:	eb04 0a05 	add.w	sl, r4, r5
 800548a:	9107      	str	r1, [sp, #28]
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	9306      	str	r3, [sp, #24]
 8005490:	f1ab 0310 	sub.w	r3, fp, #16
 8005494:	9305      	str	r3, [sp, #20]
 8005496:	9b07      	ldr	r3, [sp, #28]
 8005498:	f8dd e020 	ldr.w	lr, [sp, #32]
 800549c:	eb03 0c0a 	add.w	ip, r3, sl
 80054a0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005568 <arm_mat_mult_f32+0x13c>
 80054a4:	f1b8 0f00 	cmp.w	r8, #0
 80054a8:	d053      	beq.n	8005552 <arm_mat_mult_f32+0x126>
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	4644      	mov	r4, r8
 80054ae:	18c1      	adds	r1, r0, r3
 80054b0:	4602      	mov	r2, r0
 80054b2:	465b      	mov	r3, fp
 80054b4:	ed92 6a00 	vldr	s12, [r2]
 80054b8:	ed13 7a04 	vldr	s14, [r3, #-16]
 80054bc:	ed53 4a03 	vldr	s9, [r3, #-12]
 80054c0:	ed53 6a02 	vldr	s13, [r3, #-8]
 80054c4:	ed91 5a00 	vldr	s10, [r1]
 80054c8:	ed53 5a01 	vldr	s11, [r3, #-4]
 80054cc:	1957      	adds	r7, r2, r5
 80054ce:	ee27 7a06 	vmul.f32	s14, s14, s12
 80054d2:	ed97 6a00 	vldr	s12, [r7]
 80054d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054da:	ee26 6a24 	vmul.f32	s12, s12, s9
 80054de:	194f      	adds	r7, r1, r5
 80054e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80054e4:	ee26 7a85 	vmul.f32	s14, s13, s10
 80054e8:	edd7 7a00 	vldr	s15, [r7]
 80054ec:	ee37 7a06 	vadd.f32	s14, s14, s12
 80054f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80054f4:	3c01      	subs	r4, #1
 80054f6:	4432      	add	r2, r6
 80054f8:	4431      	add	r1, r6
 80054fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054fe:	f103 0310 	add.w	r3, r3, #16
 8005502:	d1d7      	bne.n	80054b4 <arm_mat_mult_f32+0x88>
 8005504:	9b03      	ldr	r3, [sp, #12]
 8005506:	9a01      	ldr	r2, [sp, #4]
 8005508:	4418      	add	r0, r3
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	d00b      	beq.n	8005528 <arm_mat_mult_f32+0xfc>
 8005510:	464b      	mov	r3, r9
 8005512:	edd0 6a00 	vldr	s13, [r0]
 8005516:	ecb2 7a01 	vldmia	r2!, {s14}
 800551a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800551e:	3b01      	subs	r3, #1
 8005520:	4428      	add	r0, r5
 8005522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005526:	d1f4      	bne.n	8005512 <arm_mat_mult_f32+0xe6>
 8005528:	ecec 7a01 	vstmia	ip!, {s15}
 800552c:	45d4      	cmp	ip, sl
 800552e:	4670      	mov	r0, lr
 8005530:	f10e 0e04 	add.w	lr, lr, #4
 8005534:	d1b4      	bne.n	80054a0 <arm_mat_mult_f32+0x74>
 8005536:	9a01      	ldr	r2, [sp, #4]
 8005538:	9b06      	ldr	r3, [sp, #24]
 800553a:	4611      	mov	r1, r2
 800553c:	4419      	add	r1, r3
 800553e:	449b      	add	fp, r3
 8005540:	9b04      	ldr	r3, [sp, #16]
 8005542:	9101      	str	r1, [sp, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	44aa      	add	sl, r5
 8005548:	9304      	str	r3, [sp, #16]
 800554a:	d004      	beq.n	8005556 <arm_mat_mult_f32+0x12a>
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	6858      	ldr	r0, [r3, #4]
 8005550:	e79e      	b.n	8005490 <arm_mat_mult_f32+0x64>
 8005552:	9a05      	ldr	r2, [sp, #20]
 8005554:	e7d9      	b.n	800550a <arm_mat_mult_f32+0xde>
 8005556:	4618      	mov	r0, r3
 8005558:	b00b      	add	sp, #44	; 0x2c
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	f06f 0002 	mvn.w	r0, #2
 8005562:	b00b      	add	sp, #44	; 0x2c
 8005564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005568:	00000000 	.word	0x00000000

0800556c <arm_mat_inverse_f32>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	8843      	ldrh	r3, [r0, #2]
 8005572:	8804      	ldrh	r4, [r0, #0]
 8005574:	684e      	ldr	r6, [r1, #4]
 8005576:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800557a:	b087      	sub	sp, #28
 800557c:	429c      	cmp	r4, r3
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	9603      	str	r6, [sp, #12]
 8005582:	f040 80ea 	bne.w	800575a <arm_mat_inverse_f32+0x1ee>
 8005586:	880a      	ldrh	r2, [r1, #0]
 8005588:	884b      	ldrh	r3, [r1, #2]
 800558a:	4293      	cmp	r3, r2
 800558c:	f040 80e5 	bne.w	800575a <arm_mat_inverse_f32+0x1ee>
 8005590:	429c      	cmp	r4, r3
 8005592:	f040 80e2 	bne.w	800575a <arm_mat_inverse_f32+0x1ee>
 8005596:	9005      	str	r0, [sp, #20]
 8005598:	b30c      	cbz	r4, 80055de <arm_mat_inverse_f32+0x72>
 800559a:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800559e:	1e67      	subs	r7, r4, #1
 80055a0:	f846 bb04 	str.w	fp, [r6], #4
 80055a4:	d01b      	beq.n	80055de <arm_mat_inverse_f32+0x72>
 80055a6:	f04f 0801 	mov.w	r8, #1
 80055aa:	00ba      	lsls	r2, r7, #2
 80055ac:	eb06 0a02 	add.w	sl, r6, r2
 80055b0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80055b4:	4630      	mov	r0, r6
 80055b6:	2100      	movs	r1, #0
 80055b8:	f001 f8d5 	bl	8006766 <memset>
 80055bc:	eb0a 0605 	add.w	r6, sl, r5
 80055c0:	462a      	mov	r2, r5
 80055c2:	2100      	movs	r1, #0
 80055c4:	4650      	mov	r0, sl
 80055c6:	f1b8 0f00 	cmp.w	r8, #0
 80055ca:	f000 80cb 	beq.w	8005764 <arm_mat_inverse_f32+0x1f8>
 80055ce:	f001 f8ca 	bl	8006766 <memset>
 80055d2:	3f01      	subs	r7, #1
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	f846 bb04 	str.w	fp, [r6], #4
 80055dc:	d1e5      	bne.n	80055aa <arm_mat_inverse_f32+0x3e>
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80b5 	beq.w	8005750 <arm_mat_inverse_f32+0x1e4>
 80055e6:	009d      	lsls	r5, r3, #2
 80055e8:	eb09 0205 	add.w	r2, r9, r5
 80055ec:	46cc      	mov	ip, r9
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80055f4:	1d2a      	adds	r2, r5, #4
 80055f6:	9204      	str	r2, [sp, #16]
 80055f8:	462f      	mov	r7, r5
 80055fa:	469e      	mov	lr, r3
 80055fc:	2600      	movs	r6, #0
 80055fe:	9b02      	ldr	r3, [sp, #8]
 8005600:	eddc 6a00 	vldr	s13, [ip]
 8005604:	42b4      	cmp	r4, r6
 8005606:	eba3 0b07 	sub.w	fp, r3, r7
 800560a:	f000 80a1 	beq.w	8005750 <arm_mat_inverse_f32+0x1e4>
 800560e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005774 <arm_mat_inverse_f32+0x208>
 8005612:	4632      	mov	r2, r6
 8005614:	4663      	mov	r3, ip
 8005616:	e00b      	b.n	8005630 <arm_mat_inverse_f32+0xc4>
 8005618:	eef4 7a47 	vcmp.f32	s15, s14
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	f102 0201 	add.w	r2, r2, #1
 8005624:	bfc8      	it	gt
 8005626:	eeb0 7a67 	vmovgt.f32	s14, s15
 800562a:	42a2      	cmp	r2, r4
 800562c:	442b      	add	r3, r5
 800562e:	d014      	beq.n	800565a <arm_mat_inverse_f32+0xee>
 8005630:	edd3 7a00 	vldr	s15, [r3]
 8005634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	eeb1 6a67 	vneg.f32	s12, s15
 8005640:	dcea      	bgt.n	8005618 <arm_mat_inverse_f32+0xac>
 8005642:	eeb4 6a47 	vcmp.f32	s12, s14
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	f102 0201 	add.w	r2, r2, #1
 800564e:	bfc8      	it	gt
 8005650:	eeb0 7a46 	vmovgt.f32	s14, s12
 8005654:	42a2      	cmp	r2, r4
 8005656:	442b      	add	r3, r5
 8005658:	d1ea      	bne.n	8005630 <arm_mat_inverse_f32+0xc4>
 800565a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	d075      	beq.n	8005750 <arm_mat_inverse_f32+0x1e4>
 8005664:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566c:	d070      	beq.n	8005750 <arm_mat_inverse_f32+0x1e4>
 800566e:	4672      	mov	r2, lr
 8005670:	4663      	mov	r3, ip
 8005672:	ed93 7a00 	vldr	s14, [r3]
 8005676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800567a:	3a01      	subs	r2, #1
 800567c:	ece3 7a01 	vstmia	r3!, {s15}
 8005680:	d1f7      	bne.n	8005672 <arm_mat_inverse_f32+0x106>
 8005682:	9901      	ldr	r1, [sp, #4]
 8005684:	464b      	mov	r3, r9
 8005686:	ed93 7a00 	vldr	s14, [r3]
 800568a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800568e:	3901      	subs	r1, #1
 8005690:	ece3 7a01 	vstmia	r3!, {s15}
 8005694:	d1f7      	bne.n	8005686 <arm_mat_inverse_f32+0x11a>
 8005696:	9803      	ldr	r0, [sp, #12]
 8005698:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800569c:	42b1      	cmp	r1, r6
 800569e:	d039      	beq.n	8005714 <arm_mat_inverse_f32+0x1a8>
 80056a0:	eddb 6a00 	vldr	s13, [fp]
 80056a4:	465a      	mov	r2, fp
 80056a6:	4673      	mov	r3, lr
 80056a8:	46e2      	mov	sl, ip
 80056aa:	ecba 7a01 	vldmia	sl!, {s14}
 80056ae:	edd2 7a00 	vldr	s15, [r2]
 80056b2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80056b6:	3b01      	subs	r3, #1
 80056b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056bc:	ece2 7a01 	vstmia	r2!, {s15}
 80056c0:	d1f3      	bne.n	80056aa <arm_mat_inverse_f32+0x13e>
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	44bb      	add	fp, r7
 80056c6:	4602      	mov	r2, r0
 80056c8:	46ca      	mov	sl, r9
 80056ca:	ecba 7a01 	vldmia	sl!, {s14}
 80056ce:	edd2 7a00 	vldr	s15, [r2]
 80056d2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80056d6:	3b01      	subs	r3, #1
 80056d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056dc:	ece2 7a01 	vstmia	r2!, {s15}
 80056e0:	d1f3      	bne.n	80056ca <arm_mat_inverse_f32+0x15e>
 80056e2:	4428      	add	r0, r5
 80056e4:	3101      	adds	r1, #1
 80056e6:	428c      	cmp	r4, r1
 80056e8:	44c3      	add	fp, r8
 80056ea:	d1d7      	bne.n	800569c <arm_mat_inverse_f32+0x130>
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	f1be 0e01 	subs.w	lr, lr, #1
 80056f2:	f106 0601 	add.w	r6, r6, #1
 80056f6:	449c      	add	ip, r3
 80056f8:	f1a7 0704 	sub.w	r7, r7, #4
 80056fc:	44a9      	add	r9, r5
 80056fe:	f47f af7e 	bne.w	80055fe <arm_mat_inverse_f32+0x92>
 8005702:	eef5 6a40 	vcmp.f32	s13, #0.0
 8005706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570a:	d006      	beq.n	800571a <arm_mat_inverse_f32+0x1ae>
 800570c:	2000      	movs	r0, #0
 800570e:	b007      	add	sp, #28
 8005710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005714:	44bb      	add	fp, r7
 8005716:	4428      	add	r0, r5
 8005718:	e7e4      	b.n	80056e4 <arm_mat_inverse_f32+0x178>
 800571a:	9b05      	ldr	r3, [sp, #20]
 800571c:	9a01      	ldr	r2, [sp, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	edd3 7a00 	vldr	s15, [r3]
 8005724:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005728:	fb02 f204 	mul.w	r2, r2, r4
 800572c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005730:	4614      	mov	r4, r2
 8005732:	bf08      	it	eq
 8005734:	3304      	addeq	r3, #4
 8005736:	d007      	beq.n	8005748 <arm_mat_inverse_f32+0x1dc>
 8005738:	e7e8      	b.n	800570c <arm_mat_inverse_f32+0x1a0>
 800573a:	ecf3 7a01 	vldmia	r3!, {s15}
 800573e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005746:	d1e1      	bne.n	800570c <arm_mat_inverse_f32+0x1a0>
 8005748:	f10e 0e01 	add.w	lr, lr, #1
 800574c:	4574      	cmp	r4, lr
 800574e:	d1f4      	bne.n	800573a <arm_mat_inverse_f32+0x1ce>
 8005750:	f06f 0004 	mvn.w	r0, #4
 8005754:	b007      	add	sp, #28
 8005756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575a:	f06f 0002 	mvn.w	r0, #2
 800575e:	b007      	add	sp, #28
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	4656      	mov	r6, sl
 8005766:	3f01      	subs	r7, #1
 8005768:	f846 bb04 	str.w	fp, [r6], #4
 800576c:	f47f af1b 	bne.w	80055a6 <arm_mat_inverse_f32+0x3a>
 8005770:	e735      	b.n	80055de <arm_mat_inverse_f32+0x72>
 8005772:	bf00      	nop
 8005774:	00000000 	.word	0x00000000

08005778 <arm_mat_init_f32>:
 8005778:	8001      	strh	r1, [r0, #0]
 800577a:	8042      	strh	r2, [r0, #2]
 800577c:	6043      	str	r3, [r0, #4]
 800577e:	4770      	bx	lr

08005780 <arm_mat_add_f32>:
 8005780:	b4f0      	push	{r4, r5, r6, r7}
 8005782:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005786:	6803      	ldr	r3, [r0, #0]
 8005788:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800578c:	6856      	ldr	r6, [r2, #4]
 800578e:	42a3      	cmp	r3, r4
 8005790:	d15d      	bne.n	800584e <arm_mat_add_f32+0xce>
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	4293      	cmp	r3, r2
 8005796:	d15a      	bne.n	800584e <arm_mat_add_f32+0xce>
 8005798:	8803      	ldrh	r3, [r0, #0]
 800579a:	8844      	ldrh	r4, [r0, #2]
 800579c:	fb04 f403 	mul.w	r4, r4, r3
 80057a0:	08a5      	lsrs	r5, r4, #2
 80057a2:	d032      	beq.n	800580a <arm_mat_add_f32+0x8a>
 80057a4:	f10c 0110 	add.w	r1, ip, #16
 80057a8:	f107 0210 	add.w	r2, r7, #16
 80057ac:	f106 0310 	add.w	r3, r6, #16
 80057b0:	4628      	mov	r0, r5
 80057b2:	ed12 7a04 	vldr	s14, [r2, #-16]
 80057b6:	ed51 7a04 	vldr	s15, [r1, #-16]
 80057ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057be:	3801      	subs	r0, #1
 80057c0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80057c4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80057c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80057cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057d0:	f101 0110 	add.w	r1, r1, #16
 80057d4:	ed43 7a03 	vstr	s15, [r3, #-12]
 80057d8:	ed12 7a02 	vldr	s14, [r2, #-8]
 80057dc:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80057e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057e4:	f102 0210 	add.w	r2, r2, #16
 80057e8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80057ec:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80057f0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80057f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057f8:	f103 0310 	add.w	r3, r3, #16
 80057fc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005800:	d1d7      	bne.n	80057b2 <arm_mat_add_f32+0x32>
 8005802:	012b      	lsls	r3, r5, #4
 8005804:	449c      	add	ip, r3
 8005806:	441f      	add	r7, r3
 8005808:	441e      	add	r6, r3
 800580a:	f014 0403 	ands.w	r4, r4, #3
 800580e:	d01b      	beq.n	8005848 <arm_mat_add_f32+0xc8>
 8005810:	edd7 7a00 	vldr	s15, [r7]
 8005814:	ed9c 7a00 	vldr	s14, [ip]
 8005818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800581c:	3c01      	subs	r4, #1
 800581e:	edc6 7a00 	vstr	s15, [r6]
 8005822:	d011      	beq.n	8005848 <arm_mat_add_f32+0xc8>
 8005824:	eddc 7a01 	vldr	s15, [ip, #4]
 8005828:	ed97 7a01 	vldr	s14, [r7, #4]
 800582c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005830:	2c01      	cmp	r4, #1
 8005832:	edc6 7a01 	vstr	s15, [r6, #4]
 8005836:	d007      	beq.n	8005848 <arm_mat_add_f32+0xc8>
 8005838:	eddc 7a02 	vldr	s15, [ip, #8]
 800583c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005844:	edc6 7a02 	vstr	s15, [r6, #8]
 8005848:	2000      	movs	r0, #0
 800584a:	bcf0      	pop	{r4, r5, r6, r7}
 800584c:	4770      	bx	lr
 800584e:	f06f 0002 	mvn.w	r0, #2
 8005852:	e7fa      	b.n	800584a <arm_mat_add_f32+0xca>

08005854 <__cvt>:
 8005854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	ec55 4b10 	vmov	r4, r5, d0
 800585c:	2d00      	cmp	r5, #0
 800585e:	460e      	mov	r6, r1
 8005860:	4619      	mov	r1, r3
 8005862:	462b      	mov	r3, r5
 8005864:	bfbb      	ittet	lt
 8005866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800586a:	461d      	movlt	r5, r3
 800586c:	2300      	movge	r3, #0
 800586e:	232d      	movlt	r3, #45	; 0x2d
 8005870:	700b      	strb	r3, [r1, #0]
 8005872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005874:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005878:	4691      	mov	r9, r2
 800587a:	f023 0820 	bic.w	r8, r3, #32
 800587e:	bfbc      	itt	lt
 8005880:	4622      	movlt	r2, r4
 8005882:	4614      	movlt	r4, r2
 8005884:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005888:	d005      	beq.n	8005896 <__cvt+0x42>
 800588a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800588e:	d100      	bne.n	8005892 <__cvt+0x3e>
 8005890:	3601      	adds	r6, #1
 8005892:	2102      	movs	r1, #2
 8005894:	e000      	b.n	8005898 <__cvt+0x44>
 8005896:	2103      	movs	r1, #3
 8005898:	ab03      	add	r3, sp, #12
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	ab02      	add	r3, sp, #8
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	ec45 4b10 	vmov	d0, r4, r5
 80058a4:	4653      	mov	r3, sl
 80058a6:	4632      	mov	r2, r6
 80058a8:	f001 f86a 	bl	8006980 <_dtoa_r>
 80058ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058b0:	4607      	mov	r7, r0
 80058b2:	d102      	bne.n	80058ba <__cvt+0x66>
 80058b4:	f019 0f01 	tst.w	r9, #1
 80058b8:	d022      	beq.n	8005900 <__cvt+0xac>
 80058ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058be:	eb07 0906 	add.w	r9, r7, r6
 80058c2:	d110      	bne.n	80058e6 <__cvt+0x92>
 80058c4:	783b      	ldrb	r3, [r7, #0]
 80058c6:	2b30      	cmp	r3, #48	; 0x30
 80058c8:	d10a      	bne.n	80058e0 <__cvt+0x8c>
 80058ca:	2200      	movs	r2, #0
 80058cc:	2300      	movs	r3, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fb f901 	bl	8000ad8 <__aeabi_dcmpeq>
 80058d6:	b918      	cbnz	r0, 80058e0 <__cvt+0x8c>
 80058d8:	f1c6 0601 	rsb	r6, r6, #1
 80058dc:	f8ca 6000 	str.w	r6, [sl]
 80058e0:	f8da 3000 	ldr.w	r3, [sl]
 80058e4:	4499      	add	r9, r3
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fb f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80058f2:	b108      	cbz	r0, 80058f8 <__cvt+0xa4>
 80058f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80058f8:	2230      	movs	r2, #48	; 0x30
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	454b      	cmp	r3, r9
 80058fe:	d307      	bcc.n	8005910 <__cvt+0xbc>
 8005900:	9b03      	ldr	r3, [sp, #12]
 8005902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005904:	1bdb      	subs	r3, r3, r7
 8005906:	4638      	mov	r0, r7
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	b004      	add	sp, #16
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	9103      	str	r1, [sp, #12]
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e7f0      	b.n	80058fa <__cvt+0xa6>

08005918 <__exponent>:
 8005918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800591a:	4603      	mov	r3, r0
 800591c:	2900      	cmp	r1, #0
 800591e:	bfb8      	it	lt
 8005920:	4249      	neglt	r1, r1
 8005922:	f803 2b02 	strb.w	r2, [r3], #2
 8005926:	bfb4      	ite	lt
 8005928:	222d      	movlt	r2, #45	; 0x2d
 800592a:	222b      	movge	r2, #43	; 0x2b
 800592c:	2909      	cmp	r1, #9
 800592e:	7042      	strb	r2, [r0, #1]
 8005930:	dd2a      	ble.n	8005988 <__exponent+0x70>
 8005932:	f10d 0207 	add.w	r2, sp, #7
 8005936:	4617      	mov	r7, r2
 8005938:	260a      	movs	r6, #10
 800593a:	4694      	mov	ip, r2
 800593c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005940:	fb06 1415 	mls	r4, r6, r5, r1
 8005944:	3430      	adds	r4, #48	; 0x30
 8005946:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800594a:	460c      	mov	r4, r1
 800594c:	2c63      	cmp	r4, #99	; 0x63
 800594e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005952:	4629      	mov	r1, r5
 8005954:	dcf1      	bgt.n	800593a <__exponent+0x22>
 8005956:	3130      	adds	r1, #48	; 0x30
 8005958:	f1ac 0402 	sub.w	r4, ip, #2
 800595c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005960:	1c41      	adds	r1, r0, #1
 8005962:	4622      	mov	r2, r4
 8005964:	42ba      	cmp	r2, r7
 8005966:	d30a      	bcc.n	800597e <__exponent+0x66>
 8005968:	f10d 0209 	add.w	r2, sp, #9
 800596c:	eba2 020c 	sub.w	r2, r2, ip
 8005970:	42bc      	cmp	r4, r7
 8005972:	bf88      	it	hi
 8005974:	2200      	movhi	r2, #0
 8005976:	4413      	add	r3, r2
 8005978:	1a18      	subs	r0, r3, r0
 800597a:	b003      	add	sp, #12
 800597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800597e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005982:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005986:	e7ed      	b.n	8005964 <__exponent+0x4c>
 8005988:	2330      	movs	r3, #48	; 0x30
 800598a:	3130      	adds	r1, #48	; 0x30
 800598c:	7083      	strb	r3, [r0, #2]
 800598e:	70c1      	strb	r1, [r0, #3]
 8005990:	1d03      	adds	r3, r0, #4
 8005992:	e7f1      	b.n	8005978 <__exponent+0x60>

08005994 <_printf_float>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	ed2d 8b02 	vpush	{d8}
 800599c:	b08d      	sub	sp, #52	; 0x34
 800599e:	460c      	mov	r4, r1
 80059a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059a4:	4616      	mov	r6, r2
 80059a6:	461f      	mov	r7, r3
 80059a8:	4605      	mov	r5, r0
 80059aa:	f000 fee5 	bl	8006778 <_localeconv_r>
 80059ae:	f8d0 a000 	ldr.w	sl, [r0]
 80059b2:	4650      	mov	r0, sl
 80059b4:	f7fa fc64 	bl	8000280 <strlen>
 80059b8:	2300      	movs	r3, #0
 80059ba:	930a      	str	r3, [sp, #40]	; 0x28
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	9305      	str	r3, [sp, #20]
 80059c0:	f8d8 3000 	ldr.w	r3, [r8]
 80059c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059c8:	3307      	adds	r3, #7
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	f103 0208 	add.w	r2, r3, #8
 80059d2:	f8c8 2000 	str.w	r2, [r8]
 80059d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059de:	9307      	str	r3, [sp, #28]
 80059e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059e4:	ee08 0a10 	vmov	s16, r0
 80059e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80059ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059f0:	4b9e      	ldr	r3, [pc, #632]	; (8005c6c <_printf_float+0x2d8>)
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	f7fb f8a1 	bl	8000b3c <__aeabi_dcmpun>
 80059fa:	bb88      	cbnz	r0, 8005a60 <_printf_float+0xcc>
 80059fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a00:	4b9a      	ldr	r3, [pc, #616]	; (8005c6c <_printf_float+0x2d8>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	f7fb f87b 	bl	8000b00 <__aeabi_dcmple>
 8005a0a:	bb48      	cbnz	r0, 8005a60 <_printf_float+0xcc>
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4640      	mov	r0, r8
 8005a12:	4649      	mov	r1, r9
 8005a14:	f7fb f86a 	bl	8000aec <__aeabi_dcmplt>
 8005a18:	b110      	cbz	r0, 8005a20 <_printf_float+0x8c>
 8005a1a:	232d      	movs	r3, #45	; 0x2d
 8005a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a20:	4a93      	ldr	r2, [pc, #588]	; (8005c70 <_printf_float+0x2dc>)
 8005a22:	4b94      	ldr	r3, [pc, #592]	; (8005c74 <_printf_float+0x2e0>)
 8005a24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a28:	bf94      	ite	ls
 8005a2a:	4690      	movls	r8, r2
 8005a2c:	4698      	movhi	r8, r3
 8005a2e:	2303      	movs	r3, #3
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	f023 0304 	bic.w	r3, r3, #4
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	f04f 0900 	mov.w	r9, #0
 8005a3e:	9700      	str	r7, [sp, #0]
 8005a40:	4633      	mov	r3, r6
 8005a42:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a44:	4621      	mov	r1, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 f9da 	bl	8005e00 <_printf_common>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f040 8090 	bne.w	8005b72 <_printf_float+0x1de>
 8005a52:	f04f 30ff 	mov.w	r0, #4294967295
 8005a56:	b00d      	add	sp, #52	; 0x34
 8005a58:	ecbd 8b02 	vpop	{d8}
 8005a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fb f868 	bl	8000b3c <__aeabi_dcmpun>
 8005a6c:	b140      	cbz	r0, 8005a80 <_printf_float+0xec>
 8005a6e:	464b      	mov	r3, r9
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfbc      	itt	lt
 8005a74:	232d      	movlt	r3, #45	; 0x2d
 8005a76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a7a:	4a7f      	ldr	r2, [pc, #508]	; (8005c78 <_printf_float+0x2e4>)
 8005a7c:	4b7f      	ldr	r3, [pc, #508]	; (8005c7c <_printf_float+0x2e8>)
 8005a7e:	e7d1      	b.n	8005a24 <_printf_float+0x90>
 8005a80:	6863      	ldr	r3, [r4, #4]
 8005a82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a86:	9206      	str	r2, [sp, #24]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	d13f      	bne.n	8005b0c <_printf_float+0x178>
 8005a8c:	2306      	movs	r3, #6
 8005a8e:	6063      	str	r3, [r4, #4]
 8005a90:	9b05      	ldr	r3, [sp, #20]
 8005a92:	6861      	ldr	r1, [r4, #4]
 8005a94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9303      	str	r3, [sp, #12]
 8005a9c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aa2:	ab09      	add	r3, sp, #36	; 0x24
 8005aa4:	ec49 8b10 	vmov	d0, r8, r9
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6022      	str	r2, [r4, #0]
 8005aac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f7ff fecf 	bl	8005854 <__cvt>
 8005ab6:	9b06      	ldr	r3, [sp, #24]
 8005ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aba:	2b47      	cmp	r3, #71	; 0x47
 8005abc:	4680      	mov	r8, r0
 8005abe:	d108      	bne.n	8005ad2 <_printf_float+0x13e>
 8005ac0:	1cc8      	adds	r0, r1, #3
 8005ac2:	db02      	blt.n	8005aca <_printf_float+0x136>
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	dd41      	ble.n	8005b4e <_printf_float+0x1ba>
 8005aca:	f1ab 0302 	sub.w	r3, fp, #2
 8005ace:	fa5f fb83 	uxtb.w	fp, r3
 8005ad2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ad6:	d820      	bhi.n	8005b1a <_printf_float+0x186>
 8005ad8:	3901      	subs	r1, #1
 8005ada:	465a      	mov	r2, fp
 8005adc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ae0:	9109      	str	r1, [sp, #36]	; 0x24
 8005ae2:	f7ff ff19 	bl	8005918 <__exponent>
 8005ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae8:	1813      	adds	r3, r2, r0
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	4681      	mov	r9, r0
 8005aee:	6123      	str	r3, [r4, #16]
 8005af0:	dc02      	bgt.n	8005af8 <_printf_float+0x164>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	07d2      	lsls	r2, r2, #31
 8005af6:	d501      	bpl.n	8005afc <_printf_float+0x168>
 8005af8:	3301      	adds	r3, #1
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d09c      	beq.n	8005a3e <_printf_float+0xaa>
 8005b04:	232d      	movs	r3, #45	; 0x2d
 8005b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b0a:	e798      	b.n	8005a3e <_printf_float+0xaa>
 8005b0c:	9a06      	ldr	r2, [sp, #24]
 8005b0e:	2a47      	cmp	r2, #71	; 0x47
 8005b10:	d1be      	bne.n	8005a90 <_printf_float+0xfc>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1bc      	bne.n	8005a90 <_printf_float+0xfc>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7b9      	b.n	8005a8e <_printf_float+0xfa>
 8005b1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b1e:	d118      	bne.n	8005b52 <_printf_float+0x1be>
 8005b20:	2900      	cmp	r1, #0
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	dd0b      	ble.n	8005b3e <_printf_float+0x1aa>
 8005b26:	6121      	str	r1, [r4, #16]
 8005b28:	b913      	cbnz	r3, 8005b30 <_printf_float+0x19c>
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	07d0      	lsls	r0, r2, #31
 8005b2e:	d502      	bpl.n	8005b36 <_printf_float+0x1a2>
 8005b30:	3301      	adds	r3, #1
 8005b32:	440b      	add	r3, r1
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b38:	f04f 0900 	mov.w	r9, #0
 8005b3c:	e7de      	b.n	8005afc <_printf_float+0x168>
 8005b3e:	b913      	cbnz	r3, 8005b46 <_printf_float+0x1b2>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	07d2      	lsls	r2, r2, #31
 8005b44:	d501      	bpl.n	8005b4a <_printf_float+0x1b6>
 8005b46:	3302      	adds	r3, #2
 8005b48:	e7f4      	b.n	8005b34 <_printf_float+0x1a0>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e7f2      	b.n	8005b34 <_printf_float+0x1a0>
 8005b4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b54:	4299      	cmp	r1, r3
 8005b56:	db05      	blt.n	8005b64 <_printf_float+0x1d0>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	6121      	str	r1, [r4, #16]
 8005b5c:	07d8      	lsls	r0, r3, #31
 8005b5e:	d5ea      	bpl.n	8005b36 <_printf_float+0x1a2>
 8005b60:	1c4b      	adds	r3, r1, #1
 8005b62:	e7e7      	b.n	8005b34 <_printf_float+0x1a0>
 8005b64:	2900      	cmp	r1, #0
 8005b66:	bfd4      	ite	le
 8005b68:	f1c1 0202 	rsble	r2, r1, #2
 8005b6c:	2201      	movgt	r2, #1
 8005b6e:	4413      	add	r3, r2
 8005b70:	e7e0      	b.n	8005b34 <_printf_float+0x1a0>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	055a      	lsls	r2, r3, #21
 8005b76:	d407      	bmi.n	8005b88 <_printf_float+0x1f4>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	d12c      	bne.n	8005be0 <_printf_float+0x24c>
 8005b86:	e764      	b.n	8005a52 <_printf_float+0xbe>
 8005b88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b8c:	f240 80e0 	bls.w	8005d50 <_printf_float+0x3bc>
 8005b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	f7fa ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d034      	beq.n	8005c0a <_printf_float+0x276>
 8005ba0:	4a37      	ldr	r2, [pc, #220]	; (8005c80 <_printf_float+0x2ec>)
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af51 	beq.w	8005a52 <_printf_float+0xbe>
 8005bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	db02      	blt.n	8005bbe <_printf_float+0x22a>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	07d8      	lsls	r0, r3, #31
 8005bbc:	d510      	bpl.n	8005be0 <_printf_float+0x24c>
 8005bbe:	ee18 3a10 	vmov	r3, s16
 8005bc2:	4652      	mov	r2, sl
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	47b8      	blx	r7
 8005bca:	3001      	adds	r0, #1
 8005bcc:	f43f af41 	beq.w	8005a52 <_printf_float+0xbe>
 8005bd0:	f04f 0800 	mov.w	r8, #0
 8005bd4:	f104 091a 	add.w	r9, r4, #26
 8005bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	4543      	cmp	r3, r8
 8005bde:	dc09      	bgt.n	8005bf4 <_printf_float+0x260>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	079b      	lsls	r3, r3, #30
 8005be4:	f100 8107 	bmi.w	8005df6 <_printf_float+0x462>
 8005be8:	68e0      	ldr	r0, [r4, #12]
 8005bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bec:	4298      	cmp	r0, r3
 8005bee:	bfb8      	it	lt
 8005bf0:	4618      	movlt	r0, r3
 8005bf2:	e730      	b.n	8005a56 <_printf_float+0xc2>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	47b8      	blx	r7
 8005bfe:	3001      	adds	r0, #1
 8005c00:	f43f af27 	beq.w	8005a52 <_printf_float+0xbe>
 8005c04:	f108 0801 	add.w	r8, r8, #1
 8005c08:	e7e6      	b.n	8005bd8 <_printf_float+0x244>
 8005c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc39      	bgt.n	8005c84 <_printf_float+0x2f0>
 8005c10:	4a1b      	ldr	r2, [pc, #108]	; (8005c80 <_printf_float+0x2ec>)
 8005c12:	2301      	movs	r3, #1
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af19 	beq.w	8005a52 <_printf_float+0xbe>
 8005c20:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c24:	4313      	orrs	r3, r2
 8005c26:	d102      	bne.n	8005c2e <_printf_float+0x29a>
 8005c28:	6823      	ldr	r3, [r4, #0]
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d5d8      	bpl.n	8005be0 <_printf_float+0x24c>
 8005c2e:	ee18 3a10 	vmov	r3, s16
 8005c32:	4652      	mov	r2, sl
 8005c34:	4631      	mov	r1, r6
 8005c36:	4628      	mov	r0, r5
 8005c38:	47b8      	blx	r7
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	f43f af09 	beq.w	8005a52 <_printf_float+0xbe>
 8005c40:	f04f 0900 	mov.w	r9, #0
 8005c44:	f104 0a1a 	add.w	sl, r4, #26
 8005c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c4a:	425b      	negs	r3, r3
 8005c4c:	454b      	cmp	r3, r9
 8005c4e:	dc01      	bgt.n	8005c54 <_printf_float+0x2c0>
 8005c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c52:	e792      	b.n	8005b7a <_printf_float+0x1e6>
 8005c54:	2301      	movs	r3, #1
 8005c56:	4652      	mov	r2, sl
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f aef7 	beq.w	8005a52 <_printf_float+0xbe>
 8005c64:	f109 0901 	add.w	r9, r9, #1
 8005c68:	e7ee      	b.n	8005c48 <_printf_float+0x2b4>
 8005c6a:	bf00      	nop
 8005c6c:	7fefffff 	.word	0x7fefffff
 8005c70:	0800b094 	.word	0x0800b094
 8005c74:	0800b098 	.word	0x0800b098
 8005c78:	0800b09c 	.word	0x0800b09c
 8005c7c:	0800b0a0 	.word	0x0800b0a0
 8005c80:	0800b0a4 	.word	0x0800b0a4
 8005c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	bfa8      	it	ge
 8005c8c:	461a      	movge	r2, r3
 8005c8e:	2a00      	cmp	r2, #0
 8005c90:	4691      	mov	r9, r2
 8005c92:	dc37      	bgt.n	8005d04 <_printf_float+0x370>
 8005c94:	f04f 0b00 	mov.w	fp, #0
 8005c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c9c:	f104 021a 	add.w	r2, r4, #26
 8005ca0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	eba3 0309 	sub.w	r3, r3, r9
 8005ca8:	455b      	cmp	r3, fp
 8005caa:	dc33      	bgt.n	8005d14 <_printf_float+0x380>
 8005cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	db3b      	blt.n	8005d2c <_printf_float+0x398>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	07da      	lsls	r2, r3, #31
 8005cb8:	d438      	bmi.n	8005d2c <_printf_float+0x398>
 8005cba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cbe:	eba2 0903 	sub.w	r9, r2, r3
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	4591      	cmp	r9, r2
 8005cc8:	bfa8      	it	ge
 8005cca:	4691      	movge	r9, r2
 8005ccc:	f1b9 0f00 	cmp.w	r9, #0
 8005cd0:	dc35      	bgt.n	8005d3e <_printf_float+0x3aa>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cda:	f104 0a1a 	add.w	sl, r4, #26
 8005cde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	eba3 0309 	sub.w	r3, r3, r9
 8005ce8:	4543      	cmp	r3, r8
 8005cea:	f77f af79 	ble.w	8005be0 <_printf_float+0x24c>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f aeaa 	beq.w	8005a52 <_printf_float+0xbe>
 8005cfe:	f108 0801 	add.w	r8, r8, #1
 8005d02:	e7ec      	b.n	8005cde <_printf_float+0x34a>
 8005d04:	4613      	mov	r3, r2
 8005d06:	4631      	mov	r1, r6
 8005d08:	4642      	mov	r2, r8
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d1c0      	bne.n	8005c94 <_printf_float+0x300>
 8005d12:	e69e      	b.n	8005a52 <_printf_float+0xbe>
 8005d14:	2301      	movs	r3, #1
 8005d16:	4631      	mov	r1, r6
 8005d18:	4628      	mov	r0, r5
 8005d1a:	9205      	str	r2, [sp, #20]
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f ae97 	beq.w	8005a52 <_printf_float+0xbe>
 8005d24:	9a05      	ldr	r2, [sp, #20]
 8005d26:	f10b 0b01 	add.w	fp, fp, #1
 8005d2a:	e7b9      	b.n	8005ca0 <_printf_float+0x30c>
 8005d2c:	ee18 3a10 	vmov	r3, s16
 8005d30:	4652      	mov	r2, sl
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d1be      	bne.n	8005cba <_printf_float+0x326>
 8005d3c:	e689      	b.n	8005a52 <_printf_float+0xbe>
 8005d3e:	9a05      	ldr	r2, [sp, #20]
 8005d40:	464b      	mov	r3, r9
 8005d42:	4442      	add	r2, r8
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d1c1      	bne.n	8005cd2 <_printf_float+0x33e>
 8005d4e:	e680      	b.n	8005a52 <_printf_float+0xbe>
 8005d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d52:	2a01      	cmp	r2, #1
 8005d54:	dc01      	bgt.n	8005d5a <_printf_float+0x3c6>
 8005d56:	07db      	lsls	r3, r3, #31
 8005d58:	d53a      	bpl.n	8005dd0 <_printf_float+0x43c>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f ae74 	beq.w	8005a52 <_printf_float+0xbe>
 8005d6a:	ee18 3a10 	vmov	r3, s16
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f ae6b 	beq.w	8005a52 <_printf_float+0xbe>
 8005d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d88:	f7fa fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8c:	b9d8      	cbnz	r0, 8005dc6 <_printf_float+0x432>
 8005d8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d92:	f108 0201 	add.w	r2, r8, #1
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d10e      	bne.n	8005dbe <_printf_float+0x42a>
 8005da0:	e657      	b.n	8005a52 <_printf_float+0xbe>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f ae50 	beq.w	8005a52 <_printf_float+0xbe>
 8005db2:	f108 0801 	add.w	r8, r8, #1
 8005db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db8:	3b01      	subs	r3, #1
 8005dba:	4543      	cmp	r3, r8
 8005dbc:	dcf1      	bgt.n	8005da2 <_printf_float+0x40e>
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dc4:	e6da      	b.n	8005b7c <_printf_float+0x1e8>
 8005dc6:	f04f 0800 	mov.w	r8, #0
 8005dca:	f104 0a1a 	add.w	sl, r4, #26
 8005dce:	e7f2      	b.n	8005db6 <_printf_float+0x422>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4642      	mov	r2, r8
 8005dd4:	e7df      	b.n	8005d96 <_printf_float+0x402>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	464a      	mov	r2, r9
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	f43f ae36 	beq.w	8005a52 <_printf_float+0xbe>
 8005de6:	f108 0801 	add.w	r8, r8, #1
 8005dea:	68e3      	ldr	r3, [r4, #12]
 8005dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dee:	1a5b      	subs	r3, r3, r1
 8005df0:	4543      	cmp	r3, r8
 8005df2:	dcf0      	bgt.n	8005dd6 <_printf_float+0x442>
 8005df4:	e6f8      	b.n	8005be8 <_printf_float+0x254>
 8005df6:	f04f 0800 	mov.w	r8, #0
 8005dfa:	f104 0919 	add.w	r9, r4, #25
 8005dfe:	e7f4      	b.n	8005dea <_printf_float+0x456>

08005e00 <_printf_common>:
 8005e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	4616      	mov	r6, r2
 8005e06:	4699      	mov	r9, r3
 8005e08:	688a      	ldr	r2, [r1, #8]
 8005e0a:	690b      	ldr	r3, [r1, #16]
 8005e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bfb8      	it	lt
 8005e14:	4613      	movlt	r3, r2
 8005e16:	6033      	str	r3, [r6, #0]
 8005e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	b10a      	cbz	r2, 8005e26 <_printf_common+0x26>
 8005e22:	3301      	adds	r3, #1
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	0699      	lsls	r1, r3, #26
 8005e2a:	bf42      	ittt	mi
 8005e2c:	6833      	ldrmi	r3, [r6, #0]
 8005e2e:	3302      	addmi	r3, #2
 8005e30:	6033      	strmi	r3, [r6, #0]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	f015 0506 	ands.w	r5, r5, #6
 8005e38:	d106      	bne.n	8005e48 <_printf_common+0x48>
 8005e3a:	f104 0a19 	add.w	sl, r4, #25
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	6832      	ldr	r2, [r6, #0]
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dc26      	bgt.n	8005e96 <_printf_common+0x96>
 8005e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e4c:	1e13      	subs	r3, r2, #0
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	bf18      	it	ne
 8005e52:	2301      	movne	r3, #1
 8005e54:	0692      	lsls	r2, r2, #26
 8005e56:	d42b      	bmi.n	8005eb0 <_printf_common+0xb0>
 8005e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4638      	mov	r0, r7
 8005e60:	47c0      	blx	r8
 8005e62:	3001      	adds	r0, #1
 8005e64:	d01e      	beq.n	8005ea4 <_printf_common+0xa4>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	6922      	ldr	r2, [r4, #16]
 8005e6a:	f003 0306 	and.w	r3, r3, #6
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	bf02      	ittt	eq
 8005e72:	68e5      	ldreq	r5, [r4, #12]
 8005e74:	6833      	ldreq	r3, [r6, #0]
 8005e76:	1aed      	subeq	r5, r5, r3
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	bf0c      	ite	eq
 8005e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e80:	2500      	movne	r5, #0
 8005e82:	4293      	cmp	r3, r2
 8005e84:	bfc4      	itt	gt
 8005e86:	1a9b      	subgt	r3, r3, r2
 8005e88:	18ed      	addgt	r5, r5, r3
 8005e8a:	2600      	movs	r6, #0
 8005e8c:	341a      	adds	r4, #26
 8005e8e:	42b5      	cmp	r5, r6
 8005e90:	d11a      	bne.n	8005ec8 <_printf_common+0xc8>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e008      	b.n	8005ea8 <_printf_common+0xa8>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	47c0      	blx	r8
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d103      	bne.n	8005eac <_printf_common+0xac>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	3501      	adds	r5, #1
 8005eae:	e7c6      	b.n	8005e3e <_printf_common+0x3e>
 8005eb0:	18e1      	adds	r1, r4, r3
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	2030      	movs	r0, #48	; 0x30
 8005eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eba:	4422      	add	r2, r4
 8005ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	e7c7      	b.n	8005e58 <_printf_common+0x58>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4622      	mov	r2, r4
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4638      	mov	r0, r7
 8005ed0:	47c0      	blx	r8
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d0e6      	beq.n	8005ea4 <_printf_common+0xa4>
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7d9      	b.n	8005e8e <_printf_common+0x8e>
	...

08005edc <_printf_i>:
 8005edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	7e0f      	ldrb	r7, [r1, #24]
 8005ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ee4:	2f78      	cmp	r7, #120	; 0x78
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	4680      	mov	r8, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	469a      	mov	sl, r3
 8005eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ef2:	d807      	bhi.n	8005f04 <_printf_i+0x28>
 8005ef4:	2f62      	cmp	r7, #98	; 0x62
 8005ef6:	d80a      	bhi.n	8005f0e <_printf_i+0x32>
 8005ef8:	2f00      	cmp	r7, #0
 8005efa:	f000 80d4 	beq.w	80060a6 <_printf_i+0x1ca>
 8005efe:	2f58      	cmp	r7, #88	; 0x58
 8005f00:	f000 80c0 	beq.w	8006084 <_printf_i+0x1a8>
 8005f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f0c:	e03a      	b.n	8005f84 <_printf_i+0xa8>
 8005f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f12:	2b15      	cmp	r3, #21
 8005f14:	d8f6      	bhi.n	8005f04 <_printf_i+0x28>
 8005f16:	a101      	add	r1, pc, #4	; (adr r1, 8005f1c <_printf_i+0x40>)
 8005f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f1c:	08005f75 	.word	0x08005f75
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f05 	.word	0x08005f05
 8005f28:	08005f05 	.word	0x08005f05
 8005f2c:	08005f05 	.word	0x08005f05
 8005f30:	08005f05 	.word	0x08005f05
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	08005f05 	.word	0x08005f05
 8005f3c:	08005f05 	.word	0x08005f05
 8005f40:	08005f05 	.word	0x08005f05
 8005f44:	08005f05 	.word	0x08005f05
 8005f48:	0800608d 	.word	0x0800608d
 8005f4c:	08005fb5 	.word	0x08005fb5
 8005f50:	08006047 	.word	0x08006047
 8005f54:	08005f05 	.word	0x08005f05
 8005f58:	08005f05 	.word	0x08005f05
 8005f5c:	080060af 	.word	0x080060af
 8005f60:	08005f05 	.word	0x08005f05
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005f05 	.word	0x08005f05
 8005f6c:	08005f05 	.word	0x08005f05
 8005f70:	0800604f 	.word	0x0800604f
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	1d1a      	adds	r2, r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	602a      	str	r2, [r5, #0]
 8005f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f84:	2301      	movs	r3, #1
 8005f86:	e09f      	b.n	80060c8 <_printf_i+0x1ec>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	0607      	lsls	r7, r0, #24
 8005f8e:	f103 0104 	add.w	r1, r3, #4
 8005f92:	6029      	str	r1, [r5, #0]
 8005f94:	d501      	bpl.n	8005f9a <_printf_i+0xbe>
 8005f96:	681e      	ldr	r6, [r3, #0]
 8005f98:	e003      	b.n	8005fa2 <_printf_i+0xc6>
 8005f9a:	0646      	lsls	r6, r0, #25
 8005f9c:	d5fb      	bpl.n	8005f96 <_printf_i+0xba>
 8005f9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	da03      	bge.n	8005fae <_printf_i+0xd2>
 8005fa6:	232d      	movs	r3, #45	; 0x2d
 8005fa8:	4276      	negs	r6, r6
 8005faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fae:	485a      	ldr	r0, [pc, #360]	; (8006118 <_printf_i+0x23c>)
 8005fb0:	230a      	movs	r3, #10
 8005fb2:	e012      	b.n	8005fda <_printf_i+0xfe>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	6820      	ldr	r0, [r4, #0]
 8005fb8:	1d19      	adds	r1, r3, #4
 8005fba:	6029      	str	r1, [r5, #0]
 8005fbc:	0605      	lsls	r5, r0, #24
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0xe8>
 8005fc0:	681e      	ldr	r6, [r3, #0]
 8005fc2:	e002      	b.n	8005fca <_printf_i+0xee>
 8005fc4:	0641      	lsls	r1, r0, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0xe4>
 8005fc8:	881e      	ldrh	r6, [r3, #0]
 8005fca:	4853      	ldr	r0, [pc, #332]	; (8006118 <_printf_i+0x23c>)
 8005fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005fce:	bf0c      	ite	eq
 8005fd0:	2308      	moveq	r3, #8
 8005fd2:	230a      	movne	r3, #10
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fda:	6865      	ldr	r5, [r4, #4]
 8005fdc:	60a5      	str	r5, [r4, #8]
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	bfa2      	ittt	ge
 8005fe2:	6821      	ldrge	r1, [r4, #0]
 8005fe4:	f021 0104 	bicge.w	r1, r1, #4
 8005fe8:	6021      	strge	r1, [r4, #0]
 8005fea:	b90e      	cbnz	r6, 8005ff0 <_printf_i+0x114>
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	d04b      	beq.n	8006088 <_printf_i+0x1ac>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8005ffa:	5dc7      	ldrb	r7, [r0, r7]
 8005ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006000:	4637      	mov	r7, r6
 8006002:	42bb      	cmp	r3, r7
 8006004:	460e      	mov	r6, r1
 8006006:	d9f4      	bls.n	8005ff2 <_printf_i+0x116>
 8006008:	2b08      	cmp	r3, #8
 800600a:	d10b      	bne.n	8006024 <_printf_i+0x148>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07de      	lsls	r6, r3, #31
 8006010:	d508      	bpl.n	8006024 <_printf_i+0x148>
 8006012:	6923      	ldr	r3, [r4, #16]
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	4299      	cmp	r1, r3
 8006018:	bfde      	ittt	le
 800601a:	2330      	movle	r3, #48	; 0x30
 800601c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006024:	1b52      	subs	r2, r2, r5
 8006026:	6122      	str	r2, [r4, #16]
 8006028:	f8cd a000 	str.w	sl, [sp]
 800602c:	464b      	mov	r3, r9
 800602e:	aa03      	add	r2, sp, #12
 8006030:	4621      	mov	r1, r4
 8006032:	4640      	mov	r0, r8
 8006034:	f7ff fee4 	bl	8005e00 <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	d14a      	bne.n	80060d2 <_printf_i+0x1f6>
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	b004      	add	sp, #16
 8006042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f043 0320 	orr.w	r3, r3, #32
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	4833      	ldr	r0, [pc, #204]	; (800611c <_printf_i+0x240>)
 8006050:	2778      	movs	r7, #120	; 0x78
 8006052:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	6829      	ldr	r1, [r5, #0]
 800605a:	061f      	lsls	r7, r3, #24
 800605c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006060:	d402      	bmi.n	8006068 <_printf_i+0x18c>
 8006062:	065f      	lsls	r7, r3, #25
 8006064:	bf48      	it	mi
 8006066:	b2b6      	uxthmi	r6, r6
 8006068:	07df      	lsls	r7, r3, #31
 800606a:	bf48      	it	mi
 800606c:	f043 0320 	orrmi.w	r3, r3, #32
 8006070:	6029      	str	r1, [r5, #0]
 8006072:	bf48      	it	mi
 8006074:	6023      	strmi	r3, [r4, #0]
 8006076:	b91e      	cbnz	r6, 8006080 <_printf_i+0x1a4>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	f023 0320 	bic.w	r3, r3, #32
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	2310      	movs	r3, #16
 8006082:	e7a7      	b.n	8005fd4 <_printf_i+0xf8>
 8006084:	4824      	ldr	r0, [pc, #144]	; (8006118 <_printf_i+0x23c>)
 8006086:	e7e4      	b.n	8006052 <_printf_i+0x176>
 8006088:	4615      	mov	r5, r2
 800608a:	e7bd      	b.n	8006008 <_printf_i+0x12c>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	6826      	ldr	r6, [r4, #0]
 8006090:	6961      	ldr	r1, [r4, #20]
 8006092:	1d18      	adds	r0, r3, #4
 8006094:	6028      	str	r0, [r5, #0]
 8006096:	0635      	lsls	r5, r6, #24
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x1c4>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x1ca>
 80060a0:	0670      	lsls	r0, r6, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x1c0>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	4615      	mov	r5, r2
 80060ac:	e7bc      	b.n	8006028 <_printf_i+0x14c>
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	602a      	str	r2, [r5, #0]
 80060b4:	681d      	ldr	r5, [r3, #0]
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4628      	mov	r0, r5
 80060bc:	f7fa f890 	bl	80001e0 <memchr>
 80060c0:	b108      	cbz	r0, 80060c6 <_printf_i+0x1ea>
 80060c2:	1b40      	subs	r0, r0, r5
 80060c4:	6060      	str	r0, [r4, #4]
 80060c6:	6863      	ldr	r3, [r4, #4]
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	2300      	movs	r3, #0
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d0:	e7aa      	b.n	8006028 <_printf_i+0x14c>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	462a      	mov	r2, r5
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	47d0      	blx	sl
 80060dc:	3001      	adds	r0, #1
 80060de:	d0ad      	beq.n	800603c <_printf_i+0x160>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	d413      	bmi.n	800610e <_printf_i+0x232>
 80060e6:	68e0      	ldr	r0, [r4, #12]
 80060e8:	9b03      	ldr	r3, [sp, #12]
 80060ea:	4298      	cmp	r0, r3
 80060ec:	bfb8      	it	lt
 80060ee:	4618      	movlt	r0, r3
 80060f0:	e7a6      	b.n	8006040 <_printf_i+0x164>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4632      	mov	r2, r6
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	47d0      	blx	sl
 80060fc:	3001      	adds	r0, #1
 80060fe:	d09d      	beq.n	800603c <_printf_i+0x160>
 8006100:	3501      	adds	r5, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	9903      	ldr	r1, [sp, #12]
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	42ab      	cmp	r3, r5
 800610a:	dcf2      	bgt.n	80060f2 <_printf_i+0x216>
 800610c:	e7eb      	b.n	80060e6 <_printf_i+0x20a>
 800610e:	2500      	movs	r5, #0
 8006110:	f104 0619 	add.w	r6, r4, #25
 8006114:	e7f5      	b.n	8006102 <_printf_i+0x226>
 8006116:	bf00      	nop
 8006118:	0800b0a6 	.word	0x0800b0a6
 800611c:	0800b0b7 	.word	0x0800b0b7

08006120 <_scanf_float>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	b087      	sub	sp, #28
 8006126:	4617      	mov	r7, r2
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	688b      	ldr	r3, [r1, #8]
 800612c:	1e5a      	subs	r2, r3, #1
 800612e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006132:	bf83      	ittte	hi
 8006134:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006138:	195b      	addhi	r3, r3, r5
 800613a:	9302      	strhi	r3, [sp, #8]
 800613c:	2300      	movls	r3, #0
 800613e:	bf86      	itte	hi
 8006140:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006144:	608b      	strhi	r3, [r1, #8]
 8006146:	9302      	strls	r3, [sp, #8]
 8006148:	680b      	ldr	r3, [r1, #0]
 800614a:	468b      	mov	fp, r1
 800614c:	2500      	movs	r5, #0
 800614e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006152:	f84b 3b1c 	str.w	r3, [fp], #28
 8006156:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800615a:	4680      	mov	r8, r0
 800615c:	460c      	mov	r4, r1
 800615e:	465e      	mov	r6, fp
 8006160:	46aa      	mov	sl, r5
 8006162:	46a9      	mov	r9, r5
 8006164:	9501      	str	r5, [sp, #4]
 8006166:	68a2      	ldr	r2, [r4, #8]
 8006168:	b152      	cbz	r2, 8006180 <_scanf_float+0x60>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b4e      	cmp	r3, #78	; 0x4e
 8006170:	d864      	bhi.n	800623c <_scanf_float+0x11c>
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d83c      	bhi.n	80061f0 <_scanf_float+0xd0>
 8006176:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800617a:	b2c8      	uxtb	r0, r1
 800617c:	280e      	cmp	r0, #14
 800617e:	d93a      	bls.n	80061f6 <_scanf_float+0xd6>
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	d003      	beq.n	800618e <_scanf_float+0x6e>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006192:	f1ba 0f01 	cmp.w	sl, #1
 8006196:	f200 8113 	bhi.w	80063c0 <_scanf_float+0x2a0>
 800619a:	455e      	cmp	r6, fp
 800619c:	f200 8105 	bhi.w	80063aa <_scanf_float+0x28a>
 80061a0:	2501      	movs	r5, #1
 80061a2:	4628      	mov	r0, r5
 80061a4:	b007      	add	sp, #28
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80061ae:	2a0d      	cmp	r2, #13
 80061b0:	d8e6      	bhi.n	8006180 <_scanf_float+0x60>
 80061b2:	a101      	add	r1, pc, #4	; (adr r1, 80061b8 <_scanf_float+0x98>)
 80061b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80061b8:	080062f7 	.word	0x080062f7
 80061bc:	08006181 	.word	0x08006181
 80061c0:	08006181 	.word	0x08006181
 80061c4:	08006181 	.word	0x08006181
 80061c8:	08006357 	.word	0x08006357
 80061cc:	0800632f 	.word	0x0800632f
 80061d0:	08006181 	.word	0x08006181
 80061d4:	08006181 	.word	0x08006181
 80061d8:	08006305 	.word	0x08006305
 80061dc:	08006181 	.word	0x08006181
 80061e0:	08006181 	.word	0x08006181
 80061e4:	08006181 	.word	0x08006181
 80061e8:	08006181 	.word	0x08006181
 80061ec:	080062bd 	.word	0x080062bd
 80061f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061f4:	e7db      	b.n	80061ae <_scanf_float+0x8e>
 80061f6:	290e      	cmp	r1, #14
 80061f8:	d8c2      	bhi.n	8006180 <_scanf_float+0x60>
 80061fa:	a001      	add	r0, pc, #4	; (adr r0, 8006200 <_scanf_float+0xe0>)
 80061fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006200:	080062af 	.word	0x080062af
 8006204:	08006181 	.word	0x08006181
 8006208:	080062af 	.word	0x080062af
 800620c:	08006343 	.word	0x08006343
 8006210:	08006181 	.word	0x08006181
 8006214:	0800625d 	.word	0x0800625d
 8006218:	08006299 	.word	0x08006299
 800621c:	08006299 	.word	0x08006299
 8006220:	08006299 	.word	0x08006299
 8006224:	08006299 	.word	0x08006299
 8006228:	08006299 	.word	0x08006299
 800622c:	08006299 	.word	0x08006299
 8006230:	08006299 	.word	0x08006299
 8006234:	08006299 	.word	0x08006299
 8006238:	08006299 	.word	0x08006299
 800623c:	2b6e      	cmp	r3, #110	; 0x6e
 800623e:	d809      	bhi.n	8006254 <_scanf_float+0x134>
 8006240:	2b60      	cmp	r3, #96	; 0x60
 8006242:	d8b2      	bhi.n	80061aa <_scanf_float+0x8a>
 8006244:	2b54      	cmp	r3, #84	; 0x54
 8006246:	d077      	beq.n	8006338 <_scanf_float+0x218>
 8006248:	2b59      	cmp	r3, #89	; 0x59
 800624a:	d199      	bne.n	8006180 <_scanf_float+0x60>
 800624c:	2d07      	cmp	r5, #7
 800624e:	d197      	bne.n	8006180 <_scanf_float+0x60>
 8006250:	2508      	movs	r5, #8
 8006252:	e029      	b.n	80062a8 <_scanf_float+0x188>
 8006254:	2b74      	cmp	r3, #116	; 0x74
 8006256:	d06f      	beq.n	8006338 <_scanf_float+0x218>
 8006258:	2b79      	cmp	r3, #121	; 0x79
 800625a:	e7f6      	b.n	800624a <_scanf_float+0x12a>
 800625c:	6821      	ldr	r1, [r4, #0]
 800625e:	05c8      	lsls	r0, r1, #23
 8006260:	d51a      	bpl.n	8006298 <_scanf_float+0x178>
 8006262:	9b02      	ldr	r3, [sp, #8]
 8006264:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006268:	6021      	str	r1, [r4, #0]
 800626a:	f109 0901 	add.w	r9, r9, #1
 800626e:	b11b      	cbz	r3, 8006278 <_scanf_float+0x158>
 8006270:	3b01      	subs	r3, #1
 8006272:	3201      	adds	r2, #1
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	60a2      	str	r2, [r4, #8]
 8006278:	68a3      	ldr	r3, [r4, #8]
 800627a:	3b01      	subs	r3, #1
 800627c:	60a3      	str	r3, [r4, #8]
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	3301      	adds	r3, #1
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	f340 8084 	ble.w	8006398 <_scanf_float+0x278>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	3301      	adds	r3, #1
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	e766      	b.n	8006166 <_scanf_float+0x46>
 8006298:	eb1a 0f05 	cmn.w	sl, r5
 800629c:	f47f af70 	bne.w	8006180 <_scanf_float+0x60>
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	f806 3b01 	strb.w	r3, [r6], #1
 80062ac:	e7e4      	b.n	8006278 <_scanf_float+0x158>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	0610      	lsls	r0, r2, #24
 80062b2:	f57f af65 	bpl.w	8006180 <_scanf_float+0x60>
 80062b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062ba:	e7f4      	b.n	80062a6 <_scanf_float+0x186>
 80062bc:	f1ba 0f00 	cmp.w	sl, #0
 80062c0:	d10e      	bne.n	80062e0 <_scanf_float+0x1c0>
 80062c2:	f1b9 0f00 	cmp.w	r9, #0
 80062c6:	d10e      	bne.n	80062e6 <_scanf_float+0x1c6>
 80062c8:	6822      	ldr	r2, [r4, #0]
 80062ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062d2:	d108      	bne.n	80062e6 <_scanf_float+0x1c6>
 80062d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062d8:	6022      	str	r2, [r4, #0]
 80062da:	f04f 0a01 	mov.w	sl, #1
 80062de:	e7e3      	b.n	80062a8 <_scanf_float+0x188>
 80062e0:	f1ba 0f02 	cmp.w	sl, #2
 80062e4:	d055      	beq.n	8006392 <_scanf_float+0x272>
 80062e6:	2d01      	cmp	r5, #1
 80062e8:	d002      	beq.n	80062f0 <_scanf_float+0x1d0>
 80062ea:	2d04      	cmp	r5, #4
 80062ec:	f47f af48 	bne.w	8006180 <_scanf_float+0x60>
 80062f0:	3501      	adds	r5, #1
 80062f2:	b2ed      	uxtb	r5, r5
 80062f4:	e7d8      	b.n	80062a8 <_scanf_float+0x188>
 80062f6:	f1ba 0f01 	cmp.w	sl, #1
 80062fa:	f47f af41 	bne.w	8006180 <_scanf_float+0x60>
 80062fe:	f04f 0a02 	mov.w	sl, #2
 8006302:	e7d1      	b.n	80062a8 <_scanf_float+0x188>
 8006304:	b97d      	cbnz	r5, 8006326 <_scanf_float+0x206>
 8006306:	f1b9 0f00 	cmp.w	r9, #0
 800630a:	f47f af3c 	bne.w	8006186 <_scanf_float+0x66>
 800630e:	6822      	ldr	r2, [r4, #0]
 8006310:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006314:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006318:	f47f af39 	bne.w	800618e <_scanf_float+0x6e>
 800631c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006320:	6022      	str	r2, [r4, #0]
 8006322:	2501      	movs	r5, #1
 8006324:	e7c0      	b.n	80062a8 <_scanf_float+0x188>
 8006326:	2d03      	cmp	r5, #3
 8006328:	d0e2      	beq.n	80062f0 <_scanf_float+0x1d0>
 800632a:	2d05      	cmp	r5, #5
 800632c:	e7de      	b.n	80062ec <_scanf_float+0x1cc>
 800632e:	2d02      	cmp	r5, #2
 8006330:	f47f af26 	bne.w	8006180 <_scanf_float+0x60>
 8006334:	2503      	movs	r5, #3
 8006336:	e7b7      	b.n	80062a8 <_scanf_float+0x188>
 8006338:	2d06      	cmp	r5, #6
 800633a:	f47f af21 	bne.w	8006180 <_scanf_float+0x60>
 800633e:	2507      	movs	r5, #7
 8006340:	e7b2      	b.n	80062a8 <_scanf_float+0x188>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	0591      	lsls	r1, r2, #22
 8006346:	f57f af1b 	bpl.w	8006180 <_scanf_float+0x60>
 800634a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	f8cd 9004 	str.w	r9, [sp, #4]
 8006354:	e7a8      	b.n	80062a8 <_scanf_float+0x188>
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800635c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006360:	d006      	beq.n	8006370 <_scanf_float+0x250>
 8006362:	0550      	lsls	r0, r2, #21
 8006364:	f57f af0c 	bpl.w	8006180 <_scanf_float+0x60>
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	f43f af0f 	beq.w	800618e <_scanf_float+0x6e>
 8006370:	0591      	lsls	r1, r2, #22
 8006372:	bf58      	it	pl
 8006374:	9901      	ldrpl	r1, [sp, #4]
 8006376:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800637a:	bf58      	it	pl
 800637c:	eba9 0101 	subpl.w	r1, r9, r1
 8006380:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006384:	bf58      	it	pl
 8006386:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800638a:	6022      	str	r2, [r4, #0]
 800638c:	f04f 0900 	mov.w	r9, #0
 8006390:	e78a      	b.n	80062a8 <_scanf_float+0x188>
 8006392:	f04f 0a03 	mov.w	sl, #3
 8006396:	e787      	b.n	80062a8 <_scanf_float+0x188>
 8006398:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800639c:	4639      	mov	r1, r7
 800639e:	4640      	mov	r0, r8
 80063a0:	4798      	blx	r3
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f43f aedf 	beq.w	8006166 <_scanf_float+0x46>
 80063a8:	e6ea      	b.n	8006180 <_scanf_float+0x60>
 80063aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063b2:	463a      	mov	r2, r7
 80063b4:	4640      	mov	r0, r8
 80063b6:	4798      	blx	r3
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	e6ec      	b.n	800619a <_scanf_float+0x7a>
 80063c0:	1e6b      	subs	r3, r5, #1
 80063c2:	2b06      	cmp	r3, #6
 80063c4:	d825      	bhi.n	8006412 <_scanf_float+0x2f2>
 80063c6:	2d02      	cmp	r5, #2
 80063c8:	d836      	bhi.n	8006438 <_scanf_float+0x318>
 80063ca:	455e      	cmp	r6, fp
 80063cc:	f67f aee8 	bls.w	80061a0 <_scanf_float+0x80>
 80063d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063d8:	463a      	mov	r2, r7
 80063da:	4640      	mov	r0, r8
 80063dc:	4798      	blx	r3
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	e7f1      	b.n	80063ca <_scanf_float+0x2aa>
 80063e6:	9802      	ldr	r0, [sp, #8]
 80063e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063f0:	9002      	str	r0, [sp, #8]
 80063f2:	463a      	mov	r2, r7
 80063f4:	4640      	mov	r0, r8
 80063f6:	4798      	blx	r3
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006402:	fa5f fa8a 	uxtb.w	sl, sl
 8006406:	f1ba 0f02 	cmp.w	sl, #2
 800640a:	d1ec      	bne.n	80063e6 <_scanf_float+0x2c6>
 800640c:	3d03      	subs	r5, #3
 800640e:	b2ed      	uxtb	r5, r5
 8006410:	1b76      	subs	r6, r6, r5
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	05da      	lsls	r2, r3, #23
 8006416:	d52f      	bpl.n	8006478 <_scanf_float+0x358>
 8006418:	055b      	lsls	r3, r3, #21
 800641a:	d510      	bpl.n	800643e <_scanf_float+0x31e>
 800641c:	455e      	cmp	r6, fp
 800641e:	f67f aebf 	bls.w	80061a0 <_scanf_float+0x80>
 8006422:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800642a:	463a      	mov	r2, r7
 800642c:	4640      	mov	r0, r8
 800642e:	4798      	blx	r3
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	3b01      	subs	r3, #1
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	e7f1      	b.n	800641c <_scanf_float+0x2fc>
 8006438:	46aa      	mov	sl, r5
 800643a:	9602      	str	r6, [sp, #8]
 800643c:	e7df      	b.n	80063fe <_scanf_float+0x2de>
 800643e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	2965      	cmp	r1, #101	; 0x65
 8006446:	f103 33ff 	add.w	r3, r3, #4294967295
 800644a:	f106 35ff 	add.w	r5, r6, #4294967295
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	d00c      	beq.n	800646c <_scanf_float+0x34c>
 8006452:	2945      	cmp	r1, #69	; 0x45
 8006454:	d00a      	beq.n	800646c <_scanf_float+0x34c>
 8006456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800645a:	463a      	mov	r2, r7
 800645c:	4640      	mov	r0, r8
 800645e:	4798      	blx	r3
 8006460:	6923      	ldr	r3, [r4, #16]
 8006462:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006466:	3b01      	subs	r3, #1
 8006468:	1eb5      	subs	r5, r6, #2
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006470:	463a      	mov	r2, r7
 8006472:	4640      	mov	r0, r8
 8006474:	4798      	blx	r3
 8006476:	462e      	mov	r6, r5
 8006478:	6825      	ldr	r5, [r4, #0]
 800647a:	f015 0510 	ands.w	r5, r5, #16
 800647e:	d158      	bne.n	8006532 <_scanf_float+0x412>
 8006480:	7035      	strb	r5, [r6, #0]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648c:	d11c      	bne.n	80064c8 <_scanf_float+0x3a8>
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	454b      	cmp	r3, r9
 8006492:	eba3 0209 	sub.w	r2, r3, r9
 8006496:	d124      	bne.n	80064e2 <_scanf_float+0x3c2>
 8006498:	2200      	movs	r2, #0
 800649a:	4659      	mov	r1, fp
 800649c:	4640      	mov	r0, r8
 800649e:	f002 fc1b 	bl	8008cd8 <_strtod_r>
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	6821      	ldr	r1, [r4, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f011 0f02 	tst.w	r1, #2
 80064ac:	ec57 6b10 	vmov	r6, r7, d0
 80064b0:	f103 0204 	add.w	r2, r3, #4
 80064b4:	d020      	beq.n	80064f8 <_scanf_float+0x3d8>
 80064b6:	9903      	ldr	r1, [sp, #12]
 80064b8:	600a      	str	r2, [r1, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	e9c3 6700 	strd	r6, r7, [r3]
 80064c0:	68e3      	ldr	r3, [r4, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60e3      	str	r3, [r4, #12]
 80064c6:	e66c      	b.n	80061a2 <_scanf_float+0x82>
 80064c8:	9b04      	ldr	r3, [sp, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0e4      	beq.n	8006498 <_scanf_float+0x378>
 80064ce:	9905      	ldr	r1, [sp, #20]
 80064d0:	230a      	movs	r3, #10
 80064d2:	462a      	mov	r2, r5
 80064d4:	3101      	adds	r1, #1
 80064d6:	4640      	mov	r0, r8
 80064d8:	f002 fc86 	bl	8008de8 <_strtol_r>
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	9e05      	ldr	r6, [sp, #20]
 80064e0:	1ac2      	subs	r2, r0, r3
 80064e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064e6:	429e      	cmp	r6, r3
 80064e8:	bf28      	it	cs
 80064ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064ee:	4912      	ldr	r1, [pc, #72]	; (8006538 <_scanf_float+0x418>)
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f8d5 	bl	80066a0 <siprintf>
 80064f6:	e7cf      	b.n	8006498 <_scanf_float+0x378>
 80064f8:	f011 0f04 	tst.w	r1, #4
 80064fc:	9903      	ldr	r1, [sp, #12]
 80064fe:	600a      	str	r2, [r1, #0]
 8006500:	d1db      	bne.n	80064ba <_scanf_float+0x39a>
 8006502:	f8d3 8000 	ldr.w	r8, [r3]
 8006506:	ee10 2a10 	vmov	r2, s0
 800650a:	ee10 0a10 	vmov	r0, s0
 800650e:	463b      	mov	r3, r7
 8006510:	4639      	mov	r1, r7
 8006512:	f7fa fb13 	bl	8000b3c <__aeabi_dcmpun>
 8006516:	b128      	cbz	r0, 8006524 <_scanf_float+0x404>
 8006518:	4808      	ldr	r0, [pc, #32]	; (800653c <_scanf_float+0x41c>)
 800651a:	f000 f9a3 	bl	8006864 <nanf>
 800651e:	ed88 0a00 	vstr	s0, [r8]
 8006522:	e7cd      	b.n	80064c0 <_scanf_float+0x3a0>
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa fb66 	bl	8000bf8 <__aeabi_d2f>
 800652c:	f8c8 0000 	str.w	r0, [r8]
 8006530:	e7c6      	b.n	80064c0 <_scanf_float+0x3a0>
 8006532:	2500      	movs	r5, #0
 8006534:	e635      	b.n	80061a2 <_scanf_float+0x82>
 8006536:	bf00      	nop
 8006538:	0800b0c8 	.word	0x0800b0c8
 800653c:	0800b45d 	.word	0x0800b45d

08006540 <std>:
 8006540:	2300      	movs	r3, #0
 8006542:	b510      	push	{r4, lr}
 8006544:	4604      	mov	r4, r0
 8006546:	e9c0 3300 	strd	r3, r3, [r0]
 800654a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800654e:	6083      	str	r3, [r0, #8]
 8006550:	8181      	strh	r1, [r0, #12]
 8006552:	6643      	str	r3, [r0, #100]	; 0x64
 8006554:	81c2      	strh	r2, [r0, #14]
 8006556:	6183      	str	r3, [r0, #24]
 8006558:	4619      	mov	r1, r3
 800655a:	2208      	movs	r2, #8
 800655c:	305c      	adds	r0, #92	; 0x5c
 800655e:	f000 f902 	bl	8006766 <memset>
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <std+0x38>)
 8006564:	6263      	str	r3, [r4, #36]	; 0x24
 8006566:	4b05      	ldr	r3, [pc, #20]	; (800657c <std+0x3c>)
 8006568:	62a3      	str	r3, [r4, #40]	; 0x28
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <std+0x40>)
 800656c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <std+0x44>)
 8006570:	6224      	str	r4, [r4, #32]
 8006572:	6323      	str	r3, [r4, #48]	; 0x30
 8006574:	bd10      	pop	{r4, pc}
 8006576:	bf00      	nop
 8006578:	080066e1 	.word	0x080066e1
 800657c:	08006703 	.word	0x08006703
 8006580:	0800673b 	.word	0x0800673b
 8006584:	0800675f 	.word	0x0800675f

08006588 <stdio_exit_handler>:
 8006588:	4a02      	ldr	r2, [pc, #8]	; (8006594 <stdio_exit_handler+0xc>)
 800658a:	4903      	ldr	r1, [pc, #12]	; (8006598 <stdio_exit_handler+0x10>)
 800658c:	4803      	ldr	r0, [pc, #12]	; (800659c <stdio_exit_handler+0x14>)
 800658e:	f000 b869 	b.w	8006664 <_fwalk_sglue>
 8006592:	bf00      	nop
 8006594:	20000124 	.word	0x20000124
 8006598:	080091a9 	.word	0x080091a9
 800659c:	20000130 	.word	0x20000130

080065a0 <cleanup_stdio>:
 80065a0:	6841      	ldr	r1, [r0, #4]
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <cleanup_stdio+0x34>)
 80065a4:	4299      	cmp	r1, r3
 80065a6:	b510      	push	{r4, lr}
 80065a8:	4604      	mov	r4, r0
 80065aa:	d001      	beq.n	80065b0 <cleanup_stdio+0x10>
 80065ac:	f002 fdfc 	bl	80091a8 <_fflush_r>
 80065b0:	68a1      	ldr	r1, [r4, #8]
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <cleanup_stdio+0x38>)
 80065b4:	4299      	cmp	r1, r3
 80065b6:	d002      	beq.n	80065be <cleanup_stdio+0x1e>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f002 fdf5 	bl	80091a8 <_fflush_r>
 80065be:	68e1      	ldr	r1, [r4, #12]
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <cleanup_stdio+0x3c>)
 80065c2:	4299      	cmp	r1, r3
 80065c4:	d004      	beq.n	80065d0 <cleanup_stdio+0x30>
 80065c6:	4620      	mov	r0, r4
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f002 bdec 	b.w	80091a8 <_fflush_r>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	bf00      	nop
 80065d4:	200006ac 	.word	0x200006ac
 80065d8:	20000714 	.word	0x20000714
 80065dc:	2000077c 	.word	0x2000077c

080065e0 <global_stdio_init.part.0>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <global_stdio_init.part.0+0x30>)
 80065e4:	4c0b      	ldr	r4, [pc, #44]	; (8006614 <global_stdio_init.part.0+0x34>)
 80065e6:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <global_stdio_init.part.0+0x38>)
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	4620      	mov	r0, r4
 80065ec:	2200      	movs	r2, #0
 80065ee:	2104      	movs	r1, #4
 80065f0:	f7ff ffa6 	bl	8006540 <std>
 80065f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065f8:	2201      	movs	r2, #1
 80065fa:	2109      	movs	r1, #9
 80065fc:	f7ff ffa0 	bl	8006540 <std>
 8006600:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006604:	2202      	movs	r2, #2
 8006606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660a:	2112      	movs	r1, #18
 800660c:	f7ff bf98 	b.w	8006540 <std>
 8006610:	200007e4 	.word	0x200007e4
 8006614:	200006ac 	.word	0x200006ac
 8006618:	08006589 	.word	0x08006589

0800661c <__sfp_lock_acquire>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__sfp_lock_acquire+0x8>)
 800661e:	f000 b91f 	b.w	8006860 <__retarget_lock_acquire_recursive>
 8006622:	bf00      	nop
 8006624:	200007ed 	.word	0x200007ed

08006628 <__sfp_lock_release>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__sfp_lock_release+0x8>)
 800662a:	f000 b91a 	b.w	8006862 <__retarget_lock_release_recursive>
 800662e:	bf00      	nop
 8006630:	200007ed 	.word	0x200007ed

08006634 <__sinit>:
 8006634:	b510      	push	{r4, lr}
 8006636:	4604      	mov	r4, r0
 8006638:	f7ff fff0 	bl	800661c <__sfp_lock_acquire>
 800663c:	6a23      	ldr	r3, [r4, #32]
 800663e:	b11b      	cbz	r3, 8006648 <__sinit+0x14>
 8006640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006644:	f7ff bff0 	b.w	8006628 <__sfp_lock_release>
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <__sinit+0x28>)
 800664a:	6223      	str	r3, [r4, #32]
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <__sinit+0x2c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f5      	bne.n	8006640 <__sinit+0xc>
 8006654:	f7ff ffc4 	bl	80065e0 <global_stdio_init.part.0>
 8006658:	e7f2      	b.n	8006640 <__sinit+0xc>
 800665a:	bf00      	nop
 800665c:	080065a1 	.word	0x080065a1
 8006660:	200007e4 	.word	0x200007e4

08006664 <_fwalk_sglue>:
 8006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006668:	4607      	mov	r7, r0
 800666a:	4688      	mov	r8, r1
 800666c:	4614      	mov	r4, r2
 800666e:	2600      	movs	r6, #0
 8006670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006674:	f1b9 0901 	subs.w	r9, r9, #1
 8006678:	d505      	bpl.n	8006686 <_fwalk_sglue+0x22>
 800667a:	6824      	ldr	r4, [r4, #0]
 800667c:	2c00      	cmp	r4, #0
 800667e:	d1f7      	bne.n	8006670 <_fwalk_sglue+0xc>
 8006680:	4630      	mov	r0, r6
 8006682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006686:	89ab      	ldrh	r3, [r5, #12]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d907      	bls.n	800669c <_fwalk_sglue+0x38>
 800668c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006690:	3301      	adds	r3, #1
 8006692:	d003      	beq.n	800669c <_fwalk_sglue+0x38>
 8006694:	4629      	mov	r1, r5
 8006696:	4638      	mov	r0, r7
 8006698:	47c0      	blx	r8
 800669a:	4306      	orrs	r6, r0
 800669c:	3568      	adds	r5, #104	; 0x68
 800669e:	e7e9      	b.n	8006674 <_fwalk_sglue+0x10>

080066a0 <siprintf>:
 80066a0:	b40e      	push	{r1, r2, r3}
 80066a2:	b500      	push	{lr}
 80066a4:	b09c      	sub	sp, #112	; 0x70
 80066a6:	ab1d      	add	r3, sp, #116	; 0x74
 80066a8:	9002      	str	r0, [sp, #8]
 80066aa:	9006      	str	r0, [sp, #24]
 80066ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066b0:	4809      	ldr	r0, [pc, #36]	; (80066d8 <siprintf+0x38>)
 80066b2:	9107      	str	r1, [sp, #28]
 80066b4:	9104      	str	r1, [sp, #16]
 80066b6:	4909      	ldr	r1, [pc, #36]	; (80066dc <siprintf+0x3c>)
 80066b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066bc:	9105      	str	r1, [sp, #20]
 80066be:	6800      	ldr	r0, [r0, #0]
 80066c0:	9301      	str	r3, [sp, #4]
 80066c2:	a902      	add	r1, sp, #8
 80066c4:	f002 fbec 	bl	8008ea0 <_svfiprintf_r>
 80066c8:	9b02      	ldr	r3, [sp, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	b01c      	add	sp, #112	; 0x70
 80066d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d4:	b003      	add	sp, #12
 80066d6:	4770      	bx	lr
 80066d8:	2000017c 	.word	0x2000017c
 80066dc:	ffff0208 	.word	0xffff0208

080066e0 <__sread>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	460c      	mov	r4, r1
 80066e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e8:	f000 f86c 	bl	80067c4 <_read_r>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	bfab      	itete	ge
 80066f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066f2:	89a3      	ldrhlt	r3, [r4, #12]
 80066f4:	181b      	addge	r3, r3, r0
 80066f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066fa:	bfac      	ite	ge
 80066fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80066fe:	81a3      	strhlt	r3, [r4, #12]
 8006700:	bd10      	pop	{r4, pc}

08006702 <__swrite>:
 8006702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006706:	461f      	mov	r7, r3
 8006708:	898b      	ldrh	r3, [r1, #12]
 800670a:	05db      	lsls	r3, r3, #23
 800670c:	4605      	mov	r5, r0
 800670e:	460c      	mov	r4, r1
 8006710:	4616      	mov	r6, r2
 8006712:	d505      	bpl.n	8006720 <__swrite+0x1e>
 8006714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006718:	2302      	movs	r3, #2
 800671a:	2200      	movs	r2, #0
 800671c:	f000 f840 	bl	80067a0 <_lseek_r>
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800672a:	81a3      	strh	r3, [r4, #12]
 800672c:	4632      	mov	r2, r6
 800672e:	463b      	mov	r3, r7
 8006730:	4628      	mov	r0, r5
 8006732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006736:	f000 b857 	b.w	80067e8 <_write_r>

0800673a <__sseek>:
 800673a:	b510      	push	{r4, lr}
 800673c:	460c      	mov	r4, r1
 800673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006742:	f000 f82d 	bl	80067a0 <_lseek_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	bf15      	itete	ne
 800674c:	6560      	strne	r0, [r4, #84]	; 0x54
 800674e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006756:	81a3      	strheq	r3, [r4, #12]
 8006758:	bf18      	it	ne
 800675a:	81a3      	strhne	r3, [r4, #12]
 800675c:	bd10      	pop	{r4, pc}

0800675e <__sclose>:
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 b80d 	b.w	8006780 <_close_r>

08006766 <memset>:
 8006766:	4402      	add	r2, r0
 8006768:	4603      	mov	r3, r0
 800676a:	4293      	cmp	r3, r2
 800676c:	d100      	bne.n	8006770 <memset+0xa>
 800676e:	4770      	bx	lr
 8006770:	f803 1b01 	strb.w	r1, [r3], #1
 8006774:	e7f9      	b.n	800676a <memset+0x4>
	...

08006778 <_localeconv_r>:
 8006778:	4800      	ldr	r0, [pc, #0]	; (800677c <_localeconv_r+0x4>)
 800677a:	4770      	bx	lr
 800677c:	20000270 	.word	0x20000270

08006780 <_close_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4d06      	ldr	r5, [pc, #24]	; (800679c <_close_r+0x1c>)
 8006784:	2300      	movs	r3, #0
 8006786:	4604      	mov	r4, r0
 8006788:	4608      	mov	r0, r1
 800678a:	602b      	str	r3, [r5, #0]
 800678c:	f7fb fb89 	bl	8001ea2 <_close>
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	d102      	bne.n	800679a <_close_r+0x1a>
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	b103      	cbz	r3, 800679a <_close_r+0x1a>
 8006798:	6023      	str	r3, [r4, #0]
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	200007e8 	.word	0x200007e8

080067a0 <_lseek_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <_lseek_r+0x20>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	4608      	mov	r0, r1
 80067a8:	4611      	mov	r1, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fb fb9e 	bl	8001ef0 <_lseek>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_lseek_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_lseek_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	200007e8 	.word	0x200007e8

080067c4 <_read_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	; (80067e4 <_read_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fb fb2c 	bl	8001e30 <_read>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_read_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_read_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	200007e8 	.word	0x200007e8

080067e8 <_write_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d07      	ldr	r5, [pc, #28]	; (8006808 <_write_r+0x20>)
 80067ec:	4604      	mov	r4, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fb fb37 	bl	8001e6a <_write>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_write_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_write_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200007e8 	.word	0x200007e8

0800680c <__errno>:
 800680c:	4b01      	ldr	r3, [pc, #4]	; (8006814 <__errno+0x8>)
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2000017c 	.word	0x2000017c

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4d0d      	ldr	r5, [pc, #52]	; (8006850 <__libc_init_array+0x38>)
 800681c:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 800681e:	1b64      	subs	r4, r4, r5
 8006820:	10a4      	asrs	r4, r4, #2
 8006822:	2600      	movs	r6, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	4d0b      	ldr	r5, [pc, #44]	; (8006858 <__libc_init_array+0x40>)
 800682a:	4c0c      	ldr	r4, [pc, #48]	; (800685c <__libc_init_array+0x44>)
 800682c:	f004 fc14 	bl	800b058 <_init>
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	2600      	movs	r6, #0
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	0800b6a0 	.word	0x0800b6a0
 8006854:	0800b6a0 	.word	0x0800b6a0
 8006858:	0800b6a0 	.word	0x0800b6a0
 800685c:	0800b6a4 	.word	0x0800b6a4

08006860 <__retarget_lock_acquire_recursive>:
 8006860:	4770      	bx	lr

08006862 <__retarget_lock_release_recursive>:
 8006862:	4770      	bx	lr

08006864 <nanf>:
 8006864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800686c <nanf+0x8>
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	7fc00000 	.word	0x7fc00000

08006870 <quorem>:
 8006870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	6903      	ldr	r3, [r0, #16]
 8006876:	690c      	ldr	r4, [r1, #16]
 8006878:	42a3      	cmp	r3, r4
 800687a:	4607      	mov	r7, r0
 800687c:	db7e      	blt.n	800697c <quorem+0x10c>
 800687e:	3c01      	subs	r4, #1
 8006880:	f101 0814 	add.w	r8, r1, #20
 8006884:	f100 0514 	add.w	r5, r0, #20
 8006888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006896:	3301      	adds	r3, #1
 8006898:	429a      	cmp	r2, r3
 800689a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800689e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80068a6:	d331      	bcc.n	800690c <quorem+0x9c>
 80068a8:	f04f 0e00 	mov.w	lr, #0
 80068ac:	4640      	mov	r0, r8
 80068ae:	46ac      	mov	ip, r5
 80068b0:	46f2      	mov	sl, lr
 80068b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80068b6:	b293      	uxth	r3, r2
 80068b8:	fb06 e303 	mla	r3, r6, r3, lr
 80068bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068c0:	0c1a      	lsrs	r2, r3, #16
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ebaa 0303 	sub.w	r3, sl, r3
 80068c8:	f8dc a000 	ldr.w	sl, [ip]
 80068cc:	fa13 f38a 	uxtah	r3, r3, sl
 80068d0:	fb06 220e 	mla	r2, r6, lr, r2
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068dc:	b292      	uxth	r2, r2
 80068de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80068ea:	4581      	cmp	r9, r0
 80068ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f0:	f84c 3b04 	str.w	r3, [ip], #4
 80068f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068f8:	d2db      	bcs.n	80068b2 <quorem+0x42>
 80068fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80068fe:	b92b      	cbnz	r3, 800690c <quorem+0x9c>
 8006900:	9b01      	ldr	r3, [sp, #4]
 8006902:	3b04      	subs	r3, #4
 8006904:	429d      	cmp	r5, r3
 8006906:	461a      	mov	r2, r3
 8006908:	d32c      	bcc.n	8006964 <quorem+0xf4>
 800690a:	613c      	str	r4, [r7, #16]
 800690c:	4638      	mov	r0, r7
 800690e:	f001 f9ef 	bl	8007cf0 <__mcmp>
 8006912:	2800      	cmp	r0, #0
 8006914:	db22      	blt.n	800695c <quorem+0xec>
 8006916:	3601      	adds	r6, #1
 8006918:	4629      	mov	r1, r5
 800691a:	2000      	movs	r0, #0
 800691c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006920:	f8d1 c000 	ldr.w	ip, [r1]
 8006924:	b293      	uxth	r3, r2
 8006926:	1ac3      	subs	r3, r0, r3
 8006928:	0c12      	lsrs	r2, r2, #16
 800692a:	fa13 f38c 	uxtah	r3, r3, ip
 800692e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800693c:	45c1      	cmp	r9, r8
 800693e:	f841 3b04 	str.w	r3, [r1], #4
 8006942:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006946:	d2e9      	bcs.n	800691c <quorem+0xac>
 8006948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006950:	b922      	cbnz	r2, 800695c <quorem+0xec>
 8006952:	3b04      	subs	r3, #4
 8006954:	429d      	cmp	r5, r3
 8006956:	461a      	mov	r2, r3
 8006958:	d30a      	bcc.n	8006970 <quorem+0x100>
 800695a:	613c      	str	r4, [r7, #16]
 800695c:	4630      	mov	r0, r6
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	3b04      	subs	r3, #4
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1ce      	bne.n	800690a <quorem+0x9a>
 800696c:	3c01      	subs	r4, #1
 800696e:	e7c9      	b.n	8006904 <quorem+0x94>
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	3b04      	subs	r3, #4
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1f0      	bne.n	800695a <quorem+0xea>
 8006978:	3c01      	subs	r4, #1
 800697a:	e7eb      	b.n	8006954 <quorem+0xe4>
 800697c:	2000      	movs	r0, #0
 800697e:	e7ee      	b.n	800695e <quorem+0xee>

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b04 	vpush	{d8-d9}
 8006988:	69c5      	ldr	r5, [r0, #28]
 800698a:	b093      	sub	sp, #76	; 0x4c
 800698c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006990:	ec57 6b10 	vmov	r6, r7, d0
 8006994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006998:	9107      	str	r1, [sp, #28]
 800699a:	4604      	mov	r4, r0
 800699c:	920a      	str	r2, [sp, #40]	; 0x28
 800699e:	930d      	str	r3, [sp, #52]	; 0x34
 80069a0:	b975      	cbnz	r5, 80069c0 <_dtoa_r+0x40>
 80069a2:	2010      	movs	r0, #16
 80069a4:	f000 fe2a 	bl	80075fc <malloc>
 80069a8:	4602      	mov	r2, r0
 80069aa:	61e0      	str	r0, [r4, #28]
 80069ac:	b920      	cbnz	r0, 80069b8 <_dtoa_r+0x38>
 80069ae:	4bae      	ldr	r3, [pc, #696]	; (8006c68 <_dtoa_r+0x2e8>)
 80069b0:	21ef      	movs	r1, #239	; 0xef
 80069b2:	48ae      	ldr	r0, [pc, #696]	; (8006c6c <_dtoa_r+0x2ec>)
 80069b4:	f002 fc74 	bl	80092a0 <__assert_func>
 80069b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069bc:	6005      	str	r5, [r0, #0]
 80069be:	60c5      	str	r5, [r0, #12]
 80069c0:	69e3      	ldr	r3, [r4, #28]
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	b151      	cbz	r1, 80069dc <_dtoa_r+0x5c>
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	604a      	str	r2, [r1, #4]
 80069ca:	2301      	movs	r3, #1
 80069cc:	4093      	lsls	r3, r2
 80069ce:	608b      	str	r3, [r1, #8]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 ff07 	bl	80077e4 <_Bfree>
 80069d6:	69e3      	ldr	r3, [r4, #28]
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	1e3b      	subs	r3, r7, #0
 80069de:	bfbb      	ittet	lt
 80069e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	9303      	strlt	r3, [sp, #12]
 80069e6:	2300      	movge	r3, #0
 80069e8:	2201      	movlt	r2, #1
 80069ea:	bfac      	ite	ge
 80069ec:	f8c8 3000 	strge.w	r3, [r8]
 80069f0:	f8c8 2000 	strlt.w	r2, [r8]
 80069f4:	4b9e      	ldr	r3, [pc, #632]	; (8006c70 <_dtoa_r+0x2f0>)
 80069f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80069fa:	ea33 0308 	bics.w	r3, r3, r8
 80069fe:	d11b      	bne.n	8006a38 <_dtoa_r+0xb8>
 8006a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a0c:	4333      	orrs	r3, r6
 8006a0e:	f000 8593 	beq.w	8007538 <_dtoa_r+0xbb8>
 8006a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a14:	b963      	cbnz	r3, 8006a30 <_dtoa_r+0xb0>
 8006a16:	4b97      	ldr	r3, [pc, #604]	; (8006c74 <_dtoa_r+0x2f4>)
 8006a18:	e027      	b.n	8006a6a <_dtoa_r+0xea>
 8006a1a:	4b97      	ldr	r3, [pc, #604]	; (8006c78 <_dtoa_r+0x2f8>)
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	9800      	ldr	r0, [sp, #0]
 8006a26:	b013      	add	sp, #76	; 0x4c
 8006a28:	ecbd 8b04 	vpop	{d8-d9}
 8006a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	4b90      	ldr	r3, [pc, #576]	; (8006c74 <_dtoa_r+0x2f4>)
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	3303      	adds	r3, #3
 8006a36:	e7f3      	b.n	8006a20 <_dtoa_r+0xa0>
 8006a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	ec51 0b17 	vmov	r0, r1, d7
 8006a42:	eeb0 8a47 	vmov.f32	s16, s14
 8006a46:	eef0 8a67 	vmov.f32	s17, s15
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f7fa f844 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a50:	4681      	mov	r9, r0
 8006a52:	b160      	cbz	r0, 8006a6e <_dtoa_r+0xee>
 8006a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a56:	2301      	movs	r3, #1
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8568 	beq.w	8007532 <_dtoa_r+0xbb2>
 8006a62:	4b86      	ldr	r3, [pc, #536]	; (8006c7c <_dtoa_r+0x2fc>)
 8006a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	e7da      	b.n	8006a24 <_dtoa_r+0xa4>
 8006a6e:	aa10      	add	r2, sp, #64	; 0x40
 8006a70:	a911      	add	r1, sp, #68	; 0x44
 8006a72:	4620      	mov	r0, r4
 8006a74:	eeb0 0a48 	vmov.f32	s0, s16
 8006a78:	eef0 0a68 	vmov.f32	s1, s17
 8006a7c:	f001 fa4e 	bl	8007f1c <__d2b>
 8006a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a84:	4682      	mov	sl, r0
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	d07f      	beq.n	8006b8a <_dtoa_r+0x20a>
 8006a8a:	ee18 3a90 	vmov	r3, s17
 8006a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a96:	ec51 0b18 	vmov	r0, r1, d8
 8006a9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006aa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4b75      	ldr	r3, [pc, #468]	; (8006c80 <_dtoa_r+0x300>)
 8006aac:	f7f9 fbf4 	bl	8000298 <__aeabi_dsub>
 8006ab0:	a367      	add	r3, pc, #412	; (adr r3, 8006c50 <_dtoa_r+0x2d0>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	a367      	add	r3, pc, #412	; (adr r3, 8006c58 <_dtoa_r+0x2d8>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fbec 	bl	800029c <__adddf3>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	460f      	mov	r7, r1
 8006aca:	f7f9 fd33 	bl	8000534 <__aeabi_i2d>
 8006ace:	a364      	add	r3, pc, #400	; (adr r3, 8006c60 <_dtoa_r+0x2e0>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fd98 	bl	8000608 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7f9 fbdc 	bl	800029c <__adddf3>
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	f7fa f83e 	bl	8000b68 <__aeabi_d2iz>
 8006aec:	2200      	movs	r2, #0
 8006aee:	4683      	mov	fp, r0
 8006af0:	2300      	movs	r3, #0
 8006af2:	4630      	mov	r0, r6
 8006af4:	4639      	mov	r1, r7
 8006af6:	f7f9 fff9 	bl	8000aec <__aeabi_dcmplt>
 8006afa:	b148      	cbz	r0, 8006b10 <_dtoa_r+0x190>
 8006afc:	4658      	mov	r0, fp
 8006afe:	f7f9 fd19 	bl	8000534 <__aeabi_i2d>
 8006b02:	4632      	mov	r2, r6
 8006b04:	463b      	mov	r3, r7
 8006b06:	f7f9 ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b0a:	b908      	cbnz	r0, 8006b10 <_dtoa_r+0x190>
 8006b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b10:	f1bb 0f16 	cmp.w	fp, #22
 8006b14:	d857      	bhi.n	8006bc6 <_dtoa_r+0x246>
 8006b16:	4b5b      	ldr	r3, [pc, #364]	; (8006c84 <_dtoa_r+0x304>)
 8006b18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	ec51 0b18 	vmov	r0, r1, d8
 8006b24:	f7f9 ffe2 	bl	8000aec <__aeabi_dcmplt>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d04e      	beq.n	8006bca <_dtoa_r+0x24a>
 8006b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b30:	2300      	movs	r3, #0
 8006b32:	930c      	str	r3, [sp, #48]	; 0x30
 8006b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b36:	1b5b      	subs	r3, r3, r5
 8006b38:	1e5a      	subs	r2, r3, #1
 8006b3a:	bf45      	ittet	mi
 8006b3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b40:	9305      	strmi	r3, [sp, #20]
 8006b42:	2300      	movpl	r3, #0
 8006b44:	2300      	movmi	r3, #0
 8006b46:	9206      	str	r2, [sp, #24]
 8006b48:	bf54      	ite	pl
 8006b4a:	9305      	strpl	r3, [sp, #20]
 8006b4c:	9306      	strmi	r3, [sp, #24]
 8006b4e:	f1bb 0f00 	cmp.w	fp, #0
 8006b52:	db3c      	blt.n	8006bce <_dtoa_r+0x24e>
 8006b54:	9b06      	ldr	r3, [sp, #24]
 8006b56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b5a:	445b      	add	r3, fp
 8006b5c:	9306      	str	r3, [sp, #24]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	9b07      	ldr	r3, [sp, #28]
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d868      	bhi.n	8006c3a <_dtoa_r+0x2ba>
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	bfc4      	itt	gt
 8006b6c:	3b04      	subgt	r3, #4
 8006b6e:	9307      	strgt	r3, [sp, #28]
 8006b70:	9b07      	ldr	r3, [sp, #28]
 8006b72:	f1a3 0302 	sub.w	r3, r3, #2
 8006b76:	bfcc      	ite	gt
 8006b78:	2500      	movgt	r5, #0
 8006b7a:	2501      	movle	r5, #1
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	f200 8085 	bhi.w	8006c8c <_dtoa_r+0x30c>
 8006b82:	e8df f003 	tbb	[pc, r3]
 8006b86:	3b2e      	.short	0x3b2e
 8006b88:	5839      	.short	0x5839
 8006b8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b8e:	441d      	add	r5, r3
 8006b90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	bfc1      	itttt	gt
 8006b98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ba0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006ba4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006ba8:	bfd6      	itet	le
 8006baa:	f1c3 0320 	rsble	r3, r3, #32
 8006bae:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bb2:	fa06 f003 	lslle.w	r0, r6, r3
 8006bb6:	f7f9 fcad 	bl	8000514 <__aeabi_ui2d>
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bc0:	3d01      	subs	r5, #1
 8006bc2:	920e      	str	r2, [sp, #56]	; 0x38
 8006bc4:	e76f      	b.n	8006aa6 <_dtoa_r+0x126>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e7b3      	b.n	8006b32 <_dtoa_r+0x1b2>
 8006bca:	900c      	str	r0, [sp, #48]	; 0x30
 8006bcc:	e7b2      	b.n	8006b34 <_dtoa_r+0x1b4>
 8006bce:	9b05      	ldr	r3, [sp, #20]
 8006bd0:	eba3 030b 	sub.w	r3, r3, fp
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	f1cb 0300 	rsb	r3, fp, #0
 8006bda:	9308      	str	r3, [sp, #32]
 8006bdc:	2300      	movs	r3, #0
 8006bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be0:	e7bf      	b.n	8006b62 <_dtoa_r+0x1e2>
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	; 0x24
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dc52      	bgt.n	8006c92 <_dtoa_r+0x312>
 8006bec:	2301      	movs	r3, #1
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	920a      	str	r2, [sp, #40]	; 0x28
 8006bf6:	e00b      	b.n	8006c10 <_dtoa_r+0x290>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e7f3      	b.n	8006be4 <_dtoa_r+0x264>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	445b      	add	r3, fp
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	3301      	adds	r3, #1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	bfb8      	it	lt
 8006c0e:	2301      	movlt	r3, #1
 8006c10:	69e0      	ldr	r0, [r4, #28]
 8006c12:	2100      	movs	r1, #0
 8006c14:	2204      	movs	r2, #4
 8006c16:	f102 0614 	add.w	r6, r2, #20
 8006c1a:	429e      	cmp	r6, r3
 8006c1c:	d93d      	bls.n	8006c9a <_dtoa_r+0x31a>
 8006c1e:	6041      	str	r1, [r0, #4]
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fd9f 	bl	8007764 <_Balloc>
 8006c26:	9000      	str	r0, [sp, #0]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d139      	bne.n	8006ca0 <_dtoa_r+0x320>
 8006c2c:	4b16      	ldr	r3, [pc, #88]	; (8006c88 <_dtoa_r+0x308>)
 8006c2e:	4602      	mov	r2, r0
 8006c30:	f240 11af 	movw	r1, #431	; 0x1af
 8006c34:	e6bd      	b.n	80069b2 <_dtoa_r+0x32>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e7e1      	b.n	8006bfe <_dtoa_r+0x27e>
 8006c3a:	2501      	movs	r5, #1
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	9509      	str	r5, [sp, #36]	; 0x24
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2312      	movs	r3, #18
 8006c4e:	e7d1      	b.n	8006bf4 <_dtoa_r+0x274>
 8006c50:	636f4361 	.word	0x636f4361
 8006c54:	3fd287a7 	.word	0x3fd287a7
 8006c58:	8b60c8b3 	.word	0x8b60c8b3
 8006c5c:	3fc68a28 	.word	0x3fc68a28
 8006c60:	509f79fb 	.word	0x509f79fb
 8006c64:	3fd34413 	.word	0x3fd34413
 8006c68:	0800b0da 	.word	0x0800b0da
 8006c6c:	0800b0f1 	.word	0x0800b0f1
 8006c70:	7ff00000 	.word	0x7ff00000
 8006c74:	0800b0d6 	.word	0x0800b0d6
 8006c78:	0800b0cd 	.word	0x0800b0cd
 8006c7c:	0800b0a5 	.word	0x0800b0a5
 8006c80:	3ff80000 	.word	0x3ff80000
 8006c84:	0800b1e0 	.word	0x0800b1e0
 8006c88:	0800b149 	.word	0x0800b149
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c90:	e7d7      	b.n	8006c42 <_dtoa_r+0x2c2>
 8006c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	9304      	str	r3, [sp, #16]
 8006c98:	e7ba      	b.n	8006c10 <_dtoa_r+0x290>
 8006c9a:	3101      	adds	r1, #1
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7ba      	b.n	8006c16 <_dtoa_r+0x296>
 8006ca0:	69e3      	ldr	r3, [r4, #28]
 8006ca2:	9a00      	ldr	r2, [sp, #0]
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	2b0e      	cmp	r3, #14
 8006caa:	f200 80a8 	bhi.w	8006dfe <_dtoa_r+0x47e>
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	f000 80a5 	beq.w	8006dfe <_dtoa_r+0x47e>
 8006cb4:	f1bb 0f00 	cmp.w	fp, #0
 8006cb8:	dd38      	ble.n	8006d2c <_dtoa_r+0x3ac>
 8006cba:	4bc0      	ldr	r3, [pc, #768]	; (8006fbc <_dtoa_r+0x63c>)
 8006cbc:	f00b 020f 	and.w	r2, fp, #15
 8006cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006cc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006ccc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006cd0:	d019      	beq.n	8006d06 <_dtoa_r+0x386>
 8006cd2:	4bbb      	ldr	r3, [pc, #748]	; (8006fc0 <_dtoa_r+0x640>)
 8006cd4:	ec51 0b18 	vmov	r0, r1, d8
 8006cd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cdc:	f7f9 fdbe 	bl	800085c <__aeabi_ddiv>
 8006ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce4:	f008 080f 	and.w	r8, r8, #15
 8006ce8:	2503      	movs	r5, #3
 8006cea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006fc0 <_dtoa_r+0x640>
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	d10a      	bne.n	8006d0a <_dtoa_r+0x38a>
 8006cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf8:	4632      	mov	r2, r6
 8006cfa:	463b      	mov	r3, r7
 8006cfc:	f7f9 fdae 	bl	800085c <__aeabi_ddiv>
 8006d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d04:	e02b      	b.n	8006d5e <_dtoa_r+0x3de>
 8006d06:	2502      	movs	r5, #2
 8006d08:	e7ef      	b.n	8006cea <_dtoa_r+0x36a>
 8006d0a:	f018 0f01 	tst.w	r8, #1
 8006d0e:	d008      	beq.n	8006d22 <_dtoa_r+0x3a2>
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d18:	f7f9 fc76 	bl	8000608 <__aeabi_dmul>
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	4606      	mov	r6, r0
 8006d20:	460f      	mov	r7, r1
 8006d22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d26:	f109 0908 	add.w	r9, r9, #8
 8006d2a:	e7e0      	b.n	8006cee <_dtoa_r+0x36e>
 8006d2c:	f000 809f 	beq.w	8006e6e <_dtoa_r+0x4ee>
 8006d30:	f1cb 0600 	rsb	r6, fp, #0
 8006d34:	4ba1      	ldr	r3, [pc, #644]	; (8006fbc <_dtoa_r+0x63c>)
 8006d36:	4fa2      	ldr	r7, [pc, #648]	; (8006fc0 <_dtoa_r+0x640>)
 8006d38:	f006 020f 	and.w	r2, r6, #15
 8006d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	ec51 0b18 	vmov	r0, r1, d8
 8006d48:	f7f9 fc5e 	bl	8000608 <__aeabi_dmul>
 8006d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d50:	1136      	asrs	r6, r6, #4
 8006d52:	2300      	movs	r3, #0
 8006d54:	2502      	movs	r5, #2
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	d17e      	bne.n	8006e58 <_dtoa_r+0x4d8>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1d0      	bne.n	8006d00 <_dtoa_r+0x380>
 8006d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8084 	beq.w	8006e72 <_dtoa_r+0x4f2>
 8006d6a:	4b96      	ldr	r3, [pc, #600]	; (8006fc4 <_dtoa_r+0x644>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 febb 	bl	8000aec <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d07b      	beq.n	8006e72 <_dtoa_r+0x4f2>
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d078      	beq.n	8006e72 <_dtoa_r+0x4f2>
 8006d80:	9b01      	ldr	r3, [sp, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd39      	ble.n	8006dfa <_dtoa_r+0x47a>
 8006d86:	4b90      	ldr	r3, [pc, #576]	; (8006fc8 <_dtoa_r+0x648>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	f7f9 fc3b 	bl	8000608 <__aeabi_dmul>
 8006d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d96:	9e01      	ldr	r6, [sp, #4]
 8006d98:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7f9 fbc6 	bl	8000534 <__aeabi_i2d>
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	f7f9 fc2c 	bl	8000608 <__aeabi_dmul>
 8006db0:	4b86      	ldr	r3, [pc, #536]	; (8006fcc <_dtoa_r+0x64c>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	f7f9 fa72 	bl	800029c <__adddf3>
 8006db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc0:	9303      	str	r3, [sp, #12]
 8006dc2:	2e00      	cmp	r6, #0
 8006dc4:	d158      	bne.n	8006e78 <_dtoa_r+0x4f8>
 8006dc6:	4b82      	ldr	r3, [pc, #520]	; (8006fd0 <_dtoa_r+0x650>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	f7f9 fa63 	bl	8000298 <__aeabi_dsub>
 8006dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	4689      	mov	r9, r1
 8006dda:	f7f9 fea5 	bl	8000b28 <__aeabi_dcmpgt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f040 8296 	bne.w	8007310 <_dtoa_r+0x990>
 8006de4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006de8:	4640      	mov	r0, r8
 8006dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 fe7c 	bl	8000aec <__aeabi_dcmplt>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f040 8289 	bne.w	800730c <_dtoa_r+0x98c>
 8006dfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f2c0 814e 	blt.w	80070a2 <_dtoa_r+0x722>
 8006e06:	f1bb 0f0e 	cmp.w	fp, #14
 8006e0a:	f300 814a 	bgt.w	80070a2 <_dtoa_r+0x722>
 8006e0e:	4b6b      	ldr	r3, [pc, #428]	; (8006fbc <_dtoa_r+0x63c>)
 8006e10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f280 80dc 	bge.w	8006fd8 <_dtoa_r+0x658>
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f300 80d8 	bgt.w	8006fd8 <_dtoa_r+0x658>
 8006e28:	f040 826f 	bne.w	800730a <_dtoa_r+0x98a>
 8006e2c:	4b68      	ldr	r3, [pc, #416]	; (8006fd0 <_dtoa_r+0x650>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4640      	mov	r0, r8
 8006e32:	4649      	mov	r1, r9
 8006e34:	f7f9 fbe8 	bl	8000608 <__aeabi_dmul>
 8006e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e3c:	f7f9 fe6a 	bl	8000b14 <__aeabi_dcmpge>
 8006e40:	9e04      	ldr	r6, [sp, #16]
 8006e42:	4637      	mov	r7, r6
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f040 8245 	bne.w	80072d4 <_dtoa_r+0x954>
 8006e4a:	9d00      	ldr	r5, [sp, #0]
 8006e4c:	2331      	movs	r3, #49	; 0x31
 8006e4e:	f805 3b01 	strb.w	r3, [r5], #1
 8006e52:	f10b 0b01 	add.w	fp, fp, #1
 8006e56:	e241      	b.n	80072dc <_dtoa_r+0x95c>
 8006e58:	07f2      	lsls	r2, r6, #31
 8006e5a:	d505      	bpl.n	8006e68 <_dtoa_r+0x4e8>
 8006e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e60:	f7f9 fbd2 	bl	8000608 <__aeabi_dmul>
 8006e64:	3501      	adds	r5, #1
 8006e66:	2301      	movs	r3, #1
 8006e68:	1076      	asrs	r6, r6, #1
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	e773      	b.n	8006d56 <_dtoa_r+0x3d6>
 8006e6e:	2502      	movs	r5, #2
 8006e70:	e775      	b.n	8006d5e <_dtoa_r+0x3de>
 8006e72:	9e04      	ldr	r6, [sp, #16]
 8006e74:	465f      	mov	r7, fp
 8006e76:	e792      	b.n	8006d9e <_dtoa_r+0x41e>
 8006e78:	9900      	ldr	r1, [sp, #0]
 8006e7a:	4b50      	ldr	r3, [pc, #320]	; (8006fbc <_dtoa_r+0x63c>)
 8006e7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e80:	4431      	add	r1, r6
 8006e82:	9102      	str	r1, [sp, #8]
 8006e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e86:	eeb0 9a47 	vmov.f32	s18, s14
 8006e8a:	eef0 9a67 	vmov.f32	s19, s15
 8006e8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e96:	2900      	cmp	r1, #0
 8006e98:	d044      	beq.n	8006f24 <_dtoa_r+0x5a4>
 8006e9a:	494e      	ldr	r1, [pc, #312]	; (8006fd4 <_dtoa_r+0x654>)
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f7f9 fcdd 	bl	800085c <__aeabi_ddiv>
 8006ea2:	ec53 2b19 	vmov	r2, r3, d9
 8006ea6:	f7f9 f9f7 	bl	8000298 <__aeabi_dsub>
 8006eaa:	9d00      	ldr	r5, [sp, #0]
 8006eac:	ec41 0b19 	vmov	d9, r0, r1
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	f7f9 fe58 	bl	8000b68 <__aeabi_d2iz>
 8006eb8:	4606      	mov	r6, r0
 8006eba:	f7f9 fb3b 	bl	8000534 <__aeabi_i2d>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	f7f9 f9e7 	bl	8000298 <__aeabi_dsub>
 8006eca:	3630      	adds	r6, #48	; 0x30
 8006ecc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ed0:	ec53 2b19 	vmov	r2, r3, d9
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	f7f9 fe08 	bl	8000aec <__aeabi_dcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d164      	bne.n	8006faa <_dtoa_r+0x62a>
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	4937      	ldr	r1, [pc, #220]	; (8006fc4 <_dtoa_r+0x644>)
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f7f9 f9d6 	bl	8000298 <__aeabi_dsub>
 8006eec:	ec53 2b19 	vmov	r2, r3, d9
 8006ef0:	f7f9 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f040 80b6 	bne.w	8007066 <_dtoa_r+0x6e6>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	429d      	cmp	r5, r3
 8006efe:	f43f af7c 	beq.w	8006dfa <_dtoa_r+0x47a>
 8006f02:	4b31      	ldr	r3, [pc, #196]	; (8006fc8 <_dtoa_r+0x648>)
 8006f04:	ec51 0b19 	vmov	r0, r1, d9
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f7f9 fb7d 	bl	8000608 <__aeabi_dmul>
 8006f0e:	4b2e      	ldr	r3, [pc, #184]	; (8006fc8 <_dtoa_r+0x648>)
 8006f10:	ec41 0b19 	vmov	d9, r0, r1
 8006f14:	2200      	movs	r2, #0
 8006f16:	4640      	mov	r0, r8
 8006f18:	4649      	mov	r1, r9
 8006f1a:	f7f9 fb75 	bl	8000608 <__aeabi_dmul>
 8006f1e:	4680      	mov	r8, r0
 8006f20:	4689      	mov	r9, r1
 8006f22:	e7c5      	b.n	8006eb0 <_dtoa_r+0x530>
 8006f24:	ec51 0b17 	vmov	r0, r1, d7
 8006f28:	f7f9 fb6e 	bl	8000608 <__aeabi_dmul>
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	9d00      	ldr	r5, [sp, #0]
 8006f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f32:	ec41 0b19 	vmov	d9, r0, r1
 8006f36:	4649      	mov	r1, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	f7f9 fe15 	bl	8000b68 <__aeabi_d2iz>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	f7f9 faf8 	bl	8000534 <__aeabi_i2d>
 8006f44:	3630      	adds	r6, #48	; 0x30
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	f7f9 f9a3 	bl	8000298 <__aeabi_dsub>
 8006f52:	f805 6b01 	strb.w	r6, [r5], #1
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	429d      	cmp	r5, r3
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	d124      	bne.n	8006fae <_dtoa_r+0x62e>
 8006f64:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <_dtoa_r+0x654>)
 8006f66:	ec51 0b19 	vmov	r0, r1, d9
 8006f6a:	f7f9 f997 	bl	800029c <__adddf3>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 fdd7 	bl	8000b28 <__aeabi_dcmpgt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d173      	bne.n	8007066 <_dtoa_r+0x6e6>
 8006f7e:	ec53 2b19 	vmov	r2, r3, d9
 8006f82:	4914      	ldr	r1, [pc, #80]	; (8006fd4 <_dtoa_r+0x654>)
 8006f84:	2000      	movs	r0, #0
 8006f86:	f7f9 f987 	bl	8000298 <__aeabi_dsub>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 fdab 	bl	8000aec <__aeabi_dcmplt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f af2f 	beq.w	8006dfa <_dtoa_r+0x47a>
 8006f9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f9e:	1e6b      	subs	r3, r5, #1
 8006fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d0f8      	beq.n	8006f9c <_dtoa_r+0x61c>
 8006faa:	46bb      	mov	fp, r7
 8006fac:	e04a      	b.n	8007044 <_dtoa_r+0x6c4>
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <_dtoa_r+0x648>)
 8006fb0:	f7f9 fb2a 	bl	8000608 <__aeabi_dmul>
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4689      	mov	r9, r1
 8006fb8:	e7bd      	b.n	8006f36 <_dtoa_r+0x5b6>
 8006fba:	bf00      	nop
 8006fbc:	0800b1e0 	.word	0x0800b1e0
 8006fc0:	0800b1b8 	.word	0x0800b1b8
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	40240000 	.word	0x40240000
 8006fcc:	401c0000 	.word	0x401c0000
 8006fd0:	40140000 	.word	0x40140000
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fdc:	9d00      	ldr	r5, [sp, #0]
 8006fde:	4642      	mov	r2, r8
 8006fe0:	464b      	mov	r3, r9
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	f7f9 fc39 	bl	800085c <__aeabi_ddiv>
 8006fea:	f7f9 fdbd 	bl	8000b68 <__aeabi_d2iz>
 8006fee:	9001      	str	r0, [sp, #4]
 8006ff0:	f7f9 faa0 	bl	8000534 <__aeabi_i2d>
 8006ff4:	4642      	mov	r2, r8
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 f948 	bl	8000298 <__aeabi_dsub>
 8007008:	9e01      	ldr	r6, [sp, #4]
 800700a:	9f04      	ldr	r7, [sp, #16]
 800700c:	3630      	adds	r6, #48	; 0x30
 800700e:	f805 6b01 	strb.w	r6, [r5], #1
 8007012:	9e00      	ldr	r6, [sp, #0]
 8007014:	1bae      	subs	r6, r5, r6
 8007016:	42b7      	cmp	r7, r6
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	d134      	bne.n	8007088 <_dtoa_r+0x708>
 800701e:	f7f9 f93d 	bl	800029c <__adddf3>
 8007022:	4642      	mov	r2, r8
 8007024:	464b      	mov	r3, r9
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fd7d 	bl	8000b28 <__aeabi_dcmpgt>
 800702e:	b9c8      	cbnz	r0, 8007064 <_dtoa_r+0x6e4>
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	f7f9 fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800703c:	b110      	cbz	r0, 8007044 <_dtoa_r+0x6c4>
 800703e:	9b01      	ldr	r3, [sp, #4]
 8007040:	07db      	lsls	r3, r3, #31
 8007042:	d40f      	bmi.n	8007064 <_dtoa_r+0x6e4>
 8007044:	4651      	mov	r1, sl
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fbcc 	bl	80077e4 <_Bfree>
 800704c:	2300      	movs	r3, #0
 800704e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007050:	702b      	strb	r3, [r5, #0]
 8007052:	f10b 0301 	add.w	r3, fp, #1
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705a:	2b00      	cmp	r3, #0
 800705c:	f43f ace2 	beq.w	8006a24 <_dtoa_r+0xa4>
 8007060:	601d      	str	r5, [r3, #0]
 8007062:	e4df      	b.n	8006a24 <_dtoa_r+0xa4>
 8007064:	465f      	mov	r7, fp
 8007066:	462b      	mov	r3, r5
 8007068:	461d      	mov	r5, r3
 800706a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800706e:	2a39      	cmp	r2, #57	; 0x39
 8007070:	d106      	bne.n	8007080 <_dtoa_r+0x700>
 8007072:	9a00      	ldr	r2, [sp, #0]
 8007074:	429a      	cmp	r2, r3
 8007076:	d1f7      	bne.n	8007068 <_dtoa_r+0x6e8>
 8007078:	9900      	ldr	r1, [sp, #0]
 800707a:	2230      	movs	r2, #48	; 0x30
 800707c:	3701      	adds	r7, #1
 800707e:	700a      	strb	r2, [r1, #0]
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	3201      	adds	r2, #1
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	e790      	b.n	8006faa <_dtoa_r+0x62a>
 8007088:	4ba3      	ldr	r3, [pc, #652]	; (8007318 <_dtoa_r+0x998>)
 800708a:	2200      	movs	r2, #0
 800708c:	f7f9 fabc 	bl	8000608 <__aeabi_dmul>
 8007090:	2200      	movs	r2, #0
 8007092:	2300      	movs	r3, #0
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	f7f9 fd1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800709c:	2800      	cmp	r0, #0
 800709e:	d09e      	beq.n	8006fde <_dtoa_r+0x65e>
 80070a0:	e7d0      	b.n	8007044 <_dtoa_r+0x6c4>
 80070a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a4:	2a00      	cmp	r2, #0
 80070a6:	f000 80ca 	beq.w	800723e <_dtoa_r+0x8be>
 80070aa:	9a07      	ldr	r2, [sp, #28]
 80070ac:	2a01      	cmp	r2, #1
 80070ae:	f300 80ad 	bgt.w	800720c <_dtoa_r+0x88c>
 80070b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	f000 80a5 	beq.w	8007204 <_dtoa_r+0x884>
 80070ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070be:	9e08      	ldr	r6, [sp, #32]
 80070c0:	9d05      	ldr	r5, [sp, #20]
 80070c2:	9a05      	ldr	r2, [sp, #20]
 80070c4:	441a      	add	r2, r3
 80070c6:	9205      	str	r2, [sp, #20]
 80070c8:	9a06      	ldr	r2, [sp, #24]
 80070ca:	2101      	movs	r1, #1
 80070cc:	441a      	add	r2, r3
 80070ce:	4620      	mov	r0, r4
 80070d0:	9206      	str	r2, [sp, #24]
 80070d2:	f000 fc87 	bl	80079e4 <__i2b>
 80070d6:	4607      	mov	r7, r0
 80070d8:	b165      	cbz	r5, 80070f4 <_dtoa_r+0x774>
 80070da:	9b06      	ldr	r3, [sp, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	dd09      	ble.n	80070f4 <_dtoa_r+0x774>
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	9a05      	ldr	r2, [sp, #20]
 80070e4:	bfa8      	it	ge
 80070e6:	462b      	movge	r3, r5
 80070e8:	1ad2      	subs	r2, r2, r3
 80070ea:	9205      	str	r2, [sp, #20]
 80070ec:	9a06      	ldr	r2, [sp, #24]
 80070ee:	1aed      	subs	r5, r5, r3
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	9306      	str	r3, [sp, #24]
 80070f4:	9b08      	ldr	r3, [sp, #32]
 80070f6:	b1f3      	cbz	r3, 8007136 <_dtoa_r+0x7b6>
 80070f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80a3 	beq.w	8007246 <_dtoa_r+0x8c6>
 8007100:	2e00      	cmp	r6, #0
 8007102:	dd10      	ble.n	8007126 <_dtoa_r+0x7a6>
 8007104:	4639      	mov	r1, r7
 8007106:	4632      	mov	r2, r6
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fd2b 	bl	8007b64 <__pow5mult>
 800710e:	4652      	mov	r2, sl
 8007110:	4601      	mov	r1, r0
 8007112:	4607      	mov	r7, r0
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fc7b 	bl	8007a10 <__multiply>
 800711a:	4651      	mov	r1, sl
 800711c:	4680      	mov	r8, r0
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fb60 	bl	80077e4 <_Bfree>
 8007124:	46c2      	mov	sl, r8
 8007126:	9b08      	ldr	r3, [sp, #32]
 8007128:	1b9a      	subs	r2, r3, r6
 800712a:	d004      	beq.n	8007136 <_dtoa_r+0x7b6>
 800712c:	4651      	mov	r1, sl
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fd18 	bl	8007b64 <__pow5mult>
 8007134:	4682      	mov	sl, r0
 8007136:	2101      	movs	r1, #1
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fc53 	bl	80079e4 <__i2b>
 800713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	4606      	mov	r6, r0
 8007144:	f340 8081 	ble.w	800724a <_dtoa_r+0x8ca>
 8007148:	461a      	mov	r2, r3
 800714a:	4601      	mov	r1, r0
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fd09 	bl	8007b64 <__pow5mult>
 8007152:	9b07      	ldr	r3, [sp, #28]
 8007154:	2b01      	cmp	r3, #1
 8007156:	4606      	mov	r6, r0
 8007158:	dd7a      	ble.n	8007250 <_dtoa_r+0x8d0>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	6933      	ldr	r3, [r6, #16]
 8007160:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007164:	6918      	ldr	r0, [r3, #16]
 8007166:	f000 fbef 	bl	8007948 <__hi0bits>
 800716a:	f1c0 0020 	rsb	r0, r0, #32
 800716e:	9b06      	ldr	r3, [sp, #24]
 8007170:	4418      	add	r0, r3
 8007172:	f010 001f 	ands.w	r0, r0, #31
 8007176:	f000 8094 	beq.w	80072a2 <_dtoa_r+0x922>
 800717a:	f1c0 0320 	rsb	r3, r0, #32
 800717e:	2b04      	cmp	r3, #4
 8007180:	f340 8085 	ble.w	800728e <_dtoa_r+0x90e>
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	f1c0 001c 	rsb	r0, r0, #28
 800718a:	4403      	add	r3, r0
 800718c:	9305      	str	r3, [sp, #20]
 800718e:	9b06      	ldr	r3, [sp, #24]
 8007190:	4403      	add	r3, r0
 8007192:	4405      	add	r5, r0
 8007194:	9306      	str	r3, [sp, #24]
 8007196:	9b05      	ldr	r3, [sp, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd05      	ble.n	80071a8 <_dtoa_r+0x828>
 800719c:	4651      	mov	r1, sl
 800719e:	461a      	mov	r2, r3
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fd39 	bl	8007c18 <__lshift>
 80071a6:	4682      	mov	sl, r0
 80071a8:	9b06      	ldr	r3, [sp, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dd05      	ble.n	80071ba <_dtoa_r+0x83a>
 80071ae:	4631      	mov	r1, r6
 80071b0:	461a      	mov	r2, r3
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fd30 	bl	8007c18 <__lshift>
 80071b8:	4606      	mov	r6, r0
 80071ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d072      	beq.n	80072a6 <_dtoa_r+0x926>
 80071c0:	4631      	mov	r1, r6
 80071c2:	4650      	mov	r0, sl
 80071c4:	f000 fd94 	bl	8007cf0 <__mcmp>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	da6c      	bge.n	80072a6 <_dtoa_r+0x926>
 80071cc:	2300      	movs	r3, #0
 80071ce:	4651      	mov	r1, sl
 80071d0:	220a      	movs	r2, #10
 80071d2:	4620      	mov	r0, r4
 80071d4:	f000 fb28 	bl	8007828 <__multadd>
 80071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071de:	4682      	mov	sl, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 81b0 	beq.w	8007546 <_dtoa_r+0xbc6>
 80071e6:	2300      	movs	r3, #0
 80071e8:	4639      	mov	r1, r7
 80071ea:	220a      	movs	r2, #10
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fb1b 	bl	8007828 <__multadd>
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	4607      	mov	r7, r0
 80071f8:	f300 8096 	bgt.w	8007328 <_dtoa_r+0x9a8>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	dc59      	bgt.n	80072b6 <_dtoa_r+0x936>
 8007202:	e091      	b.n	8007328 <_dtoa_r+0x9a8>
 8007204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800720a:	e758      	b.n	80070be <_dtoa_r+0x73e>
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	1e5e      	subs	r6, r3, #1
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	42b3      	cmp	r3, r6
 8007214:	bfbf      	itttt	lt
 8007216:	9b08      	ldrlt	r3, [sp, #32]
 8007218:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800721a:	9608      	strlt	r6, [sp, #32]
 800721c:	1af3      	sublt	r3, r6, r3
 800721e:	bfb4      	ite	lt
 8007220:	18d2      	addlt	r2, r2, r3
 8007222:	1b9e      	subge	r6, r3, r6
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	bfbc      	itt	lt
 8007228:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800722a:	2600      	movlt	r6, #0
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfb7      	itett	lt
 8007230:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007234:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007238:	1a9d      	sublt	r5, r3, r2
 800723a:	2300      	movlt	r3, #0
 800723c:	e741      	b.n	80070c2 <_dtoa_r+0x742>
 800723e:	9e08      	ldr	r6, [sp, #32]
 8007240:	9d05      	ldr	r5, [sp, #20]
 8007242:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007244:	e748      	b.n	80070d8 <_dtoa_r+0x758>
 8007246:	9a08      	ldr	r2, [sp, #32]
 8007248:	e770      	b.n	800712c <_dtoa_r+0x7ac>
 800724a:	9b07      	ldr	r3, [sp, #28]
 800724c:	2b01      	cmp	r3, #1
 800724e:	dc19      	bgt.n	8007284 <_dtoa_r+0x904>
 8007250:	9b02      	ldr	r3, [sp, #8]
 8007252:	b9bb      	cbnz	r3, 8007284 <_dtoa_r+0x904>
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800725a:	b99b      	cbnz	r3, 8007284 <_dtoa_r+0x904>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	051b      	lsls	r3, r3, #20
 8007266:	b183      	cbz	r3, 800728a <_dtoa_r+0x90a>
 8007268:	9b05      	ldr	r3, [sp, #20]
 800726a:	3301      	adds	r3, #1
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	3301      	adds	r3, #1
 8007272:	9306      	str	r3, [sp, #24]
 8007274:	f04f 0801 	mov.w	r8, #1
 8007278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	f47f af6f 	bne.w	800715e <_dtoa_r+0x7de>
 8007280:	2001      	movs	r0, #1
 8007282:	e774      	b.n	800716e <_dtoa_r+0x7ee>
 8007284:	f04f 0800 	mov.w	r8, #0
 8007288:	e7f6      	b.n	8007278 <_dtoa_r+0x8f8>
 800728a:	4698      	mov	r8, r3
 800728c:	e7f4      	b.n	8007278 <_dtoa_r+0x8f8>
 800728e:	d082      	beq.n	8007196 <_dtoa_r+0x816>
 8007290:	9a05      	ldr	r2, [sp, #20]
 8007292:	331c      	adds	r3, #28
 8007294:	441a      	add	r2, r3
 8007296:	9205      	str	r2, [sp, #20]
 8007298:	9a06      	ldr	r2, [sp, #24]
 800729a:	441a      	add	r2, r3
 800729c:	441d      	add	r5, r3
 800729e:	9206      	str	r2, [sp, #24]
 80072a0:	e779      	b.n	8007196 <_dtoa_r+0x816>
 80072a2:	4603      	mov	r3, r0
 80072a4:	e7f4      	b.n	8007290 <_dtoa_r+0x910>
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dc37      	bgt.n	800731c <_dtoa_r+0x99c>
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	dd34      	ble.n	800731c <_dtoa_r+0x99c>
 80072b2:	9b04      	ldr	r3, [sp, #16]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	b963      	cbnz	r3, 80072d4 <_dtoa_r+0x954>
 80072ba:	4631      	mov	r1, r6
 80072bc:	2205      	movs	r2, #5
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fab2 	bl	8007828 <__multadd>
 80072c4:	4601      	mov	r1, r0
 80072c6:	4606      	mov	r6, r0
 80072c8:	4650      	mov	r0, sl
 80072ca:	f000 fd11 	bl	8007cf0 <__mcmp>
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f73f adbb 	bgt.w	8006e4a <_dtoa_r+0x4ca>
 80072d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d6:	9d00      	ldr	r5, [sp, #0]
 80072d8:	ea6f 0b03 	mvn.w	fp, r3
 80072dc:	f04f 0800 	mov.w	r8, #0
 80072e0:	4631      	mov	r1, r6
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 fa7e 	bl	80077e4 <_Bfree>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	f43f aeab 	beq.w	8007044 <_dtoa_r+0x6c4>
 80072ee:	f1b8 0f00 	cmp.w	r8, #0
 80072f2:	d005      	beq.n	8007300 <_dtoa_r+0x980>
 80072f4:	45b8      	cmp	r8, r7
 80072f6:	d003      	beq.n	8007300 <_dtoa_r+0x980>
 80072f8:	4641      	mov	r1, r8
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fa72 	bl	80077e4 <_Bfree>
 8007300:	4639      	mov	r1, r7
 8007302:	4620      	mov	r0, r4
 8007304:	f000 fa6e 	bl	80077e4 <_Bfree>
 8007308:	e69c      	b.n	8007044 <_dtoa_r+0x6c4>
 800730a:	2600      	movs	r6, #0
 800730c:	4637      	mov	r7, r6
 800730e:	e7e1      	b.n	80072d4 <_dtoa_r+0x954>
 8007310:	46bb      	mov	fp, r7
 8007312:	4637      	mov	r7, r6
 8007314:	e599      	b.n	8006e4a <_dtoa_r+0x4ca>
 8007316:	bf00      	nop
 8007318:	40240000 	.word	0x40240000
 800731c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 80c8 	beq.w	80074b4 <_dtoa_r+0xb34>
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	2d00      	cmp	r5, #0
 800732a:	dd05      	ble.n	8007338 <_dtoa_r+0x9b8>
 800732c:	4639      	mov	r1, r7
 800732e:	462a      	mov	r2, r5
 8007330:	4620      	mov	r0, r4
 8007332:	f000 fc71 	bl	8007c18 <__lshift>
 8007336:	4607      	mov	r7, r0
 8007338:	f1b8 0f00 	cmp.w	r8, #0
 800733c:	d05b      	beq.n	80073f6 <_dtoa_r+0xa76>
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fa0f 	bl	8007764 <_Balloc>
 8007346:	4605      	mov	r5, r0
 8007348:	b928      	cbnz	r0, 8007356 <_dtoa_r+0x9d6>
 800734a:	4b83      	ldr	r3, [pc, #524]	; (8007558 <_dtoa_r+0xbd8>)
 800734c:	4602      	mov	r2, r0
 800734e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007352:	f7ff bb2e 	b.w	80069b2 <_dtoa_r+0x32>
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	3202      	adds	r2, #2
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	f107 010c 	add.w	r1, r7, #12
 8007360:	300c      	adds	r0, #12
 8007362:	f001 ff85 	bl	8009270 <memcpy>
 8007366:	2201      	movs	r2, #1
 8007368:	4629      	mov	r1, r5
 800736a:	4620      	mov	r0, r4
 800736c:	f000 fc54 	bl	8007c18 <__lshift>
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	3301      	adds	r3, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	e9dd 2300 	ldrd	r2, r3, [sp]
 800737a:	4413      	add	r3, r2
 800737c:	9308      	str	r3, [sp, #32]
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	46b8      	mov	r8, r7
 8007386:	9306      	str	r3, [sp, #24]
 8007388:	4607      	mov	r7, r0
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	4631      	mov	r1, r6
 800738e:	3b01      	subs	r3, #1
 8007390:	4650      	mov	r0, sl
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	f7ff fa6c 	bl	8006870 <quorem>
 8007398:	4641      	mov	r1, r8
 800739a:	9002      	str	r0, [sp, #8]
 800739c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073a0:	4650      	mov	r0, sl
 80073a2:	f000 fca5 	bl	8007cf0 <__mcmp>
 80073a6:	463a      	mov	r2, r7
 80073a8:	9005      	str	r0, [sp, #20]
 80073aa:	4631      	mov	r1, r6
 80073ac:	4620      	mov	r0, r4
 80073ae:	f000 fcbb 	bl	8007d28 <__mdiff>
 80073b2:	68c2      	ldr	r2, [r0, #12]
 80073b4:	4605      	mov	r5, r0
 80073b6:	bb02      	cbnz	r2, 80073fa <_dtoa_r+0xa7a>
 80073b8:	4601      	mov	r1, r0
 80073ba:	4650      	mov	r0, sl
 80073bc:	f000 fc98 	bl	8007cf0 <__mcmp>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4629      	mov	r1, r5
 80073c4:	4620      	mov	r0, r4
 80073c6:	9209      	str	r2, [sp, #36]	; 0x24
 80073c8:	f000 fa0c 	bl	80077e4 <_Bfree>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d0:	9d04      	ldr	r5, [sp, #16]
 80073d2:	ea43 0102 	orr.w	r1, r3, r2
 80073d6:	9b06      	ldr	r3, [sp, #24]
 80073d8:	4319      	orrs	r1, r3
 80073da:	d110      	bne.n	80073fe <_dtoa_r+0xa7e>
 80073dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073e0:	d029      	beq.n	8007436 <_dtoa_r+0xab6>
 80073e2:	9b05      	ldr	r3, [sp, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd02      	ble.n	80073ee <_dtoa_r+0xa6e>
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	f883 9000 	strb.w	r9, [r3]
 80073f4:	e774      	b.n	80072e0 <_dtoa_r+0x960>
 80073f6:	4638      	mov	r0, r7
 80073f8:	e7ba      	b.n	8007370 <_dtoa_r+0x9f0>
 80073fa:	2201      	movs	r2, #1
 80073fc:	e7e1      	b.n	80073c2 <_dtoa_r+0xa42>
 80073fe:	9b05      	ldr	r3, [sp, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	db04      	blt.n	800740e <_dtoa_r+0xa8e>
 8007404:	9907      	ldr	r1, [sp, #28]
 8007406:	430b      	orrs	r3, r1
 8007408:	9906      	ldr	r1, [sp, #24]
 800740a:	430b      	orrs	r3, r1
 800740c:	d120      	bne.n	8007450 <_dtoa_r+0xad0>
 800740e:	2a00      	cmp	r2, #0
 8007410:	dded      	ble.n	80073ee <_dtoa_r+0xa6e>
 8007412:	4651      	mov	r1, sl
 8007414:	2201      	movs	r2, #1
 8007416:	4620      	mov	r0, r4
 8007418:	f000 fbfe 	bl	8007c18 <__lshift>
 800741c:	4631      	mov	r1, r6
 800741e:	4682      	mov	sl, r0
 8007420:	f000 fc66 	bl	8007cf0 <__mcmp>
 8007424:	2800      	cmp	r0, #0
 8007426:	dc03      	bgt.n	8007430 <_dtoa_r+0xab0>
 8007428:	d1e1      	bne.n	80073ee <_dtoa_r+0xa6e>
 800742a:	f019 0f01 	tst.w	r9, #1
 800742e:	d0de      	beq.n	80073ee <_dtoa_r+0xa6e>
 8007430:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007434:	d1d8      	bne.n	80073e8 <_dtoa_r+0xa68>
 8007436:	9a01      	ldr	r2, [sp, #4]
 8007438:	2339      	movs	r3, #57	; 0x39
 800743a:	7013      	strb	r3, [r2, #0]
 800743c:	462b      	mov	r3, r5
 800743e:	461d      	mov	r5, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007446:	2a39      	cmp	r2, #57	; 0x39
 8007448:	d06c      	beq.n	8007524 <_dtoa_r+0xba4>
 800744a:	3201      	adds	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e747      	b.n	80072e0 <_dtoa_r+0x960>
 8007450:	2a00      	cmp	r2, #0
 8007452:	dd07      	ble.n	8007464 <_dtoa_r+0xae4>
 8007454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007458:	d0ed      	beq.n	8007436 <_dtoa_r+0xab6>
 800745a:	9a01      	ldr	r2, [sp, #4]
 800745c:	f109 0301 	add.w	r3, r9, #1
 8007460:	7013      	strb	r3, [r2, #0]
 8007462:	e73d      	b.n	80072e0 <_dtoa_r+0x960>
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	9a08      	ldr	r2, [sp, #32]
 8007468:	f803 9c01 	strb.w	r9, [r3, #-1]
 800746c:	4293      	cmp	r3, r2
 800746e:	d043      	beq.n	80074f8 <_dtoa_r+0xb78>
 8007470:	4651      	mov	r1, sl
 8007472:	2300      	movs	r3, #0
 8007474:	220a      	movs	r2, #10
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f9d6 	bl	8007828 <__multadd>
 800747c:	45b8      	cmp	r8, r7
 800747e:	4682      	mov	sl, r0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	f04f 020a 	mov.w	r2, #10
 8007488:	4641      	mov	r1, r8
 800748a:	4620      	mov	r0, r4
 800748c:	d107      	bne.n	800749e <_dtoa_r+0xb1e>
 800748e:	f000 f9cb 	bl	8007828 <__multadd>
 8007492:	4680      	mov	r8, r0
 8007494:	4607      	mov	r7, r0
 8007496:	9b04      	ldr	r3, [sp, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	e775      	b.n	800738a <_dtoa_r+0xa0a>
 800749e:	f000 f9c3 	bl	8007828 <__multadd>
 80074a2:	4639      	mov	r1, r7
 80074a4:	4680      	mov	r8, r0
 80074a6:	2300      	movs	r3, #0
 80074a8:	220a      	movs	r2, #10
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f9bc 	bl	8007828 <__multadd>
 80074b0:	4607      	mov	r7, r0
 80074b2:	e7f0      	b.n	8007496 <_dtoa_r+0xb16>
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	9d00      	ldr	r5, [sp, #0]
 80074ba:	4631      	mov	r1, r6
 80074bc:	4650      	mov	r0, sl
 80074be:	f7ff f9d7 	bl	8006870 <quorem>
 80074c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	f805 9b01 	strb.w	r9, [r5], #1
 80074cc:	1aea      	subs	r2, r5, r3
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	dd07      	ble.n	80074e4 <_dtoa_r+0xb64>
 80074d4:	4651      	mov	r1, sl
 80074d6:	2300      	movs	r3, #0
 80074d8:	220a      	movs	r2, #10
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 f9a4 	bl	8007828 <__multadd>
 80074e0:	4682      	mov	sl, r0
 80074e2:	e7ea      	b.n	80074ba <_dtoa_r+0xb3a>
 80074e4:	9b01      	ldr	r3, [sp, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bfc8      	it	gt
 80074ea:	461d      	movgt	r5, r3
 80074ec:	9b00      	ldr	r3, [sp, #0]
 80074ee:	bfd8      	it	le
 80074f0:	2501      	movle	r5, #1
 80074f2:	441d      	add	r5, r3
 80074f4:	f04f 0800 	mov.w	r8, #0
 80074f8:	4651      	mov	r1, sl
 80074fa:	2201      	movs	r2, #1
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 fb8b 	bl	8007c18 <__lshift>
 8007502:	4631      	mov	r1, r6
 8007504:	4682      	mov	sl, r0
 8007506:	f000 fbf3 	bl	8007cf0 <__mcmp>
 800750a:	2800      	cmp	r0, #0
 800750c:	dc96      	bgt.n	800743c <_dtoa_r+0xabc>
 800750e:	d102      	bne.n	8007516 <_dtoa_r+0xb96>
 8007510:	f019 0f01 	tst.w	r9, #1
 8007514:	d192      	bne.n	800743c <_dtoa_r+0xabc>
 8007516:	462b      	mov	r3, r5
 8007518:	461d      	mov	r5, r3
 800751a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751e:	2a30      	cmp	r2, #48	; 0x30
 8007520:	d0fa      	beq.n	8007518 <_dtoa_r+0xb98>
 8007522:	e6dd      	b.n	80072e0 <_dtoa_r+0x960>
 8007524:	9a00      	ldr	r2, [sp, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d189      	bne.n	800743e <_dtoa_r+0xabe>
 800752a:	f10b 0b01 	add.w	fp, fp, #1
 800752e:	2331      	movs	r3, #49	; 0x31
 8007530:	e796      	b.n	8007460 <_dtoa_r+0xae0>
 8007532:	4b0a      	ldr	r3, [pc, #40]	; (800755c <_dtoa_r+0xbdc>)
 8007534:	f7ff ba99 	b.w	8006a6a <_dtoa_r+0xea>
 8007538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800753a:	2b00      	cmp	r3, #0
 800753c:	f47f aa6d 	bne.w	8006a1a <_dtoa_r+0x9a>
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <_dtoa_r+0xbe0>)
 8007542:	f7ff ba92 	b.w	8006a6a <_dtoa_r+0xea>
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dcb5      	bgt.n	80074b8 <_dtoa_r+0xb38>
 800754c:	9b07      	ldr	r3, [sp, #28]
 800754e:	2b02      	cmp	r3, #2
 8007550:	f73f aeb1 	bgt.w	80072b6 <_dtoa_r+0x936>
 8007554:	e7b0      	b.n	80074b8 <_dtoa_r+0xb38>
 8007556:	bf00      	nop
 8007558:	0800b149 	.word	0x0800b149
 800755c:	0800b0a4 	.word	0x0800b0a4
 8007560:	0800b0cd 	.word	0x0800b0cd

08007564 <_free_r>:
 8007564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007566:	2900      	cmp	r1, #0
 8007568:	d044      	beq.n	80075f4 <_free_r+0x90>
 800756a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756e:	9001      	str	r0, [sp, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	f1a1 0404 	sub.w	r4, r1, #4
 8007576:	bfb8      	it	lt
 8007578:	18e4      	addlt	r4, r4, r3
 800757a:	f000 f8e7 	bl	800774c <__malloc_lock>
 800757e:	4a1e      	ldr	r2, [pc, #120]	; (80075f8 <_free_r+0x94>)
 8007580:	9801      	ldr	r0, [sp, #4]
 8007582:	6813      	ldr	r3, [r2, #0]
 8007584:	b933      	cbnz	r3, 8007594 <_free_r+0x30>
 8007586:	6063      	str	r3, [r4, #4]
 8007588:	6014      	str	r4, [r2, #0]
 800758a:	b003      	add	sp, #12
 800758c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007590:	f000 b8e2 	b.w	8007758 <__malloc_unlock>
 8007594:	42a3      	cmp	r3, r4
 8007596:	d908      	bls.n	80075aa <_free_r+0x46>
 8007598:	6825      	ldr	r5, [r4, #0]
 800759a:	1961      	adds	r1, r4, r5
 800759c:	428b      	cmp	r3, r1
 800759e:	bf01      	itttt	eq
 80075a0:	6819      	ldreq	r1, [r3, #0]
 80075a2:	685b      	ldreq	r3, [r3, #4]
 80075a4:	1949      	addeq	r1, r1, r5
 80075a6:	6021      	streq	r1, [r4, #0]
 80075a8:	e7ed      	b.n	8007586 <_free_r+0x22>
 80075aa:	461a      	mov	r2, r3
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	b10b      	cbz	r3, 80075b4 <_free_r+0x50>
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d9fa      	bls.n	80075aa <_free_r+0x46>
 80075b4:	6811      	ldr	r1, [r2, #0]
 80075b6:	1855      	adds	r5, r2, r1
 80075b8:	42a5      	cmp	r5, r4
 80075ba:	d10b      	bne.n	80075d4 <_free_r+0x70>
 80075bc:	6824      	ldr	r4, [r4, #0]
 80075be:	4421      	add	r1, r4
 80075c0:	1854      	adds	r4, r2, r1
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	d1e0      	bne.n	800758a <_free_r+0x26>
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	6053      	str	r3, [r2, #4]
 80075ce:	440c      	add	r4, r1
 80075d0:	6014      	str	r4, [r2, #0]
 80075d2:	e7da      	b.n	800758a <_free_r+0x26>
 80075d4:	d902      	bls.n	80075dc <_free_r+0x78>
 80075d6:	230c      	movs	r3, #12
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	e7d6      	b.n	800758a <_free_r+0x26>
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	1961      	adds	r1, r4, r5
 80075e0:	428b      	cmp	r3, r1
 80075e2:	bf04      	itt	eq
 80075e4:	6819      	ldreq	r1, [r3, #0]
 80075e6:	685b      	ldreq	r3, [r3, #4]
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	bf04      	itt	eq
 80075ec:	1949      	addeq	r1, r1, r5
 80075ee:	6021      	streq	r1, [r4, #0]
 80075f0:	6054      	str	r4, [r2, #4]
 80075f2:	e7ca      	b.n	800758a <_free_r+0x26>
 80075f4:	b003      	add	sp, #12
 80075f6:	bd30      	pop	{r4, r5, pc}
 80075f8:	200007f0 	.word	0x200007f0

080075fc <malloc>:
 80075fc:	4b02      	ldr	r3, [pc, #8]	; (8007608 <malloc+0xc>)
 80075fe:	4601      	mov	r1, r0
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f000 b823 	b.w	800764c <_malloc_r>
 8007606:	bf00      	nop
 8007608:	2000017c 	.word	0x2000017c

0800760c <sbrk_aligned>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4e0e      	ldr	r6, [pc, #56]	; (8007648 <sbrk_aligned+0x3c>)
 8007610:	460c      	mov	r4, r1
 8007612:	6831      	ldr	r1, [r6, #0]
 8007614:	4605      	mov	r5, r0
 8007616:	b911      	cbnz	r1, 800761e <sbrk_aligned+0x12>
 8007618:	f001 fe1a 	bl	8009250 <_sbrk_r>
 800761c:	6030      	str	r0, [r6, #0]
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f001 fe15 	bl	8009250 <_sbrk_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d00a      	beq.n	8007640 <sbrk_aligned+0x34>
 800762a:	1cc4      	adds	r4, r0, #3
 800762c:	f024 0403 	bic.w	r4, r4, #3
 8007630:	42a0      	cmp	r0, r4
 8007632:	d007      	beq.n	8007644 <sbrk_aligned+0x38>
 8007634:	1a21      	subs	r1, r4, r0
 8007636:	4628      	mov	r0, r5
 8007638:	f001 fe0a 	bl	8009250 <_sbrk_r>
 800763c:	3001      	adds	r0, #1
 800763e:	d101      	bne.n	8007644 <sbrk_aligned+0x38>
 8007640:	f04f 34ff 	mov.w	r4, #4294967295
 8007644:	4620      	mov	r0, r4
 8007646:	bd70      	pop	{r4, r5, r6, pc}
 8007648:	200007f4 	.word	0x200007f4

0800764c <_malloc_r>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	1ccd      	adds	r5, r1, #3
 8007652:	f025 0503 	bic.w	r5, r5, #3
 8007656:	3508      	adds	r5, #8
 8007658:	2d0c      	cmp	r5, #12
 800765a:	bf38      	it	cc
 800765c:	250c      	movcc	r5, #12
 800765e:	2d00      	cmp	r5, #0
 8007660:	4607      	mov	r7, r0
 8007662:	db01      	blt.n	8007668 <_malloc_r+0x1c>
 8007664:	42a9      	cmp	r1, r5
 8007666:	d905      	bls.n	8007674 <_malloc_r+0x28>
 8007668:	230c      	movs	r3, #12
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	2600      	movs	r6, #0
 800766e:	4630      	mov	r0, r6
 8007670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007674:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007748 <_malloc_r+0xfc>
 8007678:	f000 f868 	bl	800774c <__malloc_lock>
 800767c:	f8d8 3000 	ldr.w	r3, [r8]
 8007680:	461c      	mov	r4, r3
 8007682:	bb5c      	cbnz	r4, 80076dc <_malloc_r+0x90>
 8007684:	4629      	mov	r1, r5
 8007686:	4638      	mov	r0, r7
 8007688:	f7ff ffc0 	bl	800760c <sbrk_aligned>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	4604      	mov	r4, r0
 8007690:	d155      	bne.n	800773e <_malloc_r+0xf2>
 8007692:	f8d8 4000 	ldr.w	r4, [r8]
 8007696:	4626      	mov	r6, r4
 8007698:	2e00      	cmp	r6, #0
 800769a:	d145      	bne.n	8007728 <_malloc_r+0xdc>
 800769c:	2c00      	cmp	r4, #0
 800769e:	d048      	beq.n	8007732 <_malloc_r+0xe6>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	4631      	mov	r1, r6
 80076a4:	4638      	mov	r0, r7
 80076a6:	eb04 0903 	add.w	r9, r4, r3
 80076aa:	f001 fdd1 	bl	8009250 <_sbrk_r>
 80076ae:	4581      	cmp	r9, r0
 80076b0:	d13f      	bne.n	8007732 <_malloc_r+0xe6>
 80076b2:	6821      	ldr	r1, [r4, #0]
 80076b4:	1a6d      	subs	r5, r5, r1
 80076b6:	4629      	mov	r1, r5
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ffa7 	bl	800760c <sbrk_aligned>
 80076be:	3001      	adds	r0, #1
 80076c0:	d037      	beq.n	8007732 <_malloc_r+0xe6>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	442b      	add	r3, r5
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	f8d8 3000 	ldr.w	r3, [r8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d038      	beq.n	8007742 <_malloc_r+0xf6>
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	42a2      	cmp	r2, r4
 80076d4:	d12b      	bne.n	800772e <_malloc_r+0xe2>
 80076d6:	2200      	movs	r2, #0
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	e00f      	b.n	80076fc <_malloc_r+0xb0>
 80076dc:	6822      	ldr	r2, [r4, #0]
 80076de:	1b52      	subs	r2, r2, r5
 80076e0:	d41f      	bmi.n	8007722 <_malloc_r+0xd6>
 80076e2:	2a0b      	cmp	r2, #11
 80076e4:	d917      	bls.n	8007716 <_malloc_r+0xca>
 80076e6:	1961      	adds	r1, r4, r5
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	6025      	str	r5, [r4, #0]
 80076ec:	bf18      	it	ne
 80076ee:	6059      	strne	r1, [r3, #4]
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	bf08      	it	eq
 80076f4:	f8c8 1000 	streq.w	r1, [r8]
 80076f8:	5162      	str	r2, [r4, r5]
 80076fa:	604b      	str	r3, [r1, #4]
 80076fc:	4638      	mov	r0, r7
 80076fe:	f104 060b 	add.w	r6, r4, #11
 8007702:	f000 f829 	bl	8007758 <__malloc_unlock>
 8007706:	f026 0607 	bic.w	r6, r6, #7
 800770a:	1d23      	adds	r3, r4, #4
 800770c:	1af2      	subs	r2, r6, r3
 800770e:	d0ae      	beq.n	800766e <_malloc_r+0x22>
 8007710:	1b9b      	subs	r3, r3, r6
 8007712:	50a3      	str	r3, [r4, r2]
 8007714:	e7ab      	b.n	800766e <_malloc_r+0x22>
 8007716:	42a3      	cmp	r3, r4
 8007718:	6862      	ldr	r2, [r4, #4]
 800771a:	d1dd      	bne.n	80076d8 <_malloc_r+0x8c>
 800771c:	f8c8 2000 	str.w	r2, [r8]
 8007720:	e7ec      	b.n	80076fc <_malloc_r+0xb0>
 8007722:	4623      	mov	r3, r4
 8007724:	6864      	ldr	r4, [r4, #4]
 8007726:	e7ac      	b.n	8007682 <_malloc_r+0x36>
 8007728:	4634      	mov	r4, r6
 800772a:	6876      	ldr	r6, [r6, #4]
 800772c:	e7b4      	b.n	8007698 <_malloc_r+0x4c>
 800772e:	4613      	mov	r3, r2
 8007730:	e7cc      	b.n	80076cc <_malloc_r+0x80>
 8007732:	230c      	movs	r3, #12
 8007734:	603b      	str	r3, [r7, #0]
 8007736:	4638      	mov	r0, r7
 8007738:	f000 f80e 	bl	8007758 <__malloc_unlock>
 800773c:	e797      	b.n	800766e <_malloc_r+0x22>
 800773e:	6025      	str	r5, [r4, #0]
 8007740:	e7dc      	b.n	80076fc <_malloc_r+0xb0>
 8007742:	605b      	str	r3, [r3, #4]
 8007744:	deff      	udf	#255	; 0xff
 8007746:	bf00      	nop
 8007748:	200007f0 	.word	0x200007f0

0800774c <__malloc_lock>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__malloc_lock+0x8>)
 800774e:	f7ff b887 	b.w	8006860 <__retarget_lock_acquire_recursive>
 8007752:	bf00      	nop
 8007754:	200007ec 	.word	0x200007ec

08007758 <__malloc_unlock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_unlock+0x8>)
 800775a:	f7ff b882 	b.w	8006862 <__retarget_lock_release_recursive>
 800775e:	bf00      	nop
 8007760:	200007ec 	.word	0x200007ec

08007764 <_Balloc>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	69c6      	ldr	r6, [r0, #28]
 8007768:	4604      	mov	r4, r0
 800776a:	460d      	mov	r5, r1
 800776c:	b976      	cbnz	r6, 800778c <_Balloc+0x28>
 800776e:	2010      	movs	r0, #16
 8007770:	f7ff ff44 	bl	80075fc <malloc>
 8007774:	4602      	mov	r2, r0
 8007776:	61e0      	str	r0, [r4, #28]
 8007778:	b920      	cbnz	r0, 8007784 <_Balloc+0x20>
 800777a:	4b18      	ldr	r3, [pc, #96]	; (80077dc <_Balloc+0x78>)
 800777c:	4818      	ldr	r0, [pc, #96]	; (80077e0 <_Balloc+0x7c>)
 800777e:	216b      	movs	r1, #107	; 0x6b
 8007780:	f001 fd8e 	bl	80092a0 <__assert_func>
 8007784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007788:	6006      	str	r6, [r0, #0]
 800778a:	60c6      	str	r6, [r0, #12]
 800778c:	69e6      	ldr	r6, [r4, #28]
 800778e:	68f3      	ldr	r3, [r6, #12]
 8007790:	b183      	cbz	r3, 80077b4 <_Balloc+0x50>
 8007792:	69e3      	ldr	r3, [r4, #28]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800779a:	b9b8      	cbnz	r0, 80077cc <_Balloc+0x68>
 800779c:	2101      	movs	r1, #1
 800779e:	fa01 f605 	lsl.w	r6, r1, r5
 80077a2:	1d72      	adds	r2, r6, #5
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	4620      	mov	r0, r4
 80077a8:	f001 fd98 	bl	80092dc <_calloc_r>
 80077ac:	b160      	cbz	r0, 80077c8 <_Balloc+0x64>
 80077ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077b2:	e00e      	b.n	80077d2 <_Balloc+0x6e>
 80077b4:	2221      	movs	r2, #33	; 0x21
 80077b6:	2104      	movs	r1, #4
 80077b8:	4620      	mov	r0, r4
 80077ba:	f001 fd8f 	bl	80092dc <_calloc_r>
 80077be:	69e3      	ldr	r3, [r4, #28]
 80077c0:	60f0      	str	r0, [r6, #12]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e4      	bne.n	8007792 <_Balloc+0x2e>
 80077c8:	2000      	movs	r0, #0
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	6802      	ldr	r2, [r0, #0]
 80077ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077d2:	2300      	movs	r3, #0
 80077d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077d8:	e7f7      	b.n	80077ca <_Balloc+0x66>
 80077da:	bf00      	nop
 80077dc:	0800b0da 	.word	0x0800b0da
 80077e0:	0800b15a 	.word	0x0800b15a

080077e4 <_Bfree>:
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	69c6      	ldr	r6, [r0, #28]
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b976      	cbnz	r6, 800780c <_Bfree+0x28>
 80077ee:	2010      	movs	r0, #16
 80077f0:	f7ff ff04 	bl	80075fc <malloc>
 80077f4:	4602      	mov	r2, r0
 80077f6:	61e8      	str	r0, [r5, #28]
 80077f8:	b920      	cbnz	r0, 8007804 <_Bfree+0x20>
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_Bfree+0x3c>)
 80077fc:	4809      	ldr	r0, [pc, #36]	; (8007824 <_Bfree+0x40>)
 80077fe:	218f      	movs	r1, #143	; 0x8f
 8007800:	f001 fd4e 	bl	80092a0 <__assert_func>
 8007804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007808:	6006      	str	r6, [r0, #0]
 800780a:	60c6      	str	r6, [r0, #12]
 800780c:	b13c      	cbz	r4, 800781e <_Bfree+0x3a>
 800780e:	69eb      	ldr	r3, [r5, #28]
 8007810:	6862      	ldr	r2, [r4, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007818:	6021      	str	r1, [r4, #0]
 800781a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	0800b0da 	.word	0x0800b0da
 8007824:	0800b15a 	.word	0x0800b15a

08007828 <__multadd>:
 8007828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782c:	690d      	ldr	r5, [r1, #16]
 800782e:	4607      	mov	r7, r0
 8007830:	460c      	mov	r4, r1
 8007832:	461e      	mov	r6, r3
 8007834:	f101 0c14 	add.w	ip, r1, #20
 8007838:	2000      	movs	r0, #0
 800783a:	f8dc 3000 	ldr.w	r3, [ip]
 800783e:	b299      	uxth	r1, r3
 8007840:	fb02 6101 	mla	r1, r2, r1, r6
 8007844:	0c1e      	lsrs	r6, r3, #16
 8007846:	0c0b      	lsrs	r3, r1, #16
 8007848:	fb02 3306 	mla	r3, r2, r6, r3
 800784c:	b289      	uxth	r1, r1
 800784e:	3001      	adds	r0, #1
 8007850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007854:	4285      	cmp	r5, r0
 8007856:	f84c 1b04 	str.w	r1, [ip], #4
 800785a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800785e:	dcec      	bgt.n	800783a <__multadd+0x12>
 8007860:	b30e      	cbz	r6, 80078a6 <__multadd+0x7e>
 8007862:	68a3      	ldr	r3, [r4, #8]
 8007864:	42ab      	cmp	r3, r5
 8007866:	dc19      	bgt.n	800789c <__multadd+0x74>
 8007868:	6861      	ldr	r1, [r4, #4]
 800786a:	4638      	mov	r0, r7
 800786c:	3101      	adds	r1, #1
 800786e:	f7ff ff79 	bl	8007764 <_Balloc>
 8007872:	4680      	mov	r8, r0
 8007874:	b928      	cbnz	r0, 8007882 <__multadd+0x5a>
 8007876:	4602      	mov	r2, r0
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <__multadd+0x84>)
 800787a:	480d      	ldr	r0, [pc, #52]	; (80078b0 <__multadd+0x88>)
 800787c:	21ba      	movs	r1, #186	; 0xba
 800787e:	f001 fd0f 	bl	80092a0 <__assert_func>
 8007882:	6922      	ldr	r2, [r4, #16]
 8007884:	3202      	adds	r2, #2
 8007886:	f104 010c 	add.w	r1, r4, #12
 800788a:	0092      	lsls	r2, r2, #2
 800788c:	300c      	adds	r0, #12
 800788e:	f001 fcef 	bl	8009270 <memcpy>
 8007892:	4621      	mov	r1, r4
 8007894:	4638      	mov	r0, r7
 8007896:	f7ff ffa5 	bl	80077e4 <_Bfree>
 800789a:	4644      	mov	r4, r8
 800789c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078a0:	3501      	adds	r5, #1
 80078a2:	615e      	str	r6, [r3, #20]
 80078a4:	6125      	str	r5, [r4, #16]
 80078a6:	4620      	mov	r0, r4
 80078a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ac:	0800b149 	.word	0x0800b149
 80078b0:	0800b15a 	.word	0x0800b15a

080078b4 <__s2b>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4615      	mov	r5, r2
 80078bc:	461f      	mov	r7, r3
 80078be:	2209      	movs	r2, #9
 80078c0:	3308      	adds	r3, #8
 80078c2:	4606      	mov	r6, r0
 80078c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80078c8:	2100      	movs	r1, #0
 80078ca:	2201      	movs	r2, #1
 80078cc:	429a      	cmp	r2, r3
 80078ce:	db09      	blt.n	80078e4 <__s2b+0x30>
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7ff ff47 	bl	8007764 <_Balloc>
 80078d6:	b940      	cbnz	r0, 80078ea <__s2b+0x36>
 80078d8:	4602      	mov	r2, r0
 80078da:	4b19      	ldr	r3, [pc, #100]	; (8007940 <__s2b+0x8c>)
 80078dc:	4819      	ldr	r0, [pc, #100]	; (8007944 <__s2b+0x90>)
 80078de:	21d3      	movs	r1, #211	; 0xd3
 80078e0:	f001 fcde 	bl	80092a0 <__assert_func>
 80078e4:	0052      	lsls	r2, r2, #1
 80078e6:	3101      	adds	r1, #1
 80078e8:	e7f0      	b.n	80078cc <__s2b+0x18>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	6143      	str	r3, [r0, #20]
 80078ee:	2d09      	cmp	r5, #9
 80078f0:	f04f 0301 	mov.w	r3, #1
 80078f4:	6103      	str	r3, [r0, #16]
 80078f6:	dd16      	ble.n	8007926 <__s2b+0x72>
 80078f8:	f104 0909 	add.w	r9, r4, #9
 80078fc:	46c8      	mov	r8, r9
 80078fe:	442c      	add	r4, r5
 8007900:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007904:	4601      	mov	r1, r0
 8007906:	3b30      	subs	r3, #48	; 0x30
 8007908:	220a      	movs	r2, #10
 800790a:	4630      	mov	r0, r6
 800790c:	f7ff ff8c 	bl	8007828 <__multadd>
 8007910:	45a0      	cmp	r8, r4
 8007912:	d1f5      	bne.n	8007900 <__s2b+0x4c>
 8007914:	f1a5 0408 	sub.w	r4, r5, #8
 8007918:	444c      	add	r4, r9
 800791a:	1b2d      	subs	r5, r5, r4
 800791c:	1963      	adds	r3, r4, r5
 800791e:	42bb      	cmp	r3, r7
 8007920:	db04      	blt.n	800792c <__s2b+0x78>
 8007922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007926:	340a      	adds	r4, #10
 8007928:	2509      	movs	r5, #9
 800792a:	e7f6      	b.n	800791a <__s2b+0x66>
 800792c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007930:	4601      	mov	r1, r0
 8007932:	3b30      	subs	r3, #48	; 0x30
 8007934:	220a      	movs	r2, #10
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ff76 	bl	8007828 <__multadd>
 800793c:	e7ee      	b.n	800791c <__s2b+0x68>
 800793e:	bf00      	nop
 8007940:	0800b149 	.word	0x0800b149
 8007944:	0800b15a 	.word	0x0800b15a

08007948 <__hi0bits>:
 8007948:	0c03      	lsrs	r3, r0, #16
 800794a:	041b      	lsls	r3, r3, #16
 800794c:	b9d3      	cbnz	r3, 8007984 <__hi0bits+0x3c>
 800794e:	0400      	lsls	r0, r0, #16
 8007950:	2310      	movs	r3, #16
 8007952:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007956:	bf04      	itt	eq
 8007958:	0200      	lsleq	r0, r0, #8
 800795a:	3308      	addeq	r3, #8
 800795c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007960:	bf04      	itt	eq
 8007962:	0100      	lsleq	r0, r0, #4
 8007964:	3304      	addeq	r3, #4
 8007966:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800796a:	bf04      	itt	eq
 800796c:	0080      	lsleq	r0, r0, #2
 800796e:	3302      	addeq	r3, #2
 8007970:	2800      	cmp	r0, #0
 8007972:	db05      	blt.n	8007980 <__hi0bits+0x38>
 8007974:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007978:	f103 0301 	add.w	r3, r3, #1
 800797c:	bf08      	it	eq
 800797e:	2320      	moveq	r3, #32
 8007980:	4618      	mov	r0, r3
 8007982:	4770      	bx	lr
 8007984:	2300      	movs	r3, #0
 8007986:	e7e4      	b.n	8007952 <__hi0bits+0xa>

08007988 <__lo0bits>:
 8007988:	6803      	ldr	r3, [r0, #0]
 800798a:	f013 0207 	ands.w	r2, r3, #7
 800798e:	d00c      	beq.n	80079aa <__lo0bits+0x22>
 8007990:	07d9      	lsls	r1, r3, #31
 8007992:	d422      	bmi.n	80079da <__lo0bits+0x52>
 8007994:	079a      	lsls	r2, r3, #30
 8007996:	bf49      	itett	mi
 8007998:	085b      	lsrmi	r3, r3, #1
 800799a:	089b      	lsrpl	r3, r3, #2
 800799c:	6003      	strmi	r3, [r0, #0]
 800799e:	2201      	movmi	r2, #1
 80079a0:	bf5c      	itt	pl
 80079a2:	6003      	strpl	r3, [r0, #0]
 80079a4:	2202      	movpl	r2, #2
 80079a6:	4610      	mov	r0, r2
 80079a8:	4770      	bx	lr
 80079aa:	b299      	uxth	r1, r3
 80079ac:	b909      	cbnz	r1, 80079b2 <__lo0bits+0x2a>
 80079ae:	0c1b      	lsrs	r3, r3, #16
 80079b0:	2210      	movs	r2, #16
 80079b2:	b2d9      	uxtb	r1, r3
 80079b4:	b909      	cbnz	r1, 80079ba <__lo0bits+0x32>
 80079b6:	3208      	adds	r2, #8
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	0719      	lsls	r1, r3, #28
 80079bc:	bf04      	itt	eq
 80079be:	091b      	lsreq	r3, r3, #4
 80079c0:	3204      	addeq	r2, #4
 80079c2:	0799      	lsls	r1, r3, #30
 80079c4:	bf04      	itt	eq
 80079c6:	089b      	lsreq	r3, r3, #2
 80079c8:	3202      	addeq	r2, #2
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d403      	bmi.n	80079d6 <__lo0bits+0x4e>
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	f102 0201 	add.w	r2, r2, #1
 80079d4:	d003      	beq.n	80079de <__lo0bits+0x56>
 80079d6:	6003      	str	r3, [r0, #0]
 80079d8:	e7e5      	b.n	80079a6 <__lo0bits+0x1e>
 80079da:	2200      	movs	r2, #0
 80079dc:	e7e3      	b.n	80079a6 <__lo0bits+0x1e>
 80079de:	2220      	movs	r2, #32
 80079e0:	e7e1      	b.n	80079a6 <__lo0bits+0x1e>
	...

080079e4 <__i2b>:
 80079e4:	b510      	push	{r4, lr}
 80079e6:	460c      	mov	r4, r1
 80079e8:	2101      	movs	r1, #1
 80079ea:	f7ff febb 	bl	8007764 <_Balloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	b928      	cbnz	r0, 80079fe <__i2b+0x1a>
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <__i2b+0x24>)
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <__i2b+0x28>)
 80079f6:	f240 1145 	movw	r1, #325	; 0x145
 80079fa:	f001 fc51 	bl	80092a0 <__assert_func>
 80079fe:	2301      	movs	r3, #1
 8007a00:	6144      	str	r4, [r0, #20]
 8007a02:	6103      	str	r3, [r0, #16]
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	0800b149 	.word	0x0800b149
 8007a0c:	0800b15a 	.word	0x0800b15a

08007a10 <__multiply>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4691      	mov	r9, r2
 8007a16:	690a      	ldr	r2, [r1, #16]
 8007a18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	bfb8      	it	lt
 8007a20:	460b      	movlt	r3, r1
 8007a22:	460c      	mov	r4, r1
 8007a24:	bfbc      	itt	lt
 8007a26:	464c      	movlt	r4, r9
 8007a28:	4699      	movlt	r9, r3
 8007a2a:	6927      	ldr	r7, [r4, #16]
 8007a2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a30:	68a3      	ldr	r3, [r4, #8]
 8007a32:	6861      	ldr	r1, [r4, #4]
 8007a34:	eb07 060a 	add.w	r6, r7, sl
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	bfb8      	it	lt
 8007a3e:	3101      	addlt	r1, #1
 8007a40:	f7ff fe90 	bl	8007764 <_Balloc>
 8007a44:	b930      	cbnz	r0, 8007a54 <__multiply+0x44>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b44      	ldr	r3, [pc, #272]	; (8007b5c <__multiply+0x14c>)
 8007a4a:	4845      	ldr	r0, [pc, #276]	; (8007b60 <__multiply+0x150>)
 8007a4c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a50:	f001 fc26 	bl	80092a0 <__assert_func>
 8007a54:	f100 0514 	add.w	r5, r0, #20
 8007a58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a5c:	462b      	mov	r3, r5
 8007a5e:	2200      	movs	r2, #0
 8007a60:	4543      	cmp	r3, r8
 8007a62:	d321      	bcc.n	8007aa8 <__multiply+0x98>
 8007a64:	f104 0314 	add.w	r3, r4, #20
 8007a68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a6c:	f109 0314 	add.w	r3, r9, #20
 8007a70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	1b3a      	subs	r2, r7, r4
 8007a78:	3a15      	subs	r2, #21
 8007a7a:	f022 0203 	bic.w	r2, r2, #3
 8007a7e:	3204      	adds	r2, #4
 8007a80:	f104 0115 	add.w	r1, r4, #21
 8007a84:	428f      	cmp	r7, r1
 8007a86:	bf38      	it	cc
 8007a88:	2204      	movcc	r2, #4
 8007a8a:	9201      	str	r2, [sp, #4]
 8007a8c:	9a02      	ldr	r2, [sp, #8]
 8007a8e:	9303      	str	r3, [sp, #12]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d80c      	bhi.n	8007aae <__multiply+0x9e>
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	dd03      	ble.n	8007aa0 <__multiply+0x90>
 8007a98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d05b      	beq.n	8007b58 <__multiply+0x148>
 8007aa0:	6106      	str	r6, [r0, #16]
 8007aa2:	b005      	add	sp, #20
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	f843 2b04 	str.w	r2, [r3], #4
 8007aac:	e7d8      	b.n	8007a60 <__multiply+0x50>
 8007aae:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ab2:	f1ba 0f00 	cmp.w	sl, #0
 8007ab6:	d024      	beq.n	8007b02 <__multiply+0xf2>
 8007ab8:	f104 0e14 	add.w	lr, r4, #20
 8007abc:	46a9      	mov	r9, r5
 8007abe:	f04f 0c00 	mov.w	ip, #0
 8007ac2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ac6:	f8d9 1000 	ldr.w	r1, [r9]
 8007aca:	fa1f fb82 	uxth.w	fp, r2
 8007ace:	b289      	uxth	r1, r1
 8007ad0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ad4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8007adc:	4461      	add	r1, ip
 8007ade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ae2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ae6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007aea:	b289      	uxth	r1, r1
 8007aec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007af0:	4577      	cmp	r7, lr
 8007af2:	f849 1b04 	str.w	r1, [r9], #4
 8007af6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007afa:	d8e2      	bhi.n	8007ac2 <__multiply+0xb2>
 8007afc:	9a01      	ldr	r2, [sp, #4]
 8007afe:	f845 c002 	str.w	ip, [r5, r2]
 8007b02:	9a03      	ldr	r2, [sp, #12]
 8007b04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	f1b9 0f00 	cmp.w	r9, #0
 8007b0e:	d021      	beq.n	8007b54 <__multiply+0x144>
 8007b10:	6829      	ldr	r1, [r5, #0]
 8007b12:	f104 0c14 	add.w	ip, r4, #20
 8007b16:	46ae      	mov	lr, r5
 8007b18:	f04f 0a00 	mov.w	sl, #0
 8007b1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b24:	fb09 220b 	mla	r2, r9, fp, r2
 8007b28:	4452      	add	r2, sl
 8007b2a:	b289      	uxth	r1, r1
 8007b2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b30:	f84e 1b04 	str.w	r1, [lr], #4
 8007b34:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b3c:	f8be 1000 	ldrh.w	r1, [lr]
 8007b40:	fb09 110a 	mla	r1, r9, sl, r1
 8007b44:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b48:	4567      	cmp	r7, ip
 8007b4a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b4e:	d8e5      	bhi.n	8007b1c <__multiply+0x10c>
 8007b50:	9a01      	ldr	r2, [sp, #4]
 8007b52:	50a9      	str	r1, [r5, r2]
 8007b54:	3504      	adds	r5, #4
 8007b56:	e799      	b.n	8007a8c <__multiply+0x7c>
 8007b58:	3e01      	subs	r6, #1
 8007b5a:	e79b      	b.n	8007a94 <__multiply+0x84>
 8007b5c:	0800b149 	.word	0x0800b149
 8007b60:	0800b15a 	.word	0x0800b15a

08007b64 <__pow5mult>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	4615      	mov	r5, r2
 8007b6a:	f012 0203 	ands.w	r2, r2, #3
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	d007      	beq.n	8007b84 <__pow5mult+0x20>
 8007b74:	4c25      	ldr	r4, [pc, #148]	; (8007c0c <__pow5mult+0xa8>)
 8007b76:	3a01      	subs	r2, #1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b7e:	f7ff fe53 	bl	8007828 <__multadd>
 8007b82:	4607      	mov	r7, r0
 8007b84:	10ad      	asrs	r5, r5, #2
 8007b86:	d03d      	beq.n	8007c04 <__pow5mult+0xa0>
 8007b88:	69f4      	ldr	r4, [r6, #28]
 8007b8a:	b97c      	cbnz	r4, 8007bac <__pow5mult+0x48>
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f7ff fd35 	bl	80075fc <malloc>
 8007b92:	4602      	mov	r2, r0
 8007b94:	61f0      	str	r0, [r6, #28]
 8007b96:	b928      	cbnz	r0, 8007ba4 <__pow5mult+0x40>
 8007b98:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <__pow5mult+0xac>)
 8007b9a:	481e      	ldr	r0, [pc, #120]	; (8007c14 <__pow5mult+0xb0>)
 8007b9c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ba0:	f001 fb7e 	bl	80092a0 <__assert_func>
 8007ba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ba8:	6004      	str	r4, [r0, #0]
 8007baa:	60c4      	str	r4, [r0, #12]
 8007bac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bb4:	b94c      	cbnz	r4, 8007bca <__pow5mult+0x66>
 8007bb6:	f240 2171 	movw	r1, #625	; 0x271
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff ff12 	bl	80079e4 <__i2b>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	6003      	str	r3, [r0, #0]
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	07eb      	lsls	r3, r5, #31
 8007bd0:	d50a      	bpl.n	8007be8 <__pow5mult+0x84>
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff1a 	bl	8007a10 <__multiply>
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4680      	mov	r8, r0
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff fdff 	bl	80077e4 <_Bfree>
 8007be6:	4647      	mov	r7, r8
 8007be8:	106d      	asrs	r5, r5, #1
 8007bea:	d00b      	beq.n	8007c04 <__pow5mult+0xa0>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	b938      	cbnz	r0, 8007c00 <__pow5mult+0x9c>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	4621      	mov	r1, r4
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff ff0b 	bl	8007a10 <__multiply>
 8007bfa:	6020      	str	r0, [r4, #0]
 8007bfc:	f8c0 9000 	str.w	r9, [r0]
 8007c00:	4604      	mov	r4, r0
 8007c02:	e7e4      	b.n	8007bce <__pow5mult+0x6a>
 8007c04:	4638      	mov	r0, r7
 8007c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0a:	bf00      	nop
 8007c0c:	0800b2a8 	.word	0x0800b2a8
 8007c10:	0800b0da 	.word	0x0800b0da
 8007c14:	0800b15a 	.word	0x0800b15a

08007c18 <__lshift>:
 8007c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	6849      	ldr	r1, [r1, #4]
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	4607      	mov	r7, r0
 8007c2a:	4691      	mov	r9, r2
 8007c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c30:	f108 0601 	add.w	r6, r8, #1
 8007c34:	42b3      	cmp	r3, r6
 8007c36:	db0b      	blt.n	8007c50 <__lshift+0x38>
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7ff fd93 	bl	8007764 <_Balloc>
 8007c3e:	4605      	mov	r5, r0
 8007c40:	b948      	cbnz	r0, 8007c56 <__lshift+0x3e>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b28      	ldr	r3, [pc, #160]	; (8007ce8 <__lshift+0xd0>)
 8007c46:	4829      	ldr	r0, [pc, #164]	; (8007cec <__lshift+0xd4>)
 8007c48:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c4c:	f001 fb28 	bl	80092a0 <__assert_func>
 8007c50:	3101      	adds	r1, #1
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	e7ee      	b.n	8007c34 <__lshift+0x1c>
 8007c56:	2300      	movs	r3, #0
 8007c58:	f100 0114 	add.w	r1, r0, #20
 8007c5c:	f100 0210 	add.w	r2, r0, #16
 8007c60:	4618      	mov	r0, r3
 8007c62:	4553      	cmp	r3, sl
 8007c64:	db33      	blt.n	8007cce <__lshift+0xb6>
 8007c66:	6920      	ldr	r0, [r4, #16]
 8007c68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c6c:	f104 0314 	add.w	r3, r4, #20
 8007c70:	f019 091f 	ands.w	r9, r9, #31
 8007c74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c7c:	d02b      	beq.n	8007cd6 <__lshift+0xbe>
 8007c7e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c82:	468a      	mov	sl, r1
 8007c84:	2200      	movs	r2, #0
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	fa00 f009 	lsl.w	r0, r0, r9
 8007c8c:	4310      	orrs	r0, r2
 8007c8e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c96:	459c      	cmp	ip, r3
 8007c98:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c9c:	d8f3      	bhi.n	8007c86 <__lshift+0x6e>
 8007c9e:	ebac 0304 	sub.w	r3, ip, r4
 8007ca2:	3b15      	subs	r3, #21
 8007ca4:	f023 0303 	bic.w	r3, r3, #3
 8007ca8:	3304      	adds	r3, #4
 8007caa:	f104 0015 	add.w	r0, r4, #21
 8007cae:	4584      	cmp	ip, r0
 8007cb0:	bf38      	it	cc
 8007cb2:	2304      	movcc	r3, #4
 8007cb4:	50ca      	str	r2, [r1, r3]
 8007cb6:	b10a      	cbz	r2, 8007cbc <__lshift+0xa4>
 8007cb8:	f108 0602 	add.w	r6, r8, #2
 8007cbc:	3e01      	subs	r6, #1
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	612e      	str	r6, [r5, #16]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f7ff fd8e 	bl	80077e4 <_Bfree>
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	e7c5      	b.n	8007c62 <__lshift+0x4a>
 8007cd6:	3904      	subs	r1, #4
 8007cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ce0:	459c      	cmp	ip, r3
 8007ce2:	d8f9      	bhi.n	8007cd8 <__lshift+0xc0>
 8007ce4:	e7ea      	b.n	8007cbc <__lshift+0xa4>
 8007ce6:	bf00      	nop
 8007ce8:	0800b149 	.word	0x0800b149
 8007cec:	0800b15a 	.word	0x0800b15a

08007cf0 <__mcmp>:
 8007cf0:	b530      	push	{r4, r5, lr}
 8007cf2:	6902      	ldr	r2, [r0, #16]
 8007cf4:	690c      	ldr	r4, [r1, #16]
 8007cf6:	1b12      	subs	r2, r2, r4
 8007cf8:	d10e      	bne.n	8007d18 <__mcmp+0x28>
 8007cfa:	f100 0314 	add.w	r3, r0, #20
 8007cfe:	3114      	adds	r1, #20
 8007d00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d10:	42a5      	cmp	r5, r4
 8007d12:	d003      	beq.n	8007d1c <__mcmp+0x2c>
 8007d14:	d305      	bcc.n	8007d22 <__mcmp+0x32>
 8007d16:	2201      	movs	r2, #1
 8007d18:	4610      	mov	r0, r2
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	d3f3      	bcc.n	8007d08 <__mcmp+0x18>
 8007d20:	e7fa      	b.n	8007d18 <__mcmp+0x28>
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295
 8007d26:	e7f7      	b.n	8007d18 <__mcmp+0x28>

08007d28 <__mdiff>:
 8007d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	4606      	mov	r6, r0
 8007d30:	4611      	mov	r1, r2
 8007d32:	4620      	mov	r0, r4
 8007d34:	4690      	mov	r8, r2
 8007d36:	f7ff ffdb 	bl	8007cf0 <__mcmp>
 8007d3a:	1e05      	subs	r5, r0, #0
 8007d3c:	d110      	bne.n	8007d60 <__mdiff+0x38>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff fd0f 	bl	8007764 <_Balloc>
 8007d46:	b930      	cbnz	r0, 8007d56 <__mdiff+0x2e>
 8007d48:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <__mdiff+0x10c>)
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	f240 2137 	movw	r1, #567	; 0x237
 8007d50:	4839      	ldr	r0, [pc, #228]	; (8007e38 <__mdiff+0x110>)
 8007d52:	f001 faa5 	bl	80092a0 <__assert_func>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	bfa4      	itt	ge
 8007d62:	4643      	movge	r3, r8
 8007d64:	46a0      	movge	r8, r4
 8007d66:	4630      	mov	r0, r6
 8007d68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d6c:	bfa6      	itte	ge
 8007d6e:	461c      	movge	r4, r3
 8007d70:	2500      	movge	r5, #0
 8007d72:	2501      	movlt	r5, #1
 8007d74:	f7ff fcf6 	bl	8007764 <_Balloc>
 8007d78:	b920      	cbnz	r0, 8007d84 <__mdiff+0x5c>
 8007d7a:	4b2e      	ldr	r3, [pc, #184]	; (8007e34 <__mdiff+0x10c>)
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f240 2145 	movw	r1, #581	; 0x245
 8007d82:	e7e5      	b.n	8007d50 <__mdiff+0x28>
 8007d84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d88:	6926      	ldr	r6, [r4, #16]
 8007d8a:	60c5      	str	r5, [r0, #12]
 8007d8c:	f104 0914 	add.w	r9, r4, #20
 8007d90:	f108 0514 	add.w	r5, r8, #20
 8007d94:	f100 0e14 	add.w	lr, r0, #20
 8007d98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007da0:	f108 0210 	add.w	r2, r8, #16
 8007da4:	46f2      	mov	sl, lr
 8007da6:	2100      	movs	r1, #0
 8007da8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007db0:	fa11 f88b 	uxtah	r8, r1, fp
 8007db4:	b299      	uxth	r1, r3
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	eba8 0801 	sub.w	r8, r8, r1
 8007dbc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dc0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007dc4:	fa1f f888 	uxth.w	r8, r8
 8007dc8:	1419      	asrs	r1, r3, #16
 8007dca:	454e      	cmp	r6, r9
 8007dcc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007dd0:	f84a 3b04 	str.w	r3, [sl], #4
 8007dd4:	d8e8      	bhi.n	8007da8 <__mdiff+0x80>
 8007dd6:	1b33      	subs	r3, r6, r4
 8007dd8:	3b15      	subs	r3, #21
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	3304      	adds	r3, #4
 8007de0:	3415      	adds	r4, #21
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	bf38      	it	cc
 8007de6:	2304      	movcc	r3, #4
 8007de8:	441d      	add	r5, r3
 8007dea:	4473      	add	r3, lr
 8007dec:	469e      	mov	lr, r3
 8007dee:	462e      	mov	r6, r5
 8007df0:	4566      	cmp	r6, ip
 8007df2:	d30e      	bcc.n	8007e12 <__mdiff+0xea>
 8007df4:	f10c 0203 	add.w	r2, ip, #3
 8007df8:	1b52      	subs	r2, r2, r5
 8007dfa:	f022 0203 	bic.w	r2, r2, #3
 8007dfe:	3d03      	subs	r5, #3
 8007e00:	45ac      	cmp	ip, r5
 8007e02:	bf38      	it	cc
 8007e04:	2200      	movcc	r2, #0
 8007e06:	4413      	add	r3, r2
 8007e08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e0c:	b17a      	cbz	r2, 8007e2e <__mdiff+0x106>
 8007e0e:	6107      	str	r7, [r0, #16]
 8007e10:	e7a4      	b.n	8007d5c <__mdiff+0x34>
 8007e12:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e16:	fa11 f288 	uxtah	r2, r1, r8
 8007e1a:	1414      	asrs	r4, r2, #16
 8007e1c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e20:	b292      	uxth	r2, r2
 8007e22:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e26:	f84e 2b04 	str.w	r2, [lr], #4
 8007e2a:	1421      	asrs	r1, r4, #16
 8007e2c:	e7e0      	b.n	8007df0 <__mdiff+0xc8>
 8007e2e:	3f01      	subs	r7, #1
 8007e30:	e7ea      	b.n	8007e08 <__mdiff+0xe0>
 8007e32:	bf00      	nop
 8007e34:	0800b149 	.word	0x0800b149
 8007e38:	0800b15a 	.word	0x0800b15a

08007e3c <__ulp>:
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	ed8d 0b00 	vstr	d0, [sp]
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	4b0f      	ldr	r3, [pc, #60]	; (8007e84 <__ulp+0x48>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dc08      	bgt.n	8007e62 <__ulp+0x26>
 8007e50:	425b      	negs	r3, r3
 8007e52:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007e56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e5a:	da04      	bge.n	8007e66 <__ulp+0x2a>
 8007e5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e60:	4113      	asrs	r3, r2
 8007e62:	2200      	movs	r2, #0
 8007e64:	e008      	b.n	8007e78 <__ulp+0x3c>
 8007e66:	f1a2 0314 	sub.w	r3, r2, #20
 8007e6a:	2b1e      	cmp	r3, #30
 8007e6c:	bfda      	itte	le
 8007e6e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007e72:	40da      	lsrle	r2, r3
 8007e74:	2201      	movgt	r2, #1
 8007e76:	2300      	movs	r3, #0
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	ec41 0b10 	vmov	d0, r0, r1
 8007e80:	b002      	add	sp, #8
 8007e82:	4770      	bx	lr
 8007e84:	7ff00000 	.word	0x7ff00000

08007e88 <__b2d>:
 8007e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8c:	6906      	ldr	r6, [r0, #16]
 8007e8e:	f100 0814 	add.w	r8, r0, #20
 8007e92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e96:	1f37      	subs	r7, r6, #4
 8007e98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7ff fd53 	bl	8007948 <__hi0bits>
 8007ea2:	f1c0 0320 	rsb	r3, r0, #32
 8007ea6:	280a      	cmp	r0, #10
 8007ea8:	600b      	str	r3, [r1, #0]
 8007eaa:	491b      	ldr	r1, [pc, #108]	; (8007f18 <__b2d+0x90>)
 8007eac:	dc15      	bgt.n	8007eda <__b2d+0x52>
 8007eae:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8007eb6:	45b8      	cmp	r8, r7
 8007eb8:	ea43 0501 	orr.w	r5, r3, r1
 8007ebc:	bf34      	ite	cc
 8007ebe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ec2:	2300      	movcs	r3, #0
 8007ec4:	3015      	adds	r0, #21
 8007ec6:	fa02 f000 	lsl.w	r0, r2, r0
 8007eca:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ece:	4303      	orrs	r3, r0
 8007ed0:	461c      	mov	r4, r3
 8007ed2:	ec45 4b10 	vmov	d0, r4, r5
 8007ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eda:	45b8      	cmp	r8, r7
 8007edc:	bf3a      	itte	cc
 8007ede:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ee2:	f1a6 0708 	subcc.w	r7, r6, #8
 8007ee6:	2300      	movcs	r3, #0
 8007ee8:	380b      	subs	r0, #11
 8007eea:	d012      	beq.n	8007f12 <__b2d+0x8a>
 8007eec:	f1c0 0120 	rsb	r1, r0, #32
 8007ef0:	fa23 f401 	lsr.w	r4, r3, r1
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4322      	orrs	r2, r4
 8007ef8:	4547      	cmp	r7, r8
 8007efa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007efe:	bf8c      	ite	hi
 8007f00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f04:	2200      	movls	r2, #0
 8007f06:	4083      	lsls	r3, r0
 8007f08:	40ca      	lsrs	r2, r1
 8007f0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	e7de      	b.n	8007ed0 <__b2d+0x48>
 8007f12:	ea42 0501 	orr.w	r5, r2, r1
 8007f16:	e7db      	b.n	8007ed0 <__b2d+0x48>
 8007f18:	3ff00000 	.word	0x3ff00000

08007f1c <__d2b>:
 8007f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	460f      	mov	r7, r1
 8007f22:	2101      	movs	r1, #1
 8007f24:	ec59 8b10 	vmov	r8, r9, d0
 8007f28:	4616      	mov	r6, r2
 8007f2a:	f7ff fc1b 	bl	8007764 <_Balloc>
 8007f2e:	4604      	mov	r4, r0
 8007f30:	b930      	cbnz	r0, 8007f40 <__d2b+0x24>
 8007f32:	4602      	mov	r2, r0
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <__d2b+0xac>)
 8007f36:	4825      	ldr	r0, [pc, #148]	; (8007fcc <__d2b+0xb0>)
 8007f38:	f240 310f 	movw	r1, #783	; 0x30f
 8007f3c:	f001 f9b0 	bl	80092a0 <__assert_func>
 8007f40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f48:	bb2d      	cbnz	r5, 8007f96 <__d2b+0x7a>
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f50:	d026      	beq.n	8007fa0 <__d2b+0x84>
 8007f52:	4668      	mov	r0, sp
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	f7ff fd17 	bl	8007988 <__lo0bits>
 8007f5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f5e:	b1e8      	cbz	r0, 8007f9c <__d2b+0x80>
 8007f60:	f1c0 0320 	rsb	r3, r0, #32
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	430b      	orrs	r3, r1
 8007f6a:	40c2      	lsrs	r2, r0
 8007f6c:	6163      	str	r3, [r4, #20]
 8007f6e:	9201      	str	r2, [sp, #4]
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	61a3      	str	r3, [r4, #24]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf14      	ite	ne
 8007f78:	2202      	movne	r2, #2
 8007f7a:	2201      	moveq	r2, #1
 8007f7c:	6122      	str	r2, [r4, #16]
 8007f7e:	b1bd      	cbz	r5, 8007fb0 <__d2b+0x94>
 8007f80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f84:	4405      	add	r5, r0
 8007f86:	603d      	str	r5, [r7, #0]
 8007f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f8c:	6030      	str	r0, [r6, #0]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	b003      	add	sp, #12
 8007f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f9a:	e7d6      	b.n	8007f4a <__d2b+0x2e>
 8007f9c:	6161      	str	r1, [r4, #20]
 8007f9e:	e7e7      	b.n	8007f70 <__d2b+0x54>
 8007fa0:	a801      	add	r0, sp, #4
 8007fa2:	f7ff fcf1 	bl	8007988 <__lo0bits>
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	6163      	str	r3, [r4, #20]
 8007faa:	3020      	adds	r0, #32
 8007fac:	2201      	movs	r2, #1
 8007fae:	e7e5      	b.n	8007f7c <__d2b+0x60>
 8007fb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007fb8:	6038      	str	r0, [r7, #0]
 8007fba:	6918      	ldr	r0, [r3, #16]
 8007fbc:	f7ff fcc4 	bl	8007948 <__hi0bits>
 8007fc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fc4:	e7e2      	b.n	8007f8c <__d2b+0x70>
 8007fc6:	bf00      	nop
 8007fc8:	0800b149 	.word	0x0800b149
 8007fcc:	0800b15a 	.word	0x0800b15a

08007fd0 <__ratio>:
 8007fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	4688      	mov	r8, r1
 8007fd6:	4669      	mov	r1, sp
 8007fd8:	4681      	mov	r9, r0
 8007fda:	f7ff ff55 	bl	8007e88 <__b2d>
 8007fde:	a901      	add	r1, sp, #4
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	ec55 4b10 	vmov	r4, r5, d0
 8007fe6:	f7ff ff4f 	bl	8007e88 <__b2d>
 8007fea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ff2:	eba3 0c02 	sub.w	ip, r3, r2
 8007ff6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	2b00      	cmp	r3, #0
 8008006:	bfd6      	itet	le
 8008008:	460a      	movle	r2, r1
 800800a:	462a      	movgt	r2, r5
 800800c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008010:	468b      	mov	fp, r1
 8008012:	462f      	mov	r7, r5
 8008014:	bfd4      	ite	le
 8008016:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800801a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800801e:	4620      	mov	r0, r4
 8008020:	ee10 2a10 	vmov	r2, s0
 8008024:	465b      	mov	r3, fp
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 fc18 	bl	800085c <__aeabi_ddiv>
 800802c:	ec41 0b10 	vmov	d0, r0, r1
 8008030:	b003      	add	sp, #12
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008036 <__copybits>:
 8008036:	3901      	subs	r1, #1
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	1149      	asrs	r1, r1, #5
 800803c:	6914      	ldr	r4, [r2, #16]
 800803e:	3101      	adds	r1, #1
 8008040:	f102 0314 	add.w	r3, r2, #20
 8008044:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008048:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800804c:	1f05      	subs	r5, r0, #4
 800804e:	42a3      	cmp	r3, r4
 8008050:	d30c      	bcc.n	800806c <__copybits+0x36>
 8008052:	1aa3      	subs	r3, r4, r2
 8008054:	3b11      	subs	r3, #17
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	3211      	adds	r2, #17
 800805c:	42a2      	cmp	r2, r4
 800805e:	bf88      	it	hi
 8008060:	2300      	movhi	r3, #0
 8008062:	4418      	add	r0, r3
 8008064:	2300      	movs	r3, #0
 8008066:	4288      	cmp	r0, r1
 8008068:	d305      	bcc.n	8008076 <__copybits+0x40>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008070:	f845 6f04 	str.w	r6, [r5, #4]!
 8008074:	e7eb      	b.n	800804e <__copybits+0x18>
 8008076:	f840 3b04 	str.w	r3, [r0], #4
 800807a:	e7f4      	b.n	8008066 <__copybits+0x30>

0800807c <__any_on>:
 800807c:	f100 0214 	add.w	r2, r0, #20
 8008080:	6900      	ldr	r0, [r0, #16]
 8008082:	114b      	asrs	r3, r1, #5
 8008084:	4298      	cmp	r0, r3
 8008086:	b510      	push	{r4, lr}
 8008088:	db11      	blt.n	80080ae <__any_on+0x32>
 800808a:	dd0a      	ble.n	80080a2 <__any_on+0x26>
 800808c:	f011 011f 	ands.w	r1, r1, #31
 8008090:	d007      	beq.n	80080a2 <__any_on+0x26>
 8008092:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008096:	fa24 f001 	lsr.w	r0, r4, r1
 800809a:	fa00 f101 	lsl.w	r1, r0, r1
 800809e:	428c      	cmp	r4, r1
 80080a0:	d10b      	bne.n	80080ba <__any_on+0x3e>
 80080a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d803      	bhi.n	80080b2 <__any_on+0x36>
 80080aa:	2000      	movs	r0, #0
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	4603      	mov	r3, r0
 80080b0:	e7f7      	b.n	80080a2 <__any_on+0x26>
 80080b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d0f5      	beq.n	80080a6 <__any_on+0x2a>
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7f6      	b.n	80080ac <__any_on+0x30>

080080be <sulp>:
 80080be:	b570      	push	{r4, r5, r6, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	ec45 4b10 	vmov	d0, r4, r5
 80080c8:	4616      	mov	r6, r2
 80080ca:	f7ff feb7 	bl	8007e3c <__ulp>
 80080ce:	ec51 0b10 	vmov	r0, r1, d0
 80080d2:	b17e      	cbz	r6, 80080f4 <sulp+0x36>
 80080d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd09      	ble.n	80080f4 <sulp+0x36>
 80080e0:	051b      	lsls	r3, r3, #20
 80080e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080e6:	2400      	movs	r4, #0
 80080e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	f7f8 fa8a 	bl	8000608 <__aeabi_dmul>
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080f8 <_strtod_l>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b02 	vpush	{d8}
 8008100:	b09b      	sub	sp, #108	; 0x6c
 8008102:	4604      	mov	r4, r0
 8008104:	9213      	str	r2, [sp, #76]	; 0x4c
 8008106:	2200      	movs	r2, #0
 8008108:	9216      	str	r2, [sp, #88]	; 0x58
 800810a:	460d      	mov	r5, r1
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	460a      	mov	r2, r1
 8008116:	9215      	str	r2, [sp, #84]	; 0x54
 8008118:	7811      	ldrb	r1, [r2, #0]
 800811a:	292b      	cmp	r1, #43	; 0x2b
 800811c:	d04c      	beq.n	80081b8 <_strtod_l+0xc0>
 800811e:	d83a      	bhi.n	8008196 <_strtod_l+0x9e>
 8008120:	290d      	cmp	r1, #13
 8008122:	d834      	bhi.n	800818e <_strtod_l+0x96>
 8008124:	2908      	cmp	r1, #8
 8008126:	d834      	bhi.n	8008192 <_strtod_l+0x9a>
 8008128:	2900      	cmp	r1, #0
 800812a:	d03d      	beq.n	80081a8 <_strtod_l+0xb0>
 800812c:	2200      	movs	r2, #0
 800812e:	920a      	str	r2, [sp, #40]	; 0x28
 8008130:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008132:	7832      	ldrb	r2, [r6, #0]
 8008134:	2a30      	cmp	r2, #48	; 0x30
 8008136:	f040 80b4 	bne.w	80082a2 <_strtod_l+0x1aa>
 800813a:	7872      	ldrb	r2, [r6, #1]
 800813c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008140:	2a58      	cmp	r2, #88	; 0x58
 8008142:	d170      	bne.n	8008226 <_strtod_l+0x12e>
 8008144:	9302      	str	r3, [sp, #8]
 8008146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	ab16      	add	r3, sp, #88	; 0x58
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4a8e      	ldr	r2, [pc, #568]	; (8008388 <_strtod_l+0x290>)
 8008150:	ab17      	add	r3, sp, #92	; 0x5c
 8008152:	a915      	add	r1, sp, #84	; 0x54
 8008154:	4620      	mov	r0, r4
 8008156:	f001 f93f 	bl	80093d8 <__gethex>
 800815a:	f010 070f 	ands.w	r7, r0, #15
 800815e:	4605      	mov	r5, r0
 8008160:	d005      	beq.n	800816e <_strtod_l+0x76>
 8008162:	2f06      	cmp	r7, #6
 8008164:	d12a      	bne.n	80081bc <_strtod_l+0xc4>
 8008166:	3601      	adds	r6, #1
 8008168:	2300      	movs	r3, #0
 800816a:	9615      	str	r6, [sp, #84]	; 0x54
 800816c:	930a      	str	r3, [sp, #40]	; 0x28
 800816e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008170:	2b00      	cmp	r3, #0
 8008172:	f040 857f 	bne.w	8008c74 <_strtod_l+0xb7c>
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	b1db      	cbz	r3, 80081b2 <_strtod_l+0xba>
 800817a:	4642      	mov	r2, r8
 800817c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008180:	ec43 2b10 	vmov	d0, r2, r3
 8008184:	b01b      	add	sp, #108	; 0x6c
 8008186:	ecbd 8b02 	vpop	{d8}
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	2920      	cmp	r1, #32
 8008190:	d1cc      	bne.n	800812c <_strtod_l+0x34>
 8008192:	3201      	adds	r2, #1
 8008194:	e7bf      	b.n	8008116 <_strtod_l+0x1e>
 8008196:	292d      	cmp	r1, #45	; 0x2d
 8008198:	d1c8      	bne.n	800812c <_strtod_l+0x34>
 800819a:	2101      	movs	r1, #1
 800819c:	910a      	str	r1, [sp, #40]	; 0x28
 800819e:	1c51      	adds	r1, r2, #1
 80081a0:	9115      	str	r1, [sp, #84]	; 0x54
 80081a2:	7852      	ldrb	r2, [r2, #1]
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	d1c3      	bne.n	8008130 <_strtod_l+0x38>
 80081a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081aa:	9515      	str	r5, [sp, #84]	; 0x54
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 855f 	bne.w	8008c70 <_strtod_l+0xb78>
 80081b2:	4642      	mov	r2, r8
 80081b4:	464b      	mov	r3, r9
 80081b6:	e7e3      	b.n	8008180 <_strtod_l+0x88>
 80081b8:	2100      	movs	r1, #0
 80081ba:	e7ef      	b.n	800819c <_strtod_l+0xa4>
 80081bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081be:	b13a      	cbz	r2, 80081d0 <_strtod_l+0xd8>
 80081c0:	2135      	movs	r1, #53	; 0x35
 80081c2:	a818      	add	r0, sp, #96	; 0x60
 80081c4:	f7ff ff37 	bl	8008036 <__copybits>
 80081c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff fb0a 	bl	80077e4 <_Bfree>
 80081d0:	3f01      	subs	r7, #1
 80081d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081d4:	2f04      	cmp	r7, #4
 80081d6:	d806      	bhi.n	80081e6 <_strtod_l+0xee>
 80081d8:	e8df f007 	tbb	[pc, r7]
 80081dc:	201d0314 	.word	0x201d0314
 80081e0:	14          	.byte	0x14
 80081e1:	00          	.byte	0x00
 80081e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80081e6:	05e9      	lsls	r1, r5, #23
 80081e8:	bf48      	it	mi
 80081ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80081ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f2:	0d1b      	lsrs	r3, r3, #20
 80081f4:	051b      	lsls	r3, r3, #20
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1b9      	bne.n	800816e <_strtod_l+0x76>
 80081fa:	f7fe fb07 	bl	800680c <__errno>
 80081fe:	2322      	movs	r3, #34	; 0x22
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	e7b4      	b.n	800816e <_strtod_l+0x76>
 8008204:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008208:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800820c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008210:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008214:	e7e7      	b.n	80081e6 <_strtod_l+0xee>
 8008216:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008390 <_strtod_l+0x298>
 800821a:	e7e4      	b.n	80081e6 <_strtod_l+0xee>
 800821c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008220:	f04f 38ff 	mov.w	r8, #4294967295
 8008224:	e7df      	b.n	80081e6 <_strtod_l+0xee>
 8008226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	9215      	str	r2, [sp, #84]	; 0x54
 800822c:	785b      	ldrb	r3, [r3, #1]
 800822e:	2b30      	cmp	r3, #48	; 0x30
 8008230:	d0f9      	beq.n	8008226 <_strtod_l+0x12e>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d09b      	beq.n	800816e <_strtod_l+0x76>
 8008236:	2301      	movs	r3, #1
 8008238:	f04f 0a00 	mov.w	sl, #0
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008240:	930b      	str	r3, [sp, #44]	; 0x2c
 8008242:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008246:	46d3      	mov	fp, sl
 8008248:	220a      	movs	r2, #10
 800824a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800824c:	7806      	ldrb	r6, [r0, #0]
 800824e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008252:	b2d9      	uxtb	r1, r3
 8008254:	2909      	cmp	r1, #9
 8008256:	d926      	bls.n	80082a6 <_strtod_l+0x1ae>
 8008258:	494c      	ldr	r1, [pc, #304]	; (800838c <_strtod_l+0x294>)
 800825a:	2201      	movs	r2, #1
 800825c:	f000 ffe6 	bl	800922c <strncmp>
 8008260:	2800      	cmp	r0, #0
 8008262:	d030      	beq.n	80082c6 <_strtod_l+0x1ce>
 8008264:	2000      	movs	r0, #0
 8008266:	4632      	mov	r2, r6
 8008268:	9005      	str	r0, [sp, #20]
 800826a:	465e      	mov	r6, fp
 800826c:	4603      	mov	r3, r0
 800826e:	2a65      	cmp	r2, #101	; 0x65
 8008270:	d001      	beq.n	8008276 <_strtod_l+0x17e>
 8008272:	2a45      	cmp	r2, #69	; 0x45
 8008274:	d113      	bne.n	800829e <_strtod_l+0x1a6>
 8008276:	b91e      	cbnz	r6, 8008280 <_strtod_l+0x188>
 8008278:	9a04      	ldr	r2, [sp, #16]
 800827a:	4302      	orrs	r2, r0
 800827c:	d094      	beq.n	80081a8 <_strtod_l+0xb0>
 800827e:	2600      	movs	r6, #0
 8008280:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008282:	1c6a      	adds	r2, r5, #1
 8008284:	9215      	str	r2, [sp, #84]	; 0x54
 8008286:	786a      	ldrb	r2, [r5, #1]
 8008288:	2a2b      	cmp	r2, #43	; 0x2b
 800828a:	d074      	beq.n	8008376 <_strtod_l+0x27e>
 800828c:	2a2d      	cmp	r2, #45	; 0x2d
 800828e:	d078      	beq.n	8008382 <_strtod_l+0x28a>
 8008290:	f04f 0c00 	mov.w	ip, #0
 8008294:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008298:	2909      	cmp	r1, #9
 800829a:	d97f      	bls.n	800839c <_strtod_l+0x2a4>
 800829c:	9515      	str	r5, [sp, #84]	; 0x54
 800829e:	2700      	movs	r7, #0
 80082a0:	e09e      	b.n	80083e0 <_strtod_l+0x2e8>
 80082a2:	2300      	movs	r3, #0
 80082a4:	e7c8      	b.n	8008238 <_strtod_l+0x140>
 80082a6:	f1bb 0f08 	cmp.w	fp, #8
 80082aa:	bfd8      	it	le
 80082ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80082ae:	f100 0001 	add.w	r0, r0, #1
 80082b2:	bfda      	itte	le
 80082b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80082b8:	9309      	strle	r3, [sp, #36]	; 0x24
 80082ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80082be:	f10b 0b01 	add.w	fp, fp, #1
 80082c2:	9015      	str	r0, [sp, #84]	; 0x54
 80082c4:	e7c1      	b.n	800824a <_strtod_l+0x152>
 80082c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	9215      	str	r2, [sp, #84]	; 0x54
 80082cc:	785a      	ldrb	r2, [r3, #1]
 80082ce:	f1bb 0f00 	cmp.w	fp, #0
 80082d2:	d037      	beq.n	8008344 <_strtod_l+0x24c>
 80082d4:	9005      	str	r0, [sp, #20]
 80082d6:	465e      	mov	r6, fp
 80082d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d912      	bls.n	8008306 <_strtod_l+0x20e>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e7c4      	b.n	800826e <_strtod_l+0x176>
 80082e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	9215      	str	r2, [sp, #84]	; 0x54
 80082ea:	785a      	ldrb	r2, [r3, #1]
 80082ec:	3001      	adds	r0, #1
 80082ee:	2a30      	cmp	r2, #48	; 0x30
 80082f0:	d0f8      	beq.n	80082e4 <_strtod_l+0x1ec>
 80082f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	f200 84c1 	bhi.w	8008c7e <_strtod_l+0xb86>
 80082fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082fe:	9005      	str	r0, [sp, #20]
 8008300:	2000      	movs	r0, #0
 8008302:	930b      	str	r3, [sp, #44]	; 0x2c
 8008304:	4606      	mov	r6, r0
 8008306:	3a30      	subs	r2, #48	; 0x30
 8008308:	f100 0301 	add.w	r3, r0, #1
 800830c:	d014      	beq.n	8008338 <_strtod_l+0x240>
 800830e:	9905      	ldr	r1, [sp, #20]
 8008310:	4419      	add	r1, r3
 8008312:	9105      	str	r1, [sp, #20]
 8008314:	4633      	mov	r3, r6
 8008316:	eb00 0c06 	add.w	ip, r0, r6
 800831a:	210a      	movs	r1, #10
 800831c:	4563      	cmp	r3, ip
 800831e:	d113      	bne.n	8008348 <_strtod_l+0x250>
 8008320:	1833      	adds	r3, r6, r0
 8008322:	2b08      	cmp	r3, #8
 8008324:	f106 0601 	add.w	r6, r6, #1
 8008328:	4406      	add	r6, r0
 800832a:	dc1a      	bgt.n	8008362 <_strtod_l+0x26a>
 800832c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832e:	230a      	movs	r3, #10
 8008330:	fb03 2301 	mla	r3, r3, r1, r2
 8008334:	9309      	str	r3, [sp, #36]	; 0x24
 8008336:	2300      	movs	r3, #0
 8008338:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800833a:	1c51      	adds	r1, r2, #1
 800833c:	9115      	str	r1, [sp, #84]	; 0x54
 800833e:	7852      	ldrb	r2, [r2, #1]
 8008340:	4618      	mov	r0, r3
 8008342:	e7c9      	b.n	80082d8 <_strtod_l+0x1e0>
 8008344:	4658      	mov	r0, fp
 8008346:	e7d2      	b.n	80082ee <_strtod_l+0x1f6>
 8008348:	2b08      	cmp	r3, #8
 800834a:	f103 0301 	add.w	r3, r3, #1
 800834e:	dc03      	bgt.n	8008358 <_strtod_l+0x260>
 8008350:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008352:	434f      	muls	r7, r1
 8008354:	9709      	str	r7, [sp, #36]	; 0x24
 8008356:	e7e1      	b.n	800831c <_strtod_l+0x224>
 8008358:	2b10      	cmp	r3, #16
 800835a:	bfd8      	it	le
 800835c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008360:	e7dc      	b.n	800831c <_strtod_l+0x224>
 8008362:	2e10      	cmp	r6, #16
 8008364:	bfdc      	itt	le
 8008366:	230a      	movle	r3, #10
 8008368:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800836c:	e7e3      	b.n	8008336 <_strtod_l+0x23e>
 800836e:	2300      	movs	r3, #0
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	2301      	movs	r3, #1
 8008374:	e780      	b.n	8008278 <_strtod_l+0x180>
 8008376:	f04f 0c00 	mov.w	ip, #0
 800837a:	1caa      	adds	r2, r5, #2
 800837c:	9215      	str	r2, [sp, #84]	; 0x54
 800837e:	78aa      	ldrb	r2, [r5, #2]
 8008380:	e788      	b.n	8008294 <_strtod_l+0x19c>
 8008382:	f04f 0c01 	mov.w	ip, #1
 8008386:	e7f8      	b.n	800837a <_strtod_l+0x282>
 8008388:	0800b2b8 	.word	0x0800b2b8
 800838c:	0800b2b4 	.word	0x0800b2b4
 8008390:	7ff00000 	.word	0x7ff00000
 8008394:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008396:	1c51      	adds	r1, r2, #1
 8008398:	9115      	str	r1, [sp, #84]	; 0x54
 800839a:	7852      	ldrb	r2, [r2, #1]
 800839c:	2a30      	cmp	r2, #48	; 0x30
 800839e:	d0f9      	beq.n	8008394 <_strtod_l+0x29c>
 80083a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80083a4:	2908      	cmp	r1, #8
 80083a6:	f63f af7a 	bhi.w	800829e <_strtod_l+0x1a6>
 80083aa:	3a30      	subs	r2, #48	; 0x30
 80083ac:	9208      	str	r2, [sp, #32]
 80083ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b0:	920c      	str	r2, [sp, #48]	; 0x30
 80083b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083b4:	1c57      	adds	r7, r2, #1
 80083b6:	9715      	str	r7, [sp, #84]	; 0x54
 80083b8:	7852      	ldrb	r2, [r2, #1]
 80083ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80083be:	f1be 0f09 	cmp.w	lr, #9
 80083c2:	d938      	bls.n	8008436 <_strtod_l+0x33e>
 80083c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083c6:	1a7f      	subs	r7, r7, r1
 80083c8:	2f08      	cmp	r7, #8
 80083ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80083ce:	dc03      	bgt.n	80083d8 <_strtod_l+0x2e0>
 80083d0:	9908      	ldr	r1, [sp, #32]
 80083d2:	428f      	cmp	r7, r1
 80083d4:	bfa8      	it	ge
 80083d6:	460f      	movge	r7, r1
 80083d8:	f1bc 0f00 	cmp.w	ip, #0
 80083dc:	d000      	beq.n	80083e0 <_strtod_l+0x2e8>
 80083de:	427f      	negs	r7, r7
 80083e0:	2e00      	cmp	r6, #0
 80083e2:	d14f      	bne.n	8008484 <_strtod_l+0x38c>
 80083e4:	9904      	ldr	r1, [sp, #16]
 80083e6:	4301      	orrs	r1, r0
 80083e8:	f47f aec1 	bne.w	800816e <_strtod_l+0x76>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f aedb 	bne.w	80081a8 <_strtod_l+0xb0>
 80083f2:	2a69      	cmp	r2, #105	; 0x69
 80083f4:	d029      	beq.n	800844a <_strtod_l+0x352>
 80083f6:	dc26      	bgt.n	8008446 <_strtod_l+0x34e>
 80083f8:	2a49      	cmp	r2, #73	; 0x49
 80083fa:	d026      	beq.n	800844a <_strtod_l+0x352>
 80083fc:	2a4e      	cmp	r2, #78	; 0x4e
 80083fe:	f47f aed3 	bne.w	80081a8 <_strtod_l+0xb0>
 8008402:	499b      	ldr	r1, [pc, #620]	; (8008670 <_strtod_l+0x578>)
 8008404:	a815      	add	r0, sp, #84	; 0x54
 8008406:	f001 fa27 	bl	8009858 <__match>
 800840a:	2800      	cmp	r0, #0
 800840c:	f43f aecc 	beq.w	80081a8 <_strtod_l+0xb0>
 8008410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b28      	cmp	r3, #40	; 0x28
 8008416:	d12f      	bne.n	8008478 <_strtod_l+0x380>
 8008418:	4996      	ldr	r1, [pc, #600]	; (8008674 <_strtod_l+0x57c>)
 800841a:	aa18      	add	r2, sp, #96	; 0x60
 800841c:	a815      	add	r0, sp, #84	; 0x54
 800841e:	f001 fa2f 	bl	8009880 <__hexnan>
 8008422:	2805      	cmp	r0, #5
 8008424:	d128      	bne.n	8008478 <_strtod_l+0x380>
 8008426:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008428:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800842c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008430:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008434:	e69b      	b.n	800816e <_strtod_l+0x76>
 8008436:	9f08      	ldr	r7, [sp, #32]
 8008438:	210a      	movs	r1, #10
 800843a:	fb01 2107 	mla	r1, r1, r7, r2
 800843e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008442:	9208      	str	r2, [sp, #32]
 8008444:	e7b5      	b.n	80083b2 <_strtod_l+0x2ba>
 8008446:	2a6e      	cmp	r2, #110	; 0x6e
 8008448:	e7d9      	b.n	80083fe <_strtod_l+0x306>
 800844a:	498b      	ldr	r1, [pc, #556]	; (8008678 <_strtod_l+0x580>)
 800844c:	a815      	add	r0, sp, #84	; 0x54
 800844e:	f001 fa03 	bl	8009858 <__match>
 8008452:	2800      	cmp	r0, #0
 8008454:	f43f aea8 	beq.w	80081a8 <_strtod_l+0xb0>
 8008458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845a:	4988      	ldr	r1, [pc, #544]	; (800867c <_strtod_l+0x584>)
 800845c:	3b01      	subs	r3, #1
 800845e:	a815      	add	r0, sp, #84	; 0x54
 8008460:	9315      	str	r3, [sp, #84]	; 0x54
 8008462:	f001 f9f9 	bl	8009858 <__match>
 8008466:	b910      	cbnz	r0, 800846e <_strtod_l+0x376>
 8008468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846a:	3301      	adds	r3, #1
 800846c:	9315      	str	r3, [sp, #84]	; 0x54
 800846e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800868c <_strtod_l+0x594>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	e67a      	b.n	800816e <_strtod_l+0x76>
 8008478:	4881      	ldr	r0, [pc, #516]	; (8008680 <_strtod_l+0x588>)
 800847a:	f000 ff09 	bl	8009290 <nan>
 800847e:	ec59 8b10 	vmov	r8, r9, d0
 8008482:	e674      	b.n	800816e <_strtod_l+0x76>
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008488:	1afb      	subs	r3, r7, r3
 800848a:	f1bb 0f00 	cmp.w	fp, #0
 800848e:	bf08      	it	eq
 8008490:	46b3      	moveq	fp, r6
 8008492:	2e10      	cmp	r6, #16
 8008494:	9308      	str	r3, [sp, #32]
 8008496:	4635      	mov	r5, r6
 8008498:	bfa8      	it	ge
 800849a:	2510      	movge	r5, #16
 800849c:	f7f8 f83a 	bl	8000514 <__aeabi_ui2d>
 80084a0:	2e09      	cmp	r6, #9
 80084a2:	4680      	mov	r8, r0
 80084a4:	4689      	mov	r9, r1
 80084a6:	dd13      	ble.n	80084d0 <_strtod_l+0x3d8>
 80084a8:	4b76      	ldr	r3, [pc, #472]	; (8008684 <_strtod_l+0x58c>)
 80084aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80084ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084b2:	f7f8 f8a9 	bl	8000608 <__aeabi_dmul>
 80084b6:	4680      	mov	r8, r0
 80084b8:	4650      	mov	r0, sl
 80084ba:	4689      	mov	r9, r1
 80084bc:	f7f8 f82a 	bl	8000514 <__aeabi_ui2d>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	f7f7 fee8 	bl	800029c <__adddf3>
 80084cc:	4680      	mov	r8, r0
 80084ce:	4689      	mov	r9, r1
 80084d0:	2e0f      	cmp	r6, #15
 80084d2:	dc38      	bgt.n	8008546 <_strtod_l+0x44e>
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f43f ae49 	beq.w	800816e <_strtod_l+0x76>
 80084dc:	dd24      	ble.n	8008528 <_strtod_l+0x430>
 80084de:	2b16      	cmp	r3, #22
 80084e0:	dc0b      	bgt.n	80084fa <_strtod_l+0x402>
 80084e2:	4968      	ldr	r1, [pc, #416]	; (8008684 <_strtod_l+0x58c>)
 80084e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	f7f8 f88a 	bl	8000608 <__aeabi_dmul>
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	e639      	b.n	800816e <_strtod_l+0x76>
 80084fa:	9a08      	ldr	r2, [sp, #32]
 80084fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008500:	4293      	cmp	r3, r2
 8008502:	db20      	blt.n	8008546 <_strtod_l+0x44e>
 8008504:	4c5f      	ldr	r4, [pc, #380]	; (8008684 <_strtod_l+0x58c>)
 8008506:	f1c6 060f 	rsb	r6, r6, #15
 800850a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800850e:	4642      	mov	r2, r8
 8008510:	464b      	mov	r3, r9
 8008512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008516:	f7f8 f877 	bl	8000608 <__aeabi_dmul>
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	1b9e      	subs	r6, r3, r6
 800851e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008522:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008526:	e7e3      	b.n	80084f0 <_strtod_l+0x3f8>
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	3316      	adds	r3, #22
 800852c:	db0b      	blt.n	8008546 <_strtod_l+0x44e>
 800852e:	9b05      	ldr	r3, [sp, #20]
 8008530:	1bdf      	subs	r7, r3, r7
 8008532:	4b54      	ldr	r3, [pc, #336]	; (8008684 <_strtod_l+0x58c>)
 8008534:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	4640      	mov	r0, r8
 800853e:	4649      	mov	r1, r9
 8008540:	f7f8 f98c 	bl	800085c <__aeabi_ddiv>
 8008544:	e7d6      	b.n	80084f4 <_strtod_l+0x3fc>
 8008546:	9b08      	ldr	r3, [sp, #32]
 8008548:	1b75      	subs	r5, r6, r5
 800854a:	441d      	add	r5, r3
 800854c:	2d00      	cmp	r5, #0
 800854e:	dd70      	ble.n	8008632 <_strtod_l+0x53a>
 8008550:	f015 030f 	ands.w	r3, r5, #15
 8008554:	d00a      	beq.n	800856c <_strtod_l+0x474>
 8008556:	494b      	ldr	r1, [pc, #300]	; (8008684 <_strtod_l+0x58c>)
 8008558:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800855c:	4642      	mov	r2, r8
 800855e:	464b      	mov	r3, r9
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	f7f8 f850 	bl	8000608 <__aeabi_dmul>
 8008568:	4680      	mov	r8, r0
 800856a:	4689      	mov	r9, r1
 800856c:	f035 050f 	bics.w	r5, r5, #15
 8008570:	d04d      	beq.n	800860e <_strtod_l+0x516>
 8008572:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008576:	dd22      	ble.n	80085be <_strtod_l+0x4c6>
 8008578:	2500      	movs	r5, #0
 800857a:	46ab      	mov	fp, r5
 800857c:	9509      	str	r5, [sp, #36]	; 0x24
 800857e:	9505      	str	r5, [sp, #20]
 8008580:	2322      	movs	r3, #34	; 0x22
 8008582:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800868c <_strtod_l+0x594>
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	f04f 0800 	mov.w	r8, #0
 800858c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858e:	2b00      	cmp	r3, #0
 8008590:	f43f aded 	beq.w	800816e <_strtod_l+0x76>
 8008594:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008596:	4620      	mov	r0, r4
 8008598:	f7ff f924 	bl	80077e4 <_Bfree>
 800859c:	9905      	ldr	r1, [sp, #20]
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff f920 	bl	80077e4 <_Bfree>
 80085a4:	4659      	mov	r1, fp
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7ff f91c 	bl	80077e4 <_Bfree>
 80085ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085ae:	4620      	mov	r0, r4
 80085b0:	f7ff f918 	bl	80077e4 <_Bfree>
 80085b4:	4629      	mov	r1, r5
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff f914 	bl	80077e4 <_Bfree>
 80085bc:	e5d7      	b.n	800816e <_strtod_l+0x76>
 80085be:	4b32      	ldr	r3, [pc, #200]	; (8008688 <_strtod_l+0x590>)
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	2300      	movs	r3, #0
 80085c4:	112d      	asrs	r5, r5, #4
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	469a      	mov	sl, r3
 80085cc:	2d01      	cmp	r5, #1
 80085ce:	dc21      	bgt.n	8008614 <_strtod_l+0x51c>
 80085d0:	b10b      	cbz	r3, 80085d6 <_strtod_l+0x4de>
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	492c      	ldr	r1, [pc, #176]	; (8008688 <_strtod_l+0x590>)
 80085d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80085dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e8:	f7f8 f80e 	bl	8000608 <__aeabi_dmul>
 80085ec:	4b27      	ldr	r3, [pc, #156]	; (800868c <_strtod_l+0x594>)
 80085ee:	460a      	mov	r2, r1
 80085f0:	400b      	ands	r3, r1
 80085f2:	4927      	ldr	r1, [pc, #156]	; (8008690 <_strtod_l+0x598>)
 80085f4:	428b      	cmp	r3, r1
 80085f6:	4680      	mov	r8, r0
 80085f8:	d8be      	bhi.n	8008578 <_strtod_l+0x480>
 80085fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085fe:	428b      	cmp	r3, r1
 8008600:	bf86      	itte	hi
 8008602:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008694 <_strtod_l+0x59c>
 8008606:	f04f 38ff 	movhi.w	r8, #4294967295
 800860a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800860e:	2300      	movs	r3, #0
 8008610:	9304      	str	r3, [sp, #16]
 8008612:	e07b      	b.n	800870c <_strtod_l+0x614>
 8008614:	07ea      	lsls	r2, r5, #31
 8008616:	d505      	bpl.n	8008624 <_strtod_l+0x52c>
 8008618:	9b04      	ldr	r3, [sp, #16]
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fff3 	bl	8000608 <__aeabi_dmul>
 8008622:	2301      	movs	r3, #1
 8008624:	9a04      	ldr	r2, [sp, #16]
 8008626:	3208      	adds	r2, #8
 8008628:	f10a 0a01 	add.w	sl, sl, #1
 800862c:	106d      	asrs	r5, r5, #1
 800862e:	9204      	str	r2, [sp, #16]
 8008630:	e7cc      	b.n	80085cc <_strtod_l+0x4d4>
 8008632:	d0ec      	beq.n	800860e <_strtod_l+0x516>
 8008634:	426d      	negs	r5, r5
 8008636:	f015 020f 	ands.w	r2, r5, #15
 800863a:	d00a      	beq.n	8008652 <_strtod_l+0x55a>
 800863c:	4b11      	ldr	r3, [pc, #68]	; (8008684 <_strtod_l+0x58c>)
 800863e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f8 f907 	bl	800085c <__aeabi_ddiv>
 800864e:	4680      	mov	r8, r0
 8008650:	4689      	mov	r9, r1
 8008652:	112d      	asrs	r5, r5, #4
 8008654:	d0db      	beq.n	800860e <_strtod_l+0x516>
 8008656:	2d1f      	cmp	r5, #31
 8008658:	dd1e      	ble.n	8008698 <_strtod_l+0x5a0>
 800865a:	2500      	movs	r5, #0
 800865c:	46ab      	mov	fp, r5
 800865e:	9509      	str	r5, [sp, #36]	; 0x24
 8008660:	9505      	str	r5, [sp, #20]
 8008662:	2322      	movs	r3, #34	; 0x22
 8008664:	f04f 0800 	mov.w	r8, #0
 8008668:	f04f 0900 	mov.w	r9, #0
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	e78d      	b.n	800858c <_strtod_l+0x494>
 8008670:	0800b0a1 	.word	0x0800b0a1
 8008674:	0800b2cc 	.word	0x0800b2cc
 8008678:	0800b099 	.word	0x0800b099
 800867c:	0800b0d0 	.word	0x0800b0d0
 8008680:	0800b45d 	.word	0x0800b45d
 8008684:	0800b1e0 	.word	0x0800b1e0
 8008688:	0800b1b8 	.word	0x0800b1b8
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	7ca00000 	.word	0x7ca00000
 8008694:	7fefffff 	.word	0x7fefffff
 8008698:	f015 0310 	ands.w	r3, r5, #16
 800869c:	bf18      	it	ne
 800869e:	236a      	movne	r3, #106	; 0x6a
 80086a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008a44 <_strtod_l+0x94c>
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	2300      	movs	r3, #0
 80086ac:	07ea      	lsls	r2, r5, #31
 80086ae:	d504      	bpl.n	80086ba <_strtod_l+0x5c2>
 80086b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80086b4:	f7f7 ffa8 	bl	8000608 <__aeabi_dmul>
 80086b8:	2301      	movs	r3, #1
 80086ba:	106d      	asrs	r5, r5, #1
 80086bc:	f10a 0a08 	add.w	sl, sl, #8
 80086c0:	d1f4      	bne.n	80086ac <_strtod_l+0x5b4>
 80086c2:	b10b      	cbz	r3, 80086c8 <_strtod_l+0x5d0>
 80086c4:	4680      	mov	r8, r0
 80086c6:	4689      	mov	r9, r1
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	b1bb      	cbz	r3, 80086fc <_strtod_l+0x604>
 80086cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80086d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	4649      	mov	r1, r9
 80086d8:	dd10      	ble.n	80086fc <_strtod_l+0x604>
 80086da:	2b1f      	cmp	r3, #31
 80086dc:	f340 811e 	ble.w	800891c <_strtod_l+0x824>
 80086e0:	2b34      	cmp	r3, #52	; 0x34
 80086e2:	bfde      	ittt	le
 80086e4:	f04f 33ff 	movle.w	r3, #4294967295
 80086e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80086ec:	4093      	lslle	r3, r2
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	bfcc      	ite	gt
 80086f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80086f8:	ea03 0901 	andle.w	r9, r3, r1
 80086fc:	2200      	movs	r2, #0
 80086fe:	2300      	movs	r3, #0
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f8 f9e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008708:	2800      	cmp	r0, #0
 800870a:	d1a6      	bne.n	800865a <_strtod_l+0x562>
 800870c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008712:	4633      	mov	r3, r6
 8008714:	465a      	mov	r2, fp
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff f8cc 	bl	80078b4 <__s2b>
 800871c:	9009      	str	r0, [sp, #36]	; 0x24
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f af2a 	beq.w	8008578 <_strtod_l+0x480>
 8008724:	9a08      	ldr	r2, [sp, #32]
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	2a00      	cmp	r2, #0
 800872a:	eba3 0307 	sub.w	r3, r3, r7
 800872e:	bfa8      	it	ge
 8008730:	2300      	movge	r3, #0
 8008732:	930c      	str	r3, [sp, #48]	; 0x30
 8008734:	2500      	movs	r5, #0
 8008736:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800873a:	9312      	str	r3, [sp, #72]	; 0x48
 800873c:	46ab      	mov	fp, r5
 800873e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008740:	4620      	mov	r0, r4
 8008742:	6859      	ldr	r1, [r3, #4]
 8008744:	f7ff f80e 	bl	8007764 <_Balloc>
 8008748:	9005      	str	r0, [sp, #20]
 800874a:	2800      	cmp	r0, #0
 800874c:	f43f af18 	beq.w	8008580 <_strtod_l+0x488>
 8008750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	3202      	adds	r2, #2
 8008756:	f103 010c 	add.w	r1, r3, #12
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	300c      	adds	r0, #12
 800875e:	f000 fd87 	bl	8009270 <memcpy>
 8008762:	ec49 8b10 	vmov	d0, r8, r9
 8008766:	aa18      	add	r2, sp, #96	; 0x60
 8008768:	a917      	add	r1, sp, #92	; 0x5c
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fbd6 	bl	8007f1c <__d2b>
 8008770:	ec49 8b18 	vmov	d8, r8, r9
 8008774:	9016      	str	r0, [sp, #88]	; 0x58
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f af02 	beq.w	8008580 <_strtod_l+0x488>
 800877c:	2101      	movs	r1, #1
 800877e:	4620      	mov	r0, r4
 8008780:	f7ff f930 	bl	80079e4 <__i2b>
 8008784:	4683      	mov	fp, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f aefa 	beq.w	8008580 <_strtod_l+0x488>
 800878c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800878e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008790:	2e00      	cmp	r6, #0
 8008792:	bfab      	itete	ge
 8008794:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008796:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008798:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800879a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800879e:	bfac      	ite	ge
 80087a0:	eb06 0a03 	addge.w	sl, r6, r3
 80087a4:	1b9f      	sublt	r7, r3, r6
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	1af6      	subs	r6, r6, r3
 80087aa:	4416      	add	r6, r2
 80087ac:	4ba0      	ldr	r3, [pc, #640]	; (8008a30 <_strtod_l+0x938>)
 80087ae:	3e01      	subs	r6, #1
 80087b0:	429e      	cmp	r6, r3
 80087b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087b6:	f280 80c4 	bge.w	8008942 <_strtod_l+0x84a>
 80087ba:	1b9b      	subs	r3, r3, r6
 80087bc:	2b1f      	cmp	r3, #31
 80087be:	eba2 0203 	sub.w	r2, r2, r3
 80087c2:	f04f 0101 	mov.w	r1, #1
 80087c6:	f300 80b0 	bgt.w	800892a <_strtod_l+0x832>
 80087ca:	fa01 f303 	lsl.w	r3, r1, r3
 80087ce:	930e      	str	r3, [sp, #56]	; 0x38
 80087d0:	2300      	movs	r3, #0
 80087d2:	930d      	str	r3, [sp, #52]	; 0x34
 80087d4:	eb0a 0602 	add.w	r6, sl, r2
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	45b2      	cmp	sl, r6
 80087dc:	4417      	add	r7, r2
 80087de:	441f      	add	r7, r3
 80087e0:	4653      	mov	r3, sl
 80087e2:	bfa8      	it	ge
 80087e4:	4633      	movge	r3, r6
 80087e6:	42bb      	cmp	r3, r7
 80087e8:	bfa8      	it	ge
 80087ea:	463b      	movge	r3, r7
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfc2      	ittt	gt
 80087f0:	1af6      	subgt	r6, r6, r3
 80087f2:	1aff      	subgt	r7, r7, r3
 80087f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80087f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	dd17      	ble.n	800882e <_strtod_l+0x736>
 80087fe:	4659      	mov	r1, fp
 8008800:	461a      	mov	r2, r3
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff f9ae 	bl	8007b64 <__pow5mult>
 8008808:	4683      	mov	fp, r0
 800880a:	2800      	cmp	r0, #0
 800880c:	f43f aeb8 	beq.w	8008580 <_strtod_l+0x488>
 8008810:	4601      	mov	r1, r0
 8008812:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008814:	4620      	mov	r0, r4
 8008816:	f7ff f8fb 	bl	8007a10 <__multiply>
 800881a:	900b      	str	r0, [sp, #44]	; 0x2c
 800881c:	2800      	cmp	r0, #0
 800881e:	f43f aeaf 	beq.w	8008580 <_strtod_l+0x488>
 8008822:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008824:	4620      	mov	r0, r4
 8008826:	f7fe ffdd 	bl	80077e4 <_Bfree>
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	9316      	str	r3, [sp, #88]	; 0x58
 800882e:	2e00      	cmp	r6, #0
 8008830:	f300 808c 	bgt.w	800894c <_strtod_l+0x854>
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	dd08      	ble.n	800884c <_strtod_l+0x754>
 800883a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800883c:	9905      	ldr	r1, [sp, #20]
 800883e:	4620      	mov	r0, r4
 8008840:	f7ff f990 	bl	8007b64 <__pow5mult>
 8008844:	9005      	str	r0, [sp, #20]
 8008846:	2800      	cmp	r0, #0
 8008848:	f43f ae9a 	beq.w	8008580 <_strtod_l+0x488>
 800884c:	2f00      	cmp	r7, #0
 800884e:	dd08      	ble.n	8008862 <_strtod_l+0x76a>
 8008850:	9905      	ldr	r1, [sp, #20]
 8008852:	463a      	mov	r2, r7
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff f9df 	bl	8007c18 <__lshift>
 800885a:	9005      	str	r0, [sp, #20]
 800885c:	2800      	cmp	r0, #0
 800885e:	f43f ae8f 	beq.w	8008580 <_strtod_l+0x488>
 8008862:	f1ba 0f00 	cmp.w	sl, #0
 8008866:	dd08      	ble.n	800887a <_strtod_l+0x782>
 8008868:	4659      	mov	r1, fp
 800886a:	4652      	mov	r2, sl
 800886c:	4620      	mov	r0, r4
 800886e:	f7ff f9d3 	bl	8007c18 <__lshift>
 8008872:	4683      	mov	fp, r0
 8008874:	2800      	cmp	r0, #0
 8008876:	f43f ae83 	beq.w	8008580 <_strtod_l+0x488>
 800887a:	9a05      	ldr	r2, [sp, #20]
 800887c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800887e:	4620      	mov	r0, r4
 8008880:	f7ff fa52 	bl	8007d28 <__mdiff>
 8008884:	4605      	mov	r5, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f ae7a 	beq.w	8008580 <_strtod_l+0x488>
 800888c:	68c3      	ldr	r3, [r0, #12]
 800888e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008890:	2300      	movs	r3, #0
 8008892:	60c3      	str	r3, [r0, #12]
 8008894:	4659      	mov	r1, fp
 8008896:	f7ff fa2b 	bl	8007cf0 <__mcmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	da60      	bge.n	8008960 <_strtod_l+0x868>
 800889e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a0:	ea53 0308 	orrs.w	r3, r3, r8
 80088a4:	f040 8084 	bne.w	80089b0 <_strtod_l+0x8b8>
 80088a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d17f      	bne.n	80089b0 <_strtod_l+0x8b8>
 80088b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088b4:	0d1b      	lsrs	r3, r3, #20
 80088b6:	051b      	lsls	r3, r3, #20
 80088b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088bc:	d978      	bls.n	80089b0 <_strtod_l+0x8b8>
 80088be:	696b      	ldr	r3, [r5, #20]
 80088c0:	b913      	cbnz	r3, 80088c8 <_strtod_l+0x7d0>
 80088c2:	692b      	ldr	r3, [r5, #16]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	dd73      	ble.n	80089b0 <_strtod_l+0x8b8>
 80088c8:	4629      	mov	r1, r5
 80088ca:	2201      	movs	r2, #1
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff f9a3 	bl	8007c18 <__lshift>
 80088d2:	4659      	mov	r1, fp
 80088d4:	4605      	mov	r5, r0
 80088d6:	f7ff fa0b 	bl	8007cf0 <__mcmp>
 80088da:	2800      	cmp	r0, #0
 80088dc:	dd68      	ble.n	80089b0 <_strtod_l+0x8b8>
 80088de:	9904      	ldr	r1, [sp, #16]
 80088e0:	4a54      	ldr	r2, [pc, #336]	; (8008a34 <_strtod_l+0x93c>)
 80088e2:	464b      	mov	r3, r9
 80088e4:	2900      	cmp	r1, #0
 80088e6:	f000 8084 	beq.w	80089f2 <_strtod_l+0x8fa>
 80088ea:	ea02 0109 	and.w	r1, r2, r9
 80088ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088f2:	dc7e      	bgt.n	80089f2 <_strtod_l+0x8fa>
 80088f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088f8:	f77f aeb3 	ble.w	8008662 <_strtod_l+0x56a>
 80088fc:	4b4e      	ldr	r3, [pc, #312]	; (8008a38 <_strtod_l+0x940>)
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	2200      	movs	r2, #0
 8008904:	f7f7 fe80 	bl	8000608 <__aeabi_dmul>
 8008908:	4b4a      	ldr	r3, [pc, #296]	; (8008a34 <_strtod_l+0x93c>)
 800890a:	400b      	ands	r3, r1
 800890c:	4680      	mov	r8, r0
 800890e:	4689      	mov	r9, r1
 8008910:	2b00      	cmp	r3, #0
 8008912:	f47f ae3f 	bne.w	8008594 <_strtod_l+0x49c>
 8008916:	2322      	movs	r3, #34	; 0x22
 8008918:	6023      	str	r3, [r4, #0]
 800891a:	e63b      	b.n	8008594 <_strtod_l+0x49c>
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	ea03 0808 	and.w	r8, r3, r8
 8008928:	e6e8      	b.n	80086fc <_strtod_l+0x604>
 800892a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800892e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008932:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008936:	36e2      	adds	r6, #226	; 0xe2
 8008938:	fa01 f306 	lsl.w	r3, r1, r6
 800893c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008940:	e748      	b.n	80087d4 <_strtod_l+0x6dc>
 8008942:	2100      	movs	r1, #0
 8008944:	2301      	movs	r3, #1
 8008946:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800894a:	e743      	b.n	80087d4 <_strtod_l+0x6dc>
 800894c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800894e:	4632      	mov	r2, r6
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff f961 	bl	8007c18 <__lshift>
 8008956:	9016      	str	r0, [sp, #88]	; 0x58
 8008958:	2800      	cmp	r0, #0
 800895a:	f47f af6b 	bne.w	8008834 <_strtod_l+0x73c>
 800895e:	e60f      	b.n	8008580 <_strtod_l+0x488>
 8008960:	46ca      	mov	sl, r9
 8008962:	d171      	bne.n	8008a48 <_strtod_l+0x950>
 8008964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800896a:	b352      	cbz	r2, 80089c2 <_strtod_l+0x8ca>
 800896c:	4a33      	ldr	r2, [pc, #204]	; (8008a3c <_strtod_l+0x944>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d12a      	bne.n	80089c8 <_strtod_l+0x8d0>
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	4641      	mov	r1, r8
 8008976:	b1fb      	cbz	r3, 80089b8 <_strtod_l+0x8c0>
 8008978:	4b2e      	ldr	r3, [pc, #184]	; (8008a34 <_strtod_l+0x93c>)
 800897a:	ea09 0303 	and.w	r3, r9, r3
 800897e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	d81a      	bhi.n	80089be <_strtod_l+0x8c6>
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	4299      	cmp	r1, r3
 8008994:	d118      	bne.n	80089c8 <_strtod_l+0x8d0>
 8008996:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <_strtod_l+0x948>)
 8008998:	459a      	cmp	sl, r3
 800899a:	d102      	bne.n	80089a2 <_strtod_l+0x8aa>
 800899c:	3101      	adds	r1, #1
 800899e:	f43f adef 	beq.w	8008580 <_strtod_l+0x488>
 80089a2:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <_strtod_l+0x93c>)
 80089a4:	ea0a 0303 	and.w	r3, sl, r3
 80089a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80089ac:	f04f 0800 	mov.w	r8, #0
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1a2      	bne.n	80088fc <_strtod_l+0x804>
 80089b6:	e5ed      	b.n	8008594 <_strtod_l+0x49c>
 80089b8:	f04f 33ff 	mov.w	r3, #4294967295
 80089bc:	e7e9      	b.n	8008992 <_strtod_l+0x89a>
 80089be:	4613      	mov	r3, r2
 80089c0:	e7e7      	b.n	8008992 <_strtod_l+0x89a>
 80089c2:	ea53 0308 	orrs.w	r3, r3, r8
 80089c6:	d08a      	beq.n	80088de <_strtod_l+0x7e6>
 80089c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ca:	b1e3      	cbz	r3, 8008a06 <_strtod_l+0x90e>
 80089cc:	ea13 0f0a 	tst.w	r3, sl
 80089d0:	d0ee      	beq.n	80089b0 <_strtod_l+0x8b8>
 80089d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d4:	9a04      	ldr	r2, [sp, #16]
 80089d6:	4640      	mov	r0, r8
 80089d8:	4649      	mov	r1, r9
 80089da:	b1c3      	cbz	r3, 8008a0e <_strtod_l+0x916>
 80089dc:	f7ff fb6f 	bl	80080be <sulp>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	ec51 0b18 	vmov	r0, r1, d8
 80089e8:	f7f7 fc58 	bl	800029c <__adddf3>
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	e7de      	b.n	80089b0 <_strtod_l+0x8b8>
 80089f2:	4013      	ands	r3, r2
 80089f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80089fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a00:	f04f 38ff 	mov.w	r8, #4294967295
 8008a04:	e7d4      	b.n	80089b0 <_strtod_l+0x8b8>
 8008a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a08:	ea13 0f08 	tst.w	r3, r8
 8008a0c:	e7e0      	b.n	80089d0 <_strtod_l+0x8d8>
 8008a0e:	f7ff fb56 	bl	80080be <sulp>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	ec51 0b18 	vmov	r0, r1, d8
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2300      	movs	r3, #0
 8008a22:	4680      	mov	r8, r0
 8008a24:	4689      	mov	r9, r1
 8008a26:	f7f8 f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0c0      	beq.n	80089b0 <_strtod_l+0x8b8>
 8008a2e:	e618      	b.n	8008662 <_strtod_l+0x56a>
 8008a30:	fffffc02 	.word	0xfffffc02
 8008a34:	7ff00000 	.word	0x7ff00000
 8008a38:	39500000 	.word	0x39500000
 8008a3c:	000fffff 	.word	0x000fffff
 8008a40:	7fefffff 	.word	0x7fefffff
 8008a44:	0800b2e0 	.word	0x0800b2e0
 8008a48:	4659      	mov	r1, fp
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7ff fac0 	bl	8007fd0 <__ratio>
 8008a50:	ec57 6b10 	vmov	r6, r7, d0
 8008a54:	ee10 0a10 	vmov	r0, s0
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f8 f84e 	bl	8000b00 <__aeabi_dcmple>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d071      	beq.n	8008b4c <_strtod_l+0xa54>
 8008a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d17c      	bne.n	8008b68 <_strtod_l+0xa70>
 8008a6e:	f1b8 0f00 	cmp.w	r8, #0
 8008a72:	d15a      	bne.n	8008b2a <_strtod_l+0xa32>
 8008a74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d15d      	bne.n	8008b38 <_strtod_l+0xa40>
 8008a7c:	4b90      	ldr	r3, [pc, #576]	; (8008cc0 <_strtod_l+0xbc8>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4630      	mov	r0, r6
 8008a82:	4639      	mov	r1, r7
 8008a84:	f7f8 f832 	bl	8000aec <__aeabi_dcmplt>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d15c      	bne.n	8008b46 <_strtod_l+0xa4e>
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4b8c      	ldr	r3, [pc, #560]	; (8008cc4 <_strtod_l+0xbcc>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	4606      	mov	r6, r0
 8008a9a:	460f      	mov	r7, r1
 8008a9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008aa0:	9606      	str	r6, [sp, #24]
 8008aa2:	9307      	str	r3, [sp, #28]
 8008aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aa8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008aac:	4b86      	ldr	r3, [pc, #536]	; (8008cc8 <_strtod_l+0xbd0>)
 8008aae:	ea0a 0303 	and.w	r3, sl, r3
 8008ab2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ab6:	4b85      	ldr	r3, [pc, #532]	; (8008ccc <_strtod_l+0xbd4>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	f040 8090 	bne.w	8008bde <_strtod_l+0xae6>
 8008abe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008ac2:	ec49 8b10 	vmov	d0, r8, r9
 8008ac6:	f7ff f9b9 	bl	8007e3c <__ulp>
 8008aca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ace:	ec51 0b10 	vmov	r0, r1, d0
 8008ad2:	f7f7 fd99 	bl	8000608 <__aeabi_dmul>
 8008ad6:	4642      	mov	r2, r8
 8008ad8:	464b      	mov	r3, r9
 8008ada:	f7f7 fbdf 	bl	800029c <__adddf3>
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4979      	ldr	r1, [pc, #484]	; (8008cc8 <_strtod_l+0xbd0>)
 8008ae2:	4a7b      	ldr	r2, [pc, #492]	; (8008cd0 <_strtod_l+0xbd8>)
 8008ae4:	4019      	ands	r1, r3
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	4680      	mov	r8, r0
 8008aea:	d944      	bls.n	8008b76 <_strtod_l+0xa7e>
 8008aec:	ee18 2a90 	vmov	r2, s17
 8008af0:	4b78      	ldr	r3, [pc, #480]	; (8008cd4 <_strtod_l+0xbdc>)
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d104      	bne.n	8008b00 <_strtod_l+0xa08>
 8008af6:	ee18 3a10 	vmov	r3, s16
 8008afa:	3301      	adds	r3, #1
 8008afc:	f43f ad40 	beq.w	8008580 <_strtod_l+0x488>
 8008b00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008cd4 <_strtod_l+0xbdc>
 8008b04:	f04f 38ff 	mov.w	r8, #4294967295
 8008b08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7fe fe6a 	bl	80077e4 <_Bfree>
 8008b10:	9905      	ldr	r1, [sp, #20]
 8008b12:	4620      	mov	r0, r4
 8008b14:	f7fe fe66 	bl	80077e4 <_Bfree>
 8008b18:	4659      	mov	r1, fp
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7fe fe62 	bl	80077e4 <_Bfree>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4620      	mov	r0, r4
 8008b24:	f7fe fe5e 	bl	80077e4 <_Bfree>
 8008b28:	e609      	b.n	800873e <_strtod_l+0x646>
 8008b2a:	f1b8 0f01 	cmp.w	r8, #1
 8008b2e:	d103      	bne.n	8008b38 <_strtod_l+0xa40>
 8008b30:	f1b9 0f00 	cmp.w	r9, #0
 8008b34:	f43f ad95 	beq.w	8008662 <_strtod_l+0x56a>
 8008b38:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008c90 <_strtod_l+0xb98>
 8008b3c:	4f60      	ldr	r7, [pc, #384]	; (8008cc0 <_strtod_l+0xbc8>)
 8008b3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b42:	2600      	movs	r6, #0
 8008b44:	e7ae      	b.n	8008aa4 <_strtod_l+0x9ac>
 8008b46:	4f5f      	ldr	r7, [pc, #380]	; (8008cc4 <_strtod_l+0xbcc>)
 8008b48:	2600      	movs	r6, #0
 8008b4a:	e7a7      	b.n	8008a9c <_strtod_l+0x9a4>
 8008b4c:	4b5d      	ldr	r3, [pc, #372]	; (8008cc4 <_strtod_l+0xbcc>)
 8008b4e:	4630      	mov	r0, r6
 8008b50:	4639      	mov	r1, r7
 8008b52:	2200      	movs	r2, #0
 8008b54:	f7f7 fd58 	bl	8000608 <__aeabi_dmul>
 8008b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d09c      	beq.n	8008a9c <_strtod_l+0x9a4>
 8008b62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b66:	e79d      	b.n	8008aa4 <_strtod_l+0x9ac>
 8008b68:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008c98 <_strtod_l+0xba0>
 8008b6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b70:	ec57 6b17 	vmov	r6, r7, d7
 8008b74:	e796      	b.n	8008aa4 <_strtod_l+0x9ac>
 8008b76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008b7a:	9b04      	ldr	r3, [sp, #16]
 8008b7c:	46ca      	mov	sl, r9
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1c2      	bne.n	8008b08 <_strtod_l+0xa10>
 8008b82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b88:	0d1b      	lsrs	r3, r3, #20
 8008b8a:	051b      	lsls	r3, r3, #20
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d1bb      	bne.n	8008b08 <_strtod_l+0xa10>
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	f7f8 f898 	bl	8000cc8 <__aeabi_d2lz>
 8008b98:	f7f7 fd08 	bl	80005ac <__aeabi_l2d>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 fb78 	bl	8000298 <__aeabi_dsub>
 8008ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008baa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bae:	ea43 0308 	orr.w	r3, r3, r8
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460f      	mov	r7, r1
 8008bb8:	d054      	beq.n	8008c64 <_strtod_l+0xb6c>
 8008bba:	a339      	add	r3, pc, #228	; (adr r3, 8008ca0 <_strtod_l+0xba8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 ff94 	bl	8000aec <__aeabi_dcmplt>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f47f ace5 	bne.w	8008594 <_strtod_l+0x49c>
 8008bca:	a337      	add	r3, pc, #220	; (adr r3, 8008ca8 <_strtod_l+0xbb0>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 ffa8 	bl	8000b28 <__aeabi_dcmpgt>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d095      	beq.n	8008b08 <_strtod_l+0xa10>
 8008bdc:	e4da      	b.n	8008594 <_strtod_l+0x49c>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	b333      	cbz	r3, 8008c30 <_strtod_l+0xb38>
 8008be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008be4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008be8:	d822      	bhi.n	8008c30 <_strtod_l+0xb38>
 8008bea:	a331      	add	r3, pc, #196	; (adr r3, 8008cb0 <_strtod_l+0xbb8>)
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff84 	bl	8000b00 <__aeabi_dcmple>
 8008bf8:	b1a0      	cbz	r0, 8008c24 <_strtod_l+0xb2c>
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7f7 ffdb 	bl	8000bb8 <__aeabi_d2uiz>
 8008c02:	2801      	cmp	r0, #1
 8008c04:	bf38      	it	cc
 8008c06:	2001      	movcc	r0, #1
 8008c08:	f7f7 fc84 	bl	8000514 <__aeabi_ui2d>
 8008c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460f      	mov	r7, r1
 8008c12:	bb23      	cbnz	r3, 8008c5e <_strtod_l+0xb66>
 8008c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c18:	9010      	str	r0, [sp, #64]	; 0x40
 8008c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8008c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c34:	eeb0 0a48 	vmov.f32	s0, s16
 8008c38:	eef0 0a68 	vmov.f32	s1, s17
 8008c3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008c40:	f7ff f8fc 	bl	8007e3c <__ulp>
 8008c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c48:	ec53 2b10 	vmov	r2, r3, d0
 8008c4c:	f7f7 fcdc 	bl	8000608 <__aeabi_dmul>
 8008c50:	ec53 2b18 	vmov	r2, r3, d8
 8008c54:	f7f7 fb22 	bl	800029c <__adddf3>
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4689      	mov	r9, r1
 8008c5c:	e78d      	b.n	8008b7a <_strtod_l+0xa82>
 8008c5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008c62:	e7db      	b.n	8008c1c <_strtod_l+0xb24>
 8008c64:	a314      	add	r3, pc, #80	; (adr r3, 8008cb8 <_strtod_l+0xbc0>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8008c6e:	e7b3      	b.n	8008bd8 <_strtod_l+0xae0>
 8008c70:	2300      	movs	r3, #0
 8008c72:	930a      	str	r3, [sp, #40]	; 0x28
 8008c74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c78:	6013      	str	r3, [r2, #0]
 8008c7a:	f7ff ba7c 	b.w	8008176 <_strtod_l+0x7e>
 8008c7e:	2a65      	cmp	r2, #101	; 0x65
 8008c80:	f43f ab75 	beq.w	800836e <_strtod_l+0x276>
 8008c84:	2a45      	cmp	r2, #69	; 0x45
 8008c86:	f43f ab72 	beq.w	800836e <_strtod_l+0x276>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	f7ff bbaa 	b.w	80083e4 <_strtod_l+0x2ec>
 8008c90:	00000000 	.word	0x00000000
 8008c94:	bff00000 	.word	0xbff00000
 8008c98:	00000000 	.word	0x00000000
 8008c9c:	3ff00000 	.word	0x3ff00000
 8008ca0:	94a03595 	.word	0x94a03595
 8008ca4:	3fdfffff 	.word	0x3fdfffff
 8008ca8:	35afe535 	.word	0x35afe535
 8008cac:	3fe00000 	.word	0x3fe00000
 8008cb0:	ffc00000 	.word	0xffc00000
 8008cb4:	41dfffff 	.word	0x41dfffff
 8008cb8:	94a03595 	.word	0x94a03595
 8008cbc:	3fcfffff 	.word	0x3fcfffff
 8008cc0:	3ff00000 	.word	0x3ff00000
 8008cc4:	3fe00000 	.word	0x3fe00000
 8008cc8:	7ff00000 	.word	0x7ff00000
 8008ccc:	7fe00000 	.word	0x7fe00000
 8008cd0:	7c9fffff 	.word	0x7c9fffff
 8008cd4:	7fefffff 	.word	0x7fefffff

08008cd8 <_strtod_r>:
 8008cd8:	4b01      	ldr	r3, [pc, #4]	; (8008ce0 <_strtod_r+0x8>)
 8008cda:	f7ff ba0d 	b.w	80080f8 <_strtod_l>
 8008cde:	bf00      	nop
 8008ce0:	20000180 	.word	0x20000180

08008ce4 <_strtol_l.constprop.0>:
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cea:	d001      	beq.n	8008cf0 <_strtol_l.constprop.0+0xc>
 8008cec:	2b24      	cmp	r3, #36	; 0x24
 8008cee:	d906      	bls.n	8008cfe <_strtol_l.constprop.0+0x1a>
 8008cf0:	f7fd fd8c 	bl	800680c <__errno>
 8008cf4:	2316      	movs	r3, #22
 8008cf6:	6003      	str	r3, [r0, #0]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008de4 <_strtol_l.constprop.0+0x100>
 8008d02:	460d      	mov	r5, r1
 8008d04:	462e      	mov	r6, r5
 8008d06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d0a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008d0e:	f017 0708 	ands.w	r7, r7, #8
 8008d12:	d1f7      	bne.n	8008d04 <_strtol_l.constprop.0+0x20>
 8008d14:	2c2d      	cmp	r4, #45	; 0x2d
 8008d16:	d132      	bne.n	8008d7e <_strtol_l.constprop.0+0x9a>
 8008d18:	782c      	ldrb	r4, [r5, #0]
 8008d1a:	2701      	movs	r7, #1
 8008d1c:	1cb5      	adds	r5, r6, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d05b      	beq.n	8008dda <_strtol_l.constprop.0+0xf6>
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d109      	bne.n	8008d3a <_strtol_l.constprop.0+0x56>
 8008d26:	2c30      	cmp	r4, #48	; 0x30
 8008d28:	d107      	bne.n	8008d3a <_strtol_l.constprop.0+0x56>
 8008d2a:	782c      	ldrb	r4, [r5, #0]
 8008d2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008d30:	2c58      	cmp	r4, #88	; 0x58
 8008d32:	d14d      	bne.n	8008dd0 <_strtol_l.constprop.0+0xec>
 8008d34:	786c      	ldrb	r4, [r5, #1]
 8008d36:	2310      	movs	r3, #16
 8008d38:	3502      	adds	r5, #2
 8008d3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d42:	f04f 0e00 	mov.w	lr, #0
 8008d46:	fbb8 f9f3 	udiv	r9, r8, r3
 8008d4a:	4676      	mov	r6, lr
 8008d4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008d50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008d54:	f1bc 0f09 	cmp.w	ip, #9
 8008d58:	d816      	bhi.n	8008d88 <_strtol_l.constprop.0+0xa4>
 8008d5a:	4664      	mov	r4, ip
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	dd24      	ble.n	8008daa <_strtol_l.constprop.0+0xc6>
 8008d60:	f1be 3fff 	cmp.w	lr, #4294967295
 8008d64:	d008      	beq.n	8008d78 <_strtol_l.constprop.0+0x94>
 8008d66:	45b1      	cmp	r9, r6
 8008d68:	d31c      	bcc.n	8008da4 <_strtol_l.constprop.0+0xc0>
 8008d6a:	d101      	bne.n	8008d70 <_strtol_l.constprop.0+0x8c>
 8008d6c:	45a2      	cmp	sl, r4
 8008d6e:	db19      	blt.n	8008da4 <_strtol_l.constprop.0+0xc0>
 8008d70:	fb06 4603 	mla	r6, r6, r3, r4
 8008d74:	f04f 0e01 	mov.w	lr, #1
 8008d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d7c:	e7e8      	b.n	8008d50 <_strtol_l.constprop.0+0x6c>
 8008d7e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d80:	bf04      	itt	eq
 8008d82:	782c      	ldrbeq	r4, [r5, #0]
 8008d84:	1cb5      	addeq	r5, r6, #2
 8008d86:	e7ca      	b.n	8008d1e <_strtol_l.constprop.0+0x3a>
 8008d88:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008d8c:	f1bc 0f19 	cmp.w	ip, #25
 8008d90:	d801      	bhi.n	8008d96 <_strtol_l.constprop.0+0xb2>
 8008d92:	3c37      	subs	r4, #55	; 0x37
 8008d94:	e7e2      	b.n	8008d5c <_strtol_l.constprop.0+0x78>
 8008d96:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008d9a:	f1bc 0f19 	cmp.w	ip, #25
 8008d9e:	d804      	bhi.n	8008daa <_strtol_l.constprop.0+0xc6>
 8008da0:	3c57      	subs	r4, #87	; 0x57
 8008da2:	e7db      	b.n	8008d5c <_strtol_l.constprop.0+0x78>
 8008da4:	f04f 3eff 	mov.w	lr, #4294967295
 8008da8:	e7e6      	b.n	8008d78 <_strtol_l.constprop.0+0x94>
 8008daa:	f1be 3fff 	cmp.w	lr, #4294967295
 8008dae:	d105      	bne.n	8008dbc <_strtol_l.constprop.0+0xd8>
 8008db0:	2322      	movs	r3, #34	; 0x22
 8008db2:	6003      	str	r3, [r0, #0]
 8008db4:	4646      	mov	r6, r8
 8008db6:	b942      	cbnz	r2, 8008dca <_strtol_l.constprop.0+0xe6>
 8008db8:	4630      	mov	r0, r6
 8008dba:	e79e      	b.n	8008cfa <_strtol_l.constprop.0+0x16>
 8008dbc:	b107      	cbz	r7, 8008dc0 <_strtol_l.constprop.0+0xdc>
 8008dbe:	4276      	negs	r6, r6
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	d0f9      	beq.n	8008db8 <_strtol_l.constprop.0+0xd4>
 8008dc4:	f1be 0f00 	cmp.w	lr, #0
 8008dc8:	d000      	beq.n	8008dcc <_strtol_l.constprop.0+0xe8>
 8008dca:	1e69      	subs	r1, r5, #1
 8008dcc:	6011      	str	r1, [r2, #0]
 8008dce:	e7f3      	b.n	8008db8 <_strtol_l.constprop.0+0xd4>
 8008dd0:	2430      	movs	r4, #48	; 0x30
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1b1      	bne.n	8008d3a <_strtol_l.constprop.0+0x56>
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	e7af      	b.n	8008d3a <_strtol_l.constprop.0+0x56>
 8008dda:	2c30      	cmp	r4, #48	; 0x30
 8008ddc:	d0a5      	beq.n	8008d2a <_strtol_l.constprop.0+0x46>
 8008dde:	230a      	movs	r3, #10
 8008de0:	e7ab      	b.n	8008d3a <_strtol_l.constprop.0+0x56>
 8008de2:	bf00      	nop
 8008de4:	0800b309 	.word	0x0800b309

08008de8 <_strtol_r>:
 8008de8:	f7ff bf7c 	b.w	8008ce4 <_strtol_l.constprop.0>

08008dec <__ssputs_r>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	688e      	ldr	r6, [r1, #8]
 8008df2:	461f      	mov	r7, r3
 8008df4:	42be      	cmp	r6, r7
 8008df6:	680b      	ldr	r3, [r1, #0]
 8008df8:	4682      	mov	sl, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	d82c      	bhi.n	8008e5a <__ssputs_r+0x6e>
 8008e00:	898a      	ldrh	r2, [r1, #12]
 8008e02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e06:	d026      	beq.n	8008e56 <__ssputs_r+0x6a>
 8008e08:	6965      	ldr	r5, [r4, #20]
 8008e0a:	6909      	ldr	r1, [r1, #16]
 8008e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e10:	eba3 0901 	sub.w	r9, r3, r1
 8008e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e18:	1c7b      	adds	r3, r7, #1
 8008e1a:	444b      	add	r3, r9
 8008e1c:	106d      	asrs	r5, r5, #1
 8008e1e:	429d      	cmp	r5, r3
 8008e20:	bf38      	it	cc
 8008e22:	461d      	movcc	r5, r3
 8008e24:	0553      	lsls	r3, r2, #21
 8008e26:	d527      	bpl.n	8008e78 <__ssputs_r+0x8c>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7fe fc0f 	bl	800764c <_malloc_r>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	b360      	cbz	r0, 8008e8c <__ssputs_r+0xa0>
 8008e32:	6921      	ldr	r1, [r4, #16]
 8008e34:	464a      	mov	r2, r9
 8008e36:	f000 fa1b 	bl	8009270 <memcpy>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e44:	81a3      	strh	r3, [r4, #12]
 8008e46:	6126      	str	r6, [r4, #16]
 8008e48:	6165      	str	r5, [r4, #20]
 8008e4a:	444e      	add	r6, r9
 8008e4c:	eba5 0509 	sub.w	r5, r5, r9
 8008e50:	6026      	str	r6, [r4, #0]
 8008e52:	60a5      	str	r5, [r4, #8]
 8008e54:	463e      	mov	r6, r7
 8008e56:	42be      	cmp	r6, r7
 8008e58:	d900      	bls.n	8008e5c <__ssputs_r+0x70>
 8008e5a:	463e      	mov	r6, r7
 8008e5c:	6820      	ldr	r0, [r4, #0]
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4641      	mov	r1, r8
 8008e62:	f000 f9c9 	bl	80091f8 <memmove>
 8008e66:	68a3      	ldr	r3, [r4, #8]
 8008e68:	1b9b      	subs	r3, r3, r6
 8008e6a:	60a3      	str	r3, [r4, #8]
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	4433      	add	r3, r6
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	462a      	mov	r2, r5
 8008e7a:	f000 fdae 	bl	80099da <_realloc_r>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1e0      	bne.n	8008e46 <__ssputs_r+0x5a>
 8008e84:	6921      	ldr	r1, [r4, #16]
 8008e86:	4650      	mov	r0, sl
 8008e88:	f7fe fb6c 	bl	8007564 <_free_r>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	f8ca 3000 	str.w	r3, [sl]
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	e7e9      	b.n	8008e74 <__ssputs_r+0x88>

08008ea0 <_svfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	4698      	mov	r8, r3
 8008ea6:	898b      	ldrh	r3, [r1, #12]
 8008ea8:	061b      	lsls	r3, r3, #24
 8008eaa:	b09d      	sub	sp, #116	; 0x74
 8008eac:	4607      	mov	r7, r0
 8008eae:	460d      	mov	r5, r1
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	d50e      	bpl.n	8008ed2 <_svfiprintf_r+0x32>
 8008eb4:	690b      	ldr	r3, [r1, #16]
 8008eb6:	b963      	cbnz	r3, 8008ed2 <_svfiprintf_r+0x32>
 8008eb8:	2140      	movs	r1, #64	; 0x40
 8008eba:	f7fe fbc7 	bl	800764c <_malloc_r>
 8008ebe:	6028      	str	r0, [r5, #0]
 8008ec0:	6128      	str	r0, [r5, #16]
 8008ec2:	b920      	cbnz	r0, 8008ece <_svfiprintf_r+0x2e>
 8008ec4:	230c      	movs	r3, #12
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e0d0      	b.n	8009070 <_svfiprintf_r+0x1d0>
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	616b      	str	r3, [r5, #20]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee0:	2330      	movs	r3, #48	; 0x30
 8008ee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009088 <_svfiprintf_r+0x1e8>
 8008ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eea:	f04f 0901 	mov.w	r9, #1
 8008eee:	4623      	mov	r3, r4
 8008ef0:	469a      	mov	sl, r3
 8008ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef6:	b10a      	cbz	r2, 8008efc <_svfiprintf_r+0x5c>
 8008ef8:	2a25      	cmp	r2, #37	; 0x25
 8008efa:	d1f9      	bne.n	8008ef0 <_svfiprintf_r+0x50>
 8008efc:	ebba 0b04 	subs.w	fp, sl, r4
 8008f00:	d00b      	beq.n	8008f1a <_svfiprintf_r+0x7a>
 8008f02:	465b      	mov	r3, fp
 8008f04:	4622      	mov	r2, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff ff6f 	bl	8008dec <__ssputs_r>
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f000 80a9 	beq.w	8009066 <_svfiprintf_r+0x1c6>
 8008f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f16:	445a      	add	r2, fp
 8008f18:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80a1 	beq.w	8009066 <_svfiprintf_r+0x1c6>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f2e:	f10a 0a01 	add.w	sl, sl, #1
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	9307      	str	r3, [sp, #28]
 8008f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2205      	movs	r2, #5
 8008f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f44:	4850      	ldr	r0, [pc, #320]	; (8009088 <_svfiprintf_r+0x1e8>)
 8008f46:	f7f7 f94b 	bl	80001e0 <memchr>
 8008f4a:	9a04      	ldr	r2, [sp, #16]
 8008f4c:	b9d8      	cbnz	r0, 8008f86 <_svfiprintf_r+0xe6>
 8008f4e:	06d0      	lsls	r0, r2, #27
 8008f50:	bf44      	itt	mi
 8008f52:	2320      	movmi	r3, #32
 8008f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f58:	0711      	lsls	r1, r2, #28
 8008f5a:	bf44      	itt	mi
 8008f5c:	232b      	movmi	r3, #43	; 0x2b
 8008f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f62:	f89a 3000 	ldrb.w	r3, [sl]
 8008f66:	2b2a      	cmp	r3, #42	; 0x2a
 8008f68:	d015      	beq.n	8008f96 <_svfiprintf_r+0xf6>
 8008f6a:	9a07      	ldr	r2, [sp, #28]
 8008f6c:	4654      	mov	r4, sl
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f04f 0c0a 	mov.w	ip, #10
 8008f74:	4621      	mov	r1, r4
 8008f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7a:	3b30      	subs	r3, #48	; 0x30
 8008f7c:	2b09      	cmp	r3, #9
 8008f7e:	d94d      	bls.n	800901c <_svfiprintf_r+0x17c>
 8008f80:	b1b0      	cbz	r0, 8008fb0 <_svfiprintf_r+0x110>
 8008f82:	9207      	str	r2, [sp, #28]
 8008f84:	e014      	b.n	8008fb0 <_svfiprintf_r+0x110>
 8008f86:	eba0 0308 	sub.w	r3, r0, r8
 8008f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	9304      	str	r3, [sp, #16]
 8008f92:	46a2      	mov	sl, r4
 8008f94:	e7d2      	b.n	8008f3c <_svfiprintf_r+0x9c>
 8008f96:	9b03      	ldr	r3, [sp, #12]
 8008f98:	1d19      	adds	r1, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	9103      	str	r1, [sp, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfbb      	ittet	lt
 8008fa2:	425b      	neglt	r3, r3
 8008fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa8:	9307      	strge	r3, [sp, #28]
 8008faa:	9307      	strlt	r3, [sp, #28]
 8008fac:	bfb8      	it	lt
 8008fae:	9204      	strlt	r2, [sp, #16]
 8008fb0:	7823      	ldrb	r3, [r4, #0]
 8008fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008fb4:	d10c      	bne.n	8008fd0 <_svfiprintf_r+0x130>
 8008fb6:	7863      	ldrb	r3, [r4, #1]
 8008fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008fba:	d134      	bne.n	8009026 <_svfiprintf_r+0x186>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	1d1a      	adds	r2, r3, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	9203      	str	r2, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfb8      	it	lt
 8008fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fcc:	3402      	adds	r4, #2
 8008fce:	9305      	str	r3, [sp, #20]
 8008fd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009098 <_svfiprintf_r+0x1f8>
 8008fd4:	7821      	ldrb	r1, [r4, #0]
 8008fd6:	2203      	movs	r2, #3
 8008fd8:	4650      	mov	r0, sl
 8008fda:	f7f7 f901 	bl	80001e0 <memchr>
 8008fde:	b138      	cbz	r0, 8008ff0 <_svfiprintf_r+0x150>
 8008fe0:	9b04      	ldr	r3, [sp, #16]
 8008fe2:	eba0 000a 	sub.w	r0, r0, sl
 8008fe6:	2240      	movs	r2, #64	; 0x40
 8008fe8:	4082      	lsls	r2, r0
 8008fea:	4313      	orrs	r3, r2
 8008fec:	3401      	adds	r4, #1
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff4:	4825      	ldr	r0, [pc, #148]	; (800908c <_svfiprintf_r+0x1ec>)
 8008ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ffa:	2206      	movs	r2, #6
 8008ffc:	f7f7 f8f0 	bl	80001e0 <memchr>
 8009000:	2800      	cmp	r0, #0
 8009002:	d038      	beq.n	8009076 <_svfiprintf_r+0x1d6>
 8009004:	4b22      	ldr	r3, [pc, #136]	; (8009090 <_svfiprintf_r+0x1f0>)
 8009006:	bb1b      	cbnz	r3, 8009050 <_svfiprintf_r+0x1b0>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	3307      	adds	r3, #7
 800900c:	f023 0307 	bic.w	r3, r3, #7
 8009010:	3308      	adds	r3, #8
 8009012:	9303      	str	r3, [sp, #12]
 8009014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009016:	4433      	add	r3, r6
 8009018:	9309      	str	r3, [sp, #36]	; 0x24
 800901a:	e768      	b.n	8008eee <_svfiprintf_r+0x4e>
 800901c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009020:	460c      	mov	r4, r1
 8009022:	2001      	movs	r0, #1
 8009024:	e7a6      	b.n	8008f74 <_svfiprintf_r+0xd4>
 8009026:	2300      	movs	r3, #0
 8009028:	3401      	adds	r4, #1
 800902a:	9305      	str	r3, [sp, #20]
 800902c:	4619      	mov	r1, r3
 800902e:	f04f 0c0a 	mov.w	ip, #10
 8009032:	4620      	mov	r0, r4
 8009034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009038:	3a30      	subs	r2, #48	; 0x30
 800903a:	2a09      	cmp	r2, #9
 800903c:	d903      	bls.n	8009046 <_svfiprintf_r+0x1a6>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0c6      	beq.n	8008fd0 <_svfiprintf_r+0x130>
 8009042:	9105      	str	r1, [sp, #20]
 8009044:	e7c4      	b.n	8008fd0 <_svfiprintf_r+0x130>
 8009046:	fb0c 2101 	mla	r1, ip, r1, r2
 800904a:	4604      	mov	r4, r0
 800904c:	2301      	movs	r3, #1
 800904e:	e7f0      	b.n	8009032 <_svfiprintf_r+0x192>
 8009050:	ab03      	add	r3, sp, #12
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	462a      	mov	r2, r5
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <_svfiprintf_r+0x1f4>)
 8009058:	a904      	add	r1, sp, #16
 800905a:	4638      	mov	r0, r7
 800905c:	f7fc fc9a 	bl	8005994 <_printf_float>
 8009060:	1c42      	adds	r2, r0, #1
 8009062:	4606      	mov	r6, r0
 8009064:	d1d6      	bne.n	8009014 <_svfiprintf_r+0x174>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	065b      	lsls	r3, r3, #25
 800906a:	f53f af2d 	bmi.w	8008ec8 <_svfiprintf_r+0x28>
 800906e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009070:	b01d      	add	sp, #116	; 0x74
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <_svfiprintf_r+0x1f4>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	4638      	mov	r0, r7
 8009082:	f7fc ff2b 	bl	8005edc <_printf_i>
 8009086:	e7eb      	b.n	8009060 <_svfiprintf_r+0x1c0>
 8009088:	0800b409 	.word	0x0800b409
 800908c:	0800b413 	.word	0x0800b413
 8009090:	08005995 	.word	0x08005995
 8009094:	08008ded 	.word	0x08008ded
 8009098:	0800b40f 	.word	0x0800b40f

0800909c <__sflush_r>:
 800909c:	898a      	ldrh	r2, [r1, #12]
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	4605      	mov	r5, r0
 80090a4:	0710      	lsls	r0, r2, #28
 80090a6:	460c      	mov	r4, r1
 80090a8:	d458      	bmi.n	800915c <__sflush_r+0xc0>
 80090aa:	684b      	ldr	r3, [r1, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dc05      	bgt.n	80090bc <__sflush_r+0x20>
 80090b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	dc02      	bgt.n	80090bc <__sflush_r+0x20>
 80090b6:	2000      	movs	r0, #0
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090be:	2e00      	cmp	r6, #0
 80090c0:	d0f9      	beq.n	80090b6 <__sflush_r+0x1a>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090c8:	682f      	ldr	r7, [r5, #0]
 80090ca:	6a21      	ldr	r1, [r4, #32]
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	d032      	beq.n	8009136 <__sflush_r+0x9a>
 80090d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	075a      	lsls	r2, r3, #29
 80090d6:	d505      	bpl.n	80090e4 <__sflush_r+0x48>
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	1ac0      	subs	r0, r0, r3
 80090dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090de:	b10b      	cbz	r3, 80090e4 <__sflush_r+0x48>
 80090e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090e2:	1ac0      	subs	r0, r0, r3
 80090e4:	2300      	movs	r3, #0
 80090e6:	4602      	mov	r2, r0
 80090e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ea:	6a21      	ldr	r1, [r4, #32]
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b0      	blx	r6
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	d106      	bne.n	8009104 <__sflush_r+0x68>
 80090f6:	6829      	ldr	r1, [r5, #0]
 80090f8:	291d      	cmp	r1, #29
 80090fa:	d82b      	bhi.n	8009154 <__sflush_r+0xb8>
 80090fc:	4a29      	ldr	r2, [pc, #164]	; (80091a4 <__sflush_r+0x108>)
 80090fe:	410a      	asrs	r2, r1
 8009100:	07d6      	lsls	r6, r2, #31
 8009102:	d427      	bmi.n	8009154 <__sflush_r+0xb8>
 8009104:	2200      	movs	r2, #0
 8009106:	6062      	str	r2, [r4, #4]
 8009108:	04d9      	lsls	r1, r3, #19
 800910a:	6922      	ldr	r2, [r4, #16]
 800910c:	6022      	str	r2, [r4, #0]
 800910e:	d504      	bpl.n	800911a <__sflush_r+0x7e>
 8009110:	1c42      	adds	r2, r0, #1
 8009112:	d101      	bne.n	8009118 <__sflush_r+0x7c>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b903      	cbnz	r3, 800911a <__sflush_r+0x7e>
 8009118:	6560      	str	r0, [r4, #84]	; 0x54
 800911a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800911c:	602f      	str	r7, [r5, #0]
 800911e:	2900      	cmp	r1, #0
 8009120:	d0c9      	beq.n	80090b6 <__sflush_r+0x1a>
 8009122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009126:	4299      	cmp	r1, r3
 8009128:	d002      	beq.n	8009130 <__sflush_r+0x94>
 800912a:	4628      	mov	r0, r5
 800912c:	f7fe fa1a 	bl	8007564 <_free_r>
 8009130:	2000      	movs	r0, #0
 8009132:	6360      	str	r0, [r4, #52]	; 0x34
 8009134:	e7c0      	b.n	80090b8 <__sflush_r+0x1c>
 8009136:	2301      	movs	r3, #1
 8009138:	4628      	mov	r0, r5
 800913a:	47b0      	blx	r6
 800913c:	1c41      	adds	r1, r0, #1
 800913e:	d1c8      	bne.n	80090d2 <__sflush_r+0x36>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0c5      	beq.n	80090d2 <__sflush_r+0x36>
 8009146:	2b1d      	cmp	r3, #29
 8009148:	d001      	beq.n	800914e <__sflush_r+0xb2>
 800914a:	2b16      	cmp	r3, #22
 800914c:	d101      	bne.n	8009152 <__sflush_r+0xb6>
 800914e:	602f      	str	r7, [r5, #0]
 8009150:	e7b1      	b.n	80090b6 <__sflush_r+0x1a>
 8009152:	89a3      	ldrh	r3, [r4, #12]
 8009154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009158:	81a3      	strh	r3, [r4, #12]
 800915a:	e7ad      	b.n	80090b8 <__sflush_r+0x1c>
 800915c:	690f      	ldr	r7, [r1, #16]
 800915e:	2f00      	cmp	r7, #0
 8009160:	d0a9      	beq.n	80090b6 <__sflush_r+0x1a>
 8009162:	0793      	lsls	r3, r2, #30
 8009164:	680e      	ldr	r6, [r1, #0]
 8009166:	bf08      	it	eq
 8009168:	694b      	ldreq	r3, [r1, #20]
 800916a:	600f      	str	r7, [r1, #0]
 800916c:	bf18      	it	ne
 800916e:	2300      	movne	r3, #0
 8009170:	eba6 0807 	sub.w	r8, r6, r7
 8009174:	608b      	str	r3, [r1, #8]
 8009176:	f1b8 0f00 	cmp.w	r8, #0
 800917a:	dd9c      	ble.n	80090b6 <__sflush_r+0x1a>
 800917c:	6a21      	ldr	r1, [r4, #32]
 800917e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009180:	4643      	mov	r3, r8
 8009182:	463a      	mov	r2, r7
 8009184:	4628      	mov	r0, r5
 8009186:	47b0      	blx	r6
 8009188:	2800      	cmp	r0, #0
 800918a:	dc06      	bgt.n	800919a <__sflush_r+0xfe>
 800918c:	89a3      	ldrh	r3, [r4, #12]
 800918e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	e78e      	b.n	80090b8 <__sflush_r+0x1c>
 800919a:	4407      	add	r7, r0
 800919c:	eba8 0800 	sub.w	r8, r8, r0
 80091a0:	e7e9      	b.n	8009176 <__sflush_r+0xda>
 80091a2:	bf00      	nop
 80091a4:	dfbffffe 	.word	0xdfbffffe

080091a8 <_fflush_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	690b      	ldr	r3, [r1, #16]
 80091ac:	4605      	mov	r5, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	b913      	cbnz	r3, 80091b8 <_fflush_r+0x10>
 80091b2:	2500      	movs	r5, #0
 80091b4:	4628      	mov	r0, r5
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	b118      	cbz	r0, 80091c2 <_fflush_r+0x1a>
 80091ba:	6a03      	ldr	r3, [r0, #32]
 80091bc:	b90b      	cbnz	r3, 80091c2 <_fflush_r+0x1a>
 80091be:	f7fd fa39 	bl	8006634 <__sinit>
 80091c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0f3      	beq.n	80091b2 <_fflush_r+0xa>
 80091ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091cc:	07d0      	lsls	r0, r2, #31
 80091ce:	d404      	bmi.n	80091da <_fflush_r+0x32>
 80091d0:	0599      	lsls	r1, r3, #22
 80091d2:	d402      	bmi.n	80091da <_fflush_r+0x32>
 80091d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091d6:	f7fd fb43 	bl	8006860 <__retarget_lock_acquire_recursive>
 80091da:	4628      	mov	r0, r5
 80091dc:	4621      	mov	r1, r4
 80091de:	f7ff ff5d 	bl	800909c <__sflush_r>
 80091e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091e4:	07da      	lsls	r2, r3, #31
 80091e6:	4605      	mov	r5, r0
 80091e8:	d4e4      	bmi.n	80091b4 <_fflush_r+0xc>
 80091ea:	89a3      	ldrh	r3, [r4, #12]
 80091ec:	059b      	lsls	r3, r3, #22
 80091ee:	d4e1      	bmi.n	80091b4 <_fflush_r+0xc>
 80091f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f2:	f7fd fb36 	bl	8006862 <__retarget_lock_release_recursive>
 80091f6:	e7dd      	b.n	80091b4 <_fflush_r+0xc>

080091f8 <memmove>:
 80091f8:	4288      	cmp	r0, r1
 80091fa:	b510      	push	{r4, lr}
 80091fc:	eb01 0402 	add.w	r4, r1, r2
 8009200:	d902      	bls.n	8009208 <memmove+0x10>
 8009202:	4284      	cmp	r4, r0
 8009204:	4623      	mov	r3, r4
 8009206:	d807      	bhi.n	8009218 <memmove+0x20>
 8009208:	1e43      	subs	r3, r0, #1
 800920a:	42a1      	cmp	r1, r4
 800920c:	d008      	beq.n	8009220 <memmove+0x28>
 800920e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009216:	e7f8      	b.n	800920a <memmove+0x12>
 8009218:	4402      	add	r2, r0
 800921a:	4601      	mov	r1, r0
 800921c:	428a      	cmp	r2, r1
 800921e:	d100      	bne.n	8009222 <memmove+0x2a>
 8009220:	bd10      	pop	{r4, pc}
 8009222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800922a:	e7f7      	b.n	800921c <memmove+0x24>

0800922c <strncmp>:
 800922c:	b510      	push	{r4, lr}
 800922e:	b16a      	cbz	r2, 800924c <strncmp+0x20>
 8009230:	3901      	subs	r1, #1
 8009232:	1884      	adds	r4, r0, r2
 8009234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009238:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800923c:	429a      	cmp	r2, r3
 800923e:	d103      	bne.n	8009248 <strncmp+0x1c>
 8009240:	42a0      	cmp	r0, r4
 8009242:	d001      	beq.n	8009248 <strncmp+0x1c>
 8009244:	2a00      	cmp	r2, #0
 8009246:	d1f5      	bne.n	8009234 <strncmp+0x8>
 8009248:	1ad0      	subs	r0, r2, r3
 800924a:	bd10      	pop	{r4, pc}
 800924c:	4610      	mov	r0, r2
 800924e:	e7fc      	b.n	800924a <strncmp+0x1e>

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f8 fe56 	bl	8001f0c <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	200007e8 	.word	0x200007e8

08009270 <memcpy>:
 8009270:	440a      	add	r2, r1
 8009272:	4291      	cmp	r1, r2
 8009274:	f100 33ff 	add.w	r3, r0, #4294967295
 8009278:	d100      	bne.n	800927c <memcpy+0xc>
 800927a:	4770      	bx	lr
 800927c:	b510      	push	{r4, lr}
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009286:	4291      	cmp	r1, r2
 8009288:	d1f9      	bne.n	800927e <memcpy+0xe>
 800928a:	bd10      	pop	{r4, pc}
 800928c:	0000      	movs	r0, r0
	...

08009290 <nan>:
 8009290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009298 <nan+0x8>
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	00000000 	.word	0x00000000
 800929c:	7ff80000 	.word	0x7ff80000

080092a0 <__assert_func>:
 80092a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092a2:	4614      	mov	r4, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <__assert_func+0x2c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4605      	mov	r5, r0
 80092ac:	68d8      	ldr	r0, [r3, #12]
 80092ae:	b14c      	cbz	r4, 80092c4 <__assert_func+0x24>
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <__assert_func+0x30>)
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b8:	4906      	ldr	r1, [pc, #24]	; (80092d4 <__assert_func+0x34>)
 80092ba:	462b      	mov	r3, r5
 80092bc:	f000 fbca 	bl	8009a54 <fiprintf>
 80092c0:	f000 fbda 	bl	8009a78 <abort>
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <__assert_func+0x38>)
 80092c6:	461c      	mov	r4, r3
 80092c8:	e7f3      	b.n	80092b2 <__assert_func+0x12>
 80092ca:	bf00      	nop
 80092cc:	2000017c 	.word	0x2000017c
 80092d0:	0800b422 	.word	0x0800b422
 80092d4:	0800b42f 	.word	0x0800b42f
 80092d8:	0800b45d 	.word	0x0800b45d

080092dc <_calloc_r>:
 80092dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092de:	fba1 2402 	umull	r2, r4, r1, r2
 80092e2:	b94c      	cbnz	r4, 80092f8 <_calloc_r+0x1c>
 80092e4:	4611      	mov	r1, r2
 80092e6:	9201      	str	r2, [sp, #4]
 80092e8:	f7fe f9b0 	bl	800764c <_malloc_r>
 80092ec:	9a01      	ldr	r2, [sp, #4]
 80092ee:	4605      	mov	r5, r0
 80092f0:	b930      	cbnz	r0, 8009300 <_calloc_r+0x24>
 80092f2:	4628      	mov	r0, r5
 80092f4:	b003      	add	sp, #12
 80092f6:	bd30      	pop	{r4, r5, pc}
 80092f8:	220c      	movs	r2, #12
 80092fa:	6002      	str	r2, [r0, #0]
 80092fc:	2500      	movs	r5, #0
 80092fe:	e7f8      	b.n	80092f2 <_calloc_r+0x16>
 8009300:	4621      	mov	r1, r4
 8009302:	f7fd fa30 	bl	8006766 <memset>
 8009306:	e7f4      	b.n	80092f2 <_calloc_r+0x16>

08009308 <rshift>:
 8009308:	6903      	ldr	r3, [r0, #16]
 800930a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800930e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009312:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009316:	f100 0414 	add.w	r4, r0, #20
 800931a:	dd45      	ble.n	80093a8 <rshift+0xa0>
 800931c:	f011 011f 	ands.w	r1, r1, #31
 8009320:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009324:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009328:	d10c      	bne.n	8009344 <rshift+0x3c>
 800932a:	f100 0710 	add.w	r7, r0, #16
 800932e:	4629      	mov	r1, r5
 8009330:	42b1      	cmp	r1, r6
 8009332:	d334      	bcc.n	800939e <rshift+0x96>
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	1eea      	subs	r2, r5, #3
 800933a:	4296      	cmp	r6, r2
 800933c:	bf38      	it	cc
 800933e:	2300      	movcc	r3, #0
 8009340:	4423      	add	r3, r4
 8009342:	e015      	b.n	8009370 <rshift+0x68>
 8009344:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009348:	f1c1 0820 	rsb	r8, r1, #32
 800934c:	40cf      	lsrs	r7, r1
 800934e:	f105 0e04 	add.w	lr, r5, #4
 8009352:	46a1      	mov	r9, r4
 8009354:	4576      	cmp	r6, lr
 8009356:	46f4      	mov	ip, lr
 8009358:	d815      	bhi.n	8009386 <rshift+0x7e>
 800935a:	1a9a      	subs	r2, r3, r2
 800935c:	0092      	lsls	r2, r2, #2
 800935e:	3a04      	subs	r2, #4
 8009360:	3501      	adds	r5, #1
 8009362:	42ae      	cmp	r6, r5
 8009364:	bf38      	it	cc
 8009366:	2200      	movcc	r2, #0
 8009368:	18a3      	adds	r3, r4, r2
 800936a:	50a7      	str	r7, [r4, r2]
 800936c:	b107      	cbz	r7, 8009370 <rshift+0x68>
 800936e:	3304      	adds	r3, #4
 8009370:	1b1a      	subs	r2, r3, r4
 8009372:	42a3      	cmp	r3, r4
 8009374:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009378:	bf08      	it	eq
 800937a:	2300      	moveq	r3, #0
 800937c:	6102      	str	r2, [r0, #16]
 800937e:	bf08      	it	eq
 8009380:	6143      	streq	r3, [r0, #20]
 8009382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009386:	f8dc c000 	ldr.w	ip, [ip]
 800938a:	fa0c fc08 	lsl.w	ip, ip, r8
 800938e:	ea4c 0707 	orr.w	r7, ip, r7
 8009392:	f849 7b04 	str.w	r7, [r9], #4
 8009396:	f85e 7b04 	ldr.w	r7, [lr], #4
 800939a:	40cf      	lsrs	r7, r1
 800939c:	e7da      	b.n	8009354 <rshift+0x4c>
 800939e:	f851 cb04 	ldr.w	ip, [r1], #4
 80093a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80093a6:	e7c3      	b.n	8009330 <rshift+0x28>
 80093a8:	4623      	mov	r3, r4
 80093aa:	e7e1      	b.n	8009370 <rshift+0x68>

080093ac <__hexdig_fun>:
 80093ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093b0:	2b09      	cmp	r3, #9
 80093b2:	d802      	bhi.n	80093ba <__hexdig_fun+0xe>
 80093b4:	3820      	subs	r0, #32
 80093b6:	b2c0      	uxtb	r0, r0
 80093b8:	4770      	bx	lr
 80093ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d801      	bhi.n	80093c6 <__hexdig_fun+0x1a>
 80093c2:	3847      	subs	r0, #71	; 0x47
 80093c4:	e7f7      	b.n	80093b6 <__hexdig_fun+0xa>
 80093c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093ca:	2b05      	cmp	r3, #5
 80093cc:	d801      	bhi.n	80093d2 <__hexdig_fun+0x26>
 80093ce:	3827      	subs	r0, #39	; 0x27
 80093d0:	e7f1      	b.n	80093b6 <__hexdig_fun+0xa>
 80093d2:	2000      	movs	r0, #0
 80093d4:	4770      	bx	lr
	...

080093d8 <__gethex>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	4617      	mov	r7, r2
 80093de:	680a      	ldr	r2, [r1, #0]
 80093e0:	b085      	sub	sp, #20
 80093e2:	f102 0b02 	add.w	fp, r2, #2
 80093e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093ee:	4681      	mov	r9, r0
 80093f0:	468a      	mov	sl, r1
 80093f2:	9302      	str	r3, [sp, #8]
 80093f4:	32fe      	adds	r2, #254	; 0xfe
 80093f6:	eb02 030b 	add.w	r3, r2, fp
 80093fa:	46d8      	mov	r8, fp
 80093fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2830      	cmp	r0, #48	; 0x30
 8009404:	d0f7      	beq.n	80093f6 <__gethex+0x1e>
 8009406:	f7ff ffd1 	bl	80093ac <__hexdig_fun>
 800940a:	4604      	mov	r4, r0
 800940c:	2800      	cmp	r0, #0
 800940e:	d138      	bne.n	8009482 <__gethex+0xaa>
 8009410:	49a7      	ldr	r1, [pc, #668]	; (80096b0 <__gethex+0x2d8>)
 8009412:	2201      	movs	r2, #1
 8009414:	4640      	mov	r0, r8
 8009416:	f7ff ff09 	bl	800922c <strncmp>
 800941a:	4606      	mov	r6, r0
 800941c:	2800      	cmp	r0, #0
 800941e:	d169      	bne.n	80094f4 <__gethex+0x11c>
 8009420:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009424:	465d      	mov	r5, fp
 8009426:	f7ff ffc1 	bl	80093ac <__hexdig_fun>
 800942a:	2800      	cmp	r0, #0
 800942c:	d064      	beq.n	80094f8 <__gethex+0x120>
 800942e:	465a      	mov	r2, fp
 8009430:	7810      	ldrb	r0, [r2, #0]
 8009432:	2830      	cmp	r0, #48	; 0x30
 8009434:	4690      	mov	r8, r2
 8009436:	f102 0201 	add.w	r2, r2, #1
 800943a:	d0f9      	beq.n	8009430 <__gethex+0x58>
 800943c:	f7ff ffb6 	bl	80093ac <__hexdig_fun>
 8009440:	2301      	movs	r3, #1
 8009442:	fab0 f480 	clz	r4, r0
 8009446:	0964      	lsrs	r4, r4, #5
 8009448:	465e      	mov	r6, fp
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	4642      	mov	r2, r8
 800944e:	4615      	mov	r5, r2
 8009450:	3201      	adds	r2, #1
 8009452:	7828      	ldrb	r0, [r5, #0]
 8009454:	f7ff ffaa 	bl	80093ac <__hexdig_fun>
 8009458:	2800      	cmp	r0, #0
 800945a:	d1f8      	bne.n	800944e <__gethex+0x76>
 800945c:	4994      	ldr	r1, [pc, #592]	; (80096b0 <__gethex+0x2d8>)
 800945e:	2201      	movs	r2, #1
 8009460:	4628      	mov	r0, r5
 8009462:	f7ff fee3 	bl	800922c <strncmp>
 8009466:	b978      	cbnz	r0, 8009488 <__gethex+0xb0>
 8009468:	b946      	cbnz	r6, 800947c <__gethex+0xa4>
 800946a:	1c6e      	adds	r6, r5, #1
 800946c:	4632      	mov	r2, r6
 800946e:	4615      	mov	r5, r2
 8009470:	3201      	adds	r2, #1
 8009472:	7828      	ldrb	r0, [r5, #0]
 8009474:	f7ff ff9a 	bl	80093ac <__hexdig_fun>
 8009478:	2800      	cmp	r0, #0
 800947a:	d1f8      	bne.n	800946e <__gethex+0x96>
 800947c:	1b73      	subs	r3, r6, r5
 800947e:	009e      	lsls	r6, r3, #2
 8009480:	e004      	b.n	800948c <__gethex+0xb4>
 8009482:	2400      	movs	r4, #0
 8009484:	4626      	mov	r6, r4
 8009486:	e7e1      	b.n	800944c <__gethex+0x74>
 8009488:	2e00      	cmp	r6, #0
 800948a:	d1f7      	bne.n	800947c <__gethex+0xa4>
 800948c:	782b      	ldrb	r3, [r5, #0]
 800948e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009492:	2b50      	cmp	r3, #80	; 0x50
 8009494:	d13d      	bne.n	8009512 <__gethex+0x13a>
 8009496:	786b      	ldrb	r3, [r5, #1]
 8009498:	2b2b      	cmp	r3, #43	; 0x2b
 800949a:	d02f      	beq.n	80094fc <__gethex+0x124>
 800949c:	2b2d      	cmp	r3, #45	; 0x2d
 800949e:	d031      	beq.n	8009504 <__gethex+0x12c>
 80094a0:	1c69      	adds	r1, r5, #1
 80094a2:	f04f 0b00 	mov.w	fp, #0
 80094a6:	7808      	ldrb	r0, [r1, #0]
 80094a8:	f7ff ff80 	bl	80093ac <__hexdig_fun>
 80094ac:	1e42      	subs	r2, r0, #1
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	2a18      	cmp	r2, #24
 80094b2:	d82e      	bhi.n	8009512 <__gethex+0x13a>
 80094b4:	f1a0 0210 	sub.w	r2, r0, #16
 80094b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094bc:	f7ff ff76 	bl	80093ac <__hexdig_fun>
 80094c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80094c4:	fa5f fc8c 	uxtb.w	ip, ip
 80094c8:	f1bc 0f18 	cmp.w	ip, #24
 80094cc:	d91d      	bls.n	800950a <__gethex+0x132>
 80094ce:	f1bb 0f00 	cmp.w	fp, #0
 80094d2:	d000      	beq.n	80094d6 <__gethex+0xfe>
 80094d4:	4252      	negs	r2, r2
 80094d6:	4416      	add	r6, r2
 80094d8:	f8ca 1000 	str.w	r1, [sl]
 80094dc:	b1dc      	cbz	r4, 8009516 <__gethex+0x13e>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf14      	ite	ne
 80094e4:	f04f 0800 	movne.w	r8, #0
 80094e8:	f04f 0806 	moveq.w	r8, #6
 80094ec:	4640      	mov	r0, r8
 80094ee:	b005      	add	sp, #20
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f4:	4645      	mov	r5, r8
 80094f6:	4626      	mov	r6, r4
 80094f8:	2401      	movs	r4, #1
 80094fa:	e7c7      	b.n	800948c <__gethex+0xb4>
 80094fc:	f04f 0b00 	mov.w	fp, #0
 8009500:	1ca9      	adds	r1, r5, #2
 8009502:	e7d0      	b.n	80094a6 <__gethex+0xce>
 8009504:	f04f 0b01 	mov.w	fp, #1
 8009508:	e7fa      	b.n	8009500 <__gethex+0x128>
 800950a:	230a      	movs	r3, #10
 800950c:	fb03 0002 	mla	r0, r3, r2, r0
 8009510:	e7d0      	b.n	80094b4 <__gethex+0xdc>
 8009512:	4629      	mov	r1, r5
 8009514:	e7e0      	b.n	80094d8 <__gethex+0x100>
 8009516:	eba5 0308 	sub.w	r3, r5, r8
 800951a:	3b01      	subs	r3, #1
 800951c:	4621      	mov	r1, r4
 800951e:	2b07      	cmp	r3, #7
 8009520:	dc0a      	bgt.n	8009538 <__gethex+0x160>
 8009522:	4648      	mov	r0, r9
 8009524:	f7fe f91e 	bl	8007764 <_Balloc>
 8009528:	4604      	mov	r4, r0
 800952a:	b940      	cbnz	r0, 800953e <__gethex+0x166>
 800952c:	4b61      	ldr	r3, [pc, #388]	; (80096b4 <__gethex+0x2dc>)
 800952e:	4602      	mov	r2, r0
 8009530:	21e4      	movs	r1, #228	; 0xe4
 8009532:	4861      	ldr	r0, [pc, #388]	; (80096b8 <__gethex+0x2e0>)
 8009534:	f7ff feb4 	bl	80092a0 <__assert_func>
 8009538:	3101      	adds	r1, #1
 800953a:	105b      	asrs	r3, r3, #1
 800953c:	e7ef      	b.n	800951e <__gethex+0x146>
 800953e:	f100 0a14 	add.w	sl, r0, #20
 8009542:	2300      	movs	r3, #0
 8009544:	495a      	ldr	r1, [pc, #360]	; (80096b0 <__gethex+0x2d8>)
 8009546:	f8cd a004 	str.w	sl, [sp, #4]
 800954a:	469b      	mov	fp, r3
 800954c:	45a8      	cmp	r8, r5
 800954e:	d342      	bcc.n	80095d6 <__gethex+0x1fe>
 8009550:	9801      	ldr	r0, [sp, #4]
 8009552:	f840 bb04 	str.w	fp, [r0], #4
 8009556:	eba0 000a 	sub.w	r0, r0, sl
 800955a:	1080      	asrs	r0, r0, #2
 800955c:	6120      	str	r0, [r4, #16]
 800955e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009562:	4658      	mov	r0, fp
 8009564:	f7fe f9f0 	bl	8007948 <__hi0bits>
 8009568:	683d      	ldr	r5, [r7, #0]
 800956a:	eba8 0000 	sub.w	r0, r8, r0
 800956e:	42a8      	cmp	r0, r5
 8009570:	dd59      	ble.n	8009626 <__gethex+0x24e>
 8009572:	eba0 0805 	sub.w	r8, r0, r5
 8009576:	4641      	mov	r1, r8
 8009578:	4620      	mov	r0, r4
 800957a:	f7fe fd7f 	bl	800807c <__any_on>
 800957e:	4683      	mov	fp, r0
 8009580:	b1b8      	cbz	r0, 80095b2 <__gethex+0x1da>
 8009582:	f108 33ff 	add.w	r3, r8, #4294967295
 8009586:	1159      	asrs	r1, r3, #5
 8009588:	f003 021f 	and.w	r2, r3, #31
 800958c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009590:	f04f 0b01 	mov.w	fp, #1
 8009594:	fa0b f202 	lsl.w	r2, fp, r2
 8009598:	420a      	tst	r2, r1
 800959a:	d00a      	beq.n	80095b2 <__gethex+0x1da>
 800959c:	455b      	cmp	r3, fp
 800959e:	dd06      	ble.n	80095ae <__gethex+0x1d6>
 80095a0:	f1a8 0102 	sub.w	r1, r8, #2
 80095a4:	4620      	mov	r0, r4
 80095a6:	f7fe fd69 	bl	800807c <__any_on>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d138      	bne.n	8009620 <__gethex+0x248>
 80095ae:	f04f 0b02 	mov.w	fp, #2
 80095b2:	4641      	mov	r1, r8
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7ff fea7 	bl	8009308 <rshift>
 80095ba:	4446      	add	r6, r8
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	42b3      	cmp	r3, r6
 80095c0:	da41      	bge.n	8009646 <__gethex+0x26e>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4648      	mov	r0, r9
 80095c6:	f7fe f90d 	bl	80077e4 <_Bfree>
 80095ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095cc:	2300      	movs	r3, #0
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80095d4:	e78a      	b.n	80094ec <__gethex+0x114>
 80095d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80095da:	2a2e      	cmp	r2, #46	; 0x2e
 80095dc:	d014      	beq.n	8009608 <__gethex+0x230>
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d106      	bne.n	80095f0 <__gethex+0x218>
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	f843 bb04 	str.w	fp, [r3], #4
 80095e8:	f04f 0b00 	mov.w	fp, #0
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	465b      	mov	r3, fp
 80095f0:	7828      	ldrb	r0, [r5, #0]
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	f7ff feda 	bl	80093ac <__hexdig_fun>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	f000 000f 	and.w	r0, r0, #15
 80095fe:	4098      	lsls	r0, r3
 8009600:	ea4b 0b00 	orr.w	fp, fp, r0
 8009604:	3304      	adds	r3, #4
 8009606:	e7a1      	b.n	800954c <__gethex+0x174>
 8009608:	45a8      	cmp	r8, r5
 800960a:	d8e8      	bhi.n	80095de <__gethex+0x206>
 800960c:	2201      	movs	r2, #1
 800960e:	4628      	mov	r0, r5
 8009610:	9303      	str	r3, [sp, #12]
 8009612:	f7ff fe0b 	bl	800922c <strncmp>
 8009616:	4926      	ldr	r1, [pc, #152]	; (80096b0 <__gethex+0x2d8>)
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	2800      	cmp	r0, #0
 800961c:	d1df      	bne.n	80095de <__gethex+0x206>
 800961e:	e795      	b.n	800954c <__gethex+0x174>
 8009620:	f04f 0b03 	mov.w	fp, #3
 8009624:	e7c5      	b.n	80095b2 <__gethex+0x1da>
 8009626:	da0b      	bge.n	8009640 <__gethex+0x268>
 8009628:	eba5 0800 	sub.w	r8, r5, r0
 800962c:	4621      	mov	r1, r4
 800962e:	4642      	mov	r2, r8
 8009630:	4648      	mov	r0, r9
 8009632:	f7fe faf1 	bl	8007c18 <__lshift>
 8009636:	eba6 0608 	sub.w	r6, r6, r8
 800963a:	4604      	mov	r4, r0
 800963c:	f100 0a14 	add.w	sl, r0, #20
 8009640:	f04f 0b00 	mov.w	fp, #0
 8009644:	e7ba      	b.n	80095bc <__gethex+0x1e4>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	42b3      	cmp	r3, r6
 800964a:	dd73      	ble.n	8009734 <__gethex+0x35c>
 800964c:	1b9e      	subs	r6, r3, r6
 800964e:	42b5      	cmp	r5, r6
 8009650:	dc34      	bgt.n	80096bc <__gethex+0x2e4>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d023      	beq.n	80096a0 <__gethex+0x2c8>
 8009658:	2b03      	cmp	r3, #3
 800965a:	d025      	beq.n	80096a8 <__gethex+0x2d0>
 800965c:	2b01      	cmp	r3, #1
 800965e:	d115      	bne.n	800968c <__gethex+0x2b4>
 8009660:	42b5      	cmp	r5, r6
 8009662:	d113      	bne.n	800968c <__gethex+0x2b4>
 8009664:	2d01      	cmp	r5, #1
 8009666:	d10b      	bne.n	8009680 <__gethex+0x2a8>
 8009668:	9a02      	ldr	r2, [sp, #8]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	2301      	movs	r3, #1
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	f8ca 3000 	str.w	r3, [sl]
 8009676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009678:	f04f 0862 	mov.w	r8, #98	; 0x62
 800967c:	601c      	str	r4, [r3, #0]
 800967e:	e735      	b.n	80094ec <__gethex+0x114>
 8009680:	1e69      	subs	r1, r5, #1
 8009682:	4620      	mov	r0, r4
 8009684:	f7fe fcfa 	bl	800807c <__any_on>
 8009688:	2800      	cmp	r0, #0
 800968a:	d1ed      	bne.n	8009668 <__gethex+0x290>
 800968c:	4621      	mov	r1, r4
 800968e:	4648      	mov	r0, r9
 8009690:	f7fe f8a8 	bl	80077e4 <_Bfree>
 8009694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009696:	2300      	movs	r3, #0
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800969e:	e725      	b.n	80094ec <__gethex+0x114>
 80096a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f2      	bne.n	800968c <__gethex+0x2b4>
 80096a6:	e7df      	b.n	8009668 <__gethex+0x290>
 80096a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1dc      	bne.n	8009668 <__gethex+0x290>
 80096ae:	e7ed      	b.n	800968c <__gethex+0x2b4>
 80096b0:	0800b2b4 	.word	0x0800b2b4
 80096b4:	0800b149 	.word	0x0800b149
 80096b8:	0800b45e 	.word	0x0800b45e
 80096bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80096c0:	f1bb 0f00 	cmp.w	fp, #0
 80096c4:	d133      	bne.n	800972e <__gethex+0x356>
 80096c6:	f1b8 0f00 	cmp.w	r8, #0
 80096ca:	d004      	beq.n	80096d6 <__gethex+0x2fe>
 80096cc:	4641      	mov	r1, r8
 80096ce:	4620      	mov	r0, r4
 80096d0:	f7fe fcd4 	bl	800807c <__any_on>
 80096d4:	4683      	mov	fp, r0
 80096d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80096da:	2301      	movs	r3, #1
 80096dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096e0:	f008 081f 	and.w	r8, r8, #31
 80096e4:	fa03 f308 	lsl.w	r3, r3, r8
 80096e8:	4213      	tst	r3, r2
 80096ea:	4631      	mov	r1, r6
 80096ec:	4620      	mov	r0, r4
 80096ee:	bf18      	it	ne
 80096f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80096f4:	1bad      	subs	r5, r5, r6
 80096f6:	f7ff fe07 	bl	8009308 <rshift>
 80096fa:	687e      	ldr	r6, [r7, #4]
 80096fc:	f04f 0802 	mov.w	r8, #2
 8009700:	f1bb 0f00 	cmp.w	fp, #0
 8009704:	d04a      	beq.n	800979c <__gethex+0x3c4>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b02      	cmp	r3, #2
 800970a:	d016      	beq.n	800973a <__gethex+0x362>
 800970c:	2b03      	cmp	r3, #3
 800970e:	d018      	beq.n	8009742 <__gethex+0x36a>
 8009710:	2b01      	cmp	r3, #1
 8009712:	d109      	bne.n	8009728 <__gethex+0x350>
 8009714:	f01b 0f02 	tst.w	fp, #2
 8009718:	d006      	beq.n	8009728 <__gethex+0x350>
 800971a:	f8da 3000 	ldr.w	r3, [sl]
 800971e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009722:	f01b 0f01 	tst.w	fp, #1
 8009726:	d10f      	bne.n	8009748 <__gethex+0x370>
 8009728:	f048 0810 	orr.w	r8, r8, #16
 800972c:	e036      	b.n	800979c <__gethex+0x3c4>
 800972e:	f04f 0b01 	mov.w	fp, #1
 8009732:	e7d0      	b.n	80096d6 <__gethex+0x2fe>
 8009734:	f04f 0801 	mov.w	r8, #1
 8009738:	e7e2      	b.n	8009700 <__gethex+0x328>
 800973a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973c:	f1c3 0301 	rsb	r3, r3, #1
 8009740:	930f      	str	r3, [sp, #60]	; 0x3c
 8009742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0ef      	beq.n	8009728 <__gethex+0x350>
 8009748:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800974c:	f104 0214 	add.w	r2, r4, #20
 8009750:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800975a:	2300      	movs	r3, #0
 800975c:	4694      	mov	ip, r2
 800975e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009762:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009766:	d01e      	beq.n	80097a6 <__gethex+0x3ce>
 8009768:	3101      	adds	r1, #1
 800976a:	f8cc 1000 	str.w	r1, [ip]
 800976e:	f1b8 0f02 	cmp.w	r8, #2
 8009772:	f104 0214 	add.w	r2, r4, #20
 8009776:	d13d      	bne.n	80097f4 <__gethex+0x41c>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3b01      	subs	r3, #1
 800977c:	42ab      	cmp	r3, r5
 800977e:	d10b      	bne.n	8009798 <__gethex+0x3c0>
 8009780:	1169      	asrs	r1, r5, #5
 8009782:	2301      	movs	r3, #1
 8009784:	f005 051f 	and.w	r5, r5, #31
 8009788:	fa03 f505 	lsl.w	r5, r3, r5
 800978c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009790:	421d      	tst	r5, r3
 8009792:	bf18      	it	ne
 8009794:	f04f 0801 	movne.w	r8, #1
 8009798:	f048 0820 	orr.w	r8, r8, #32
 800979c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800979e:	601c      	str	r4, [r3, #0]
 80097a0:	9b02      	ldr	r3, [sp, #8]
 80097a2:	601e      	str	r6, [r3, #0]
 80097a4:	e6a2      	b.n	80094ec <__gethex+0x114>
 80097a6:	4290      	cmp	r0, r2
 80097a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80097ac:	d8d6      	bhi.n	800975c <__gethex+0x384>
 80097ae:	68a2      	ldr	r2, [r4, #8]
 80097b0:	4593      	cmp	fp, r2
 80097b2:	db17      	blt.n	80097e4 <__gethex+0x40c>
 80097b4:	6861      	ldr	r1, [r4, #4]
 80097b6:	4648      	mov	r0, r9
 80097b8:	3101      	adds	r1, #1
 80097ba:	f7fd ffd3 	bl	8007764 <_Balloc>
 80097be:	4682      	mov	sl, r0
 80097c0:	b918      	cbnz	r0, 80097ca <__gethex+0x3f2>
 80097c2:	4b1b      	ldr	r3, [pc, #108]	; (8009830 <__gethex+0x458>)
 80097c4:	4602      	mov	r2, r0
 80097c6:	2184      	movs	r1, #132	; 0x84
 80097c8:	e6b3      	b.n	8009532 <__gethex+0x15a>
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	3202      	adds	r2, #2
 80097ce:	f104 010c 	add.w	r1, r4, #12
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	300c      	adds	r0, #12
 80097d6:	f7ff fd4b 	bl	8009270 <memcpy>
 80097da:	4621      	mov	r1, r4
 80097dc:	4648      	mov	r0, r9
 80097de:	f7fe f801 	bl	80077e4 <_Bfree>
 80097e2:	4654      	mov	r4, sl
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	1c51      	adds	r1, r2, #1
 80097e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097ec:	6121      	str	r1, [r4, #16]
 80097ee:	2101      	movs	r1, #1
 80097f0:	6151      	str	r1, [r2, #20]
 80097f2:	e7bc      	b.n	800976e <__gethex+0x396>
 80097f4:	6921      	ldr	r1, [r4, #16]
 80097f6:	4559      	cmp	r1, fp
 80097f8:	dd0b      	ble.n	8009812 <__gethex+0x43a>
 80097fa:	2101      	movs	r1, #1
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7ff fd83 	bl	8009308 <rshift>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3601      	adds	r6, #1
 8009806:	42b3      	cmp	r3, r6
 8009808:	f6ff aedb 	blt.w	80095c2 <__gethex+0x1ea>
 800980c:	f04f 0801 	mov.w	r8, #1
 8009810:	e7c2      	b.n	8009798 <__gethex+0x3c0>
 8009812:	f015 051f 	ands.w	r5, r5, #31
 8009816:	d0f9      	beq.n	800980c <__gethex+0x434>
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	441a      	add	r2, r3
 800981c:	f1c5 0520 	rsb	r5, r5, #32
 8009820:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009824:	f7fe f890 	bl	8007948 <__hi0bits>
 8009828:	42a8      	cmp	r0, r5
 800982a:	dbe6      	blt.n	80097fa <__gethex+0x422>
 800982c:	e7ee      	b.n	800980c <__gethex+0x434>
 800982e:	bf00      	nop
 8009830:	0800b149 	.word	0x0800b149

08009834 <L_shift>:
 8009834:	f1c2 0208 	rsb	r2, r2, #8
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	b570      	push	{r4, r5, r6, lr}
 800983c:	f1c2 0620 	rsb	r6, r2, #32
 8009840:	6843      	ldr	r3, [r0, #4]
 8009842:	6804      	ldr	r4, [r0, #0]
 8009844:	fa03 f506 	lsl.w	r5, r3, r6
 8009848:	432c      	orrs	r4, r5
 800984a:	40d3      	lsrs	r3, r2
 800984c:	6004      	str	r4, [r0, #0]
 800984e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009852:	4288      	cmp	r0, r1
 8009854:	d3f4      	bcc.n	8009840 <L_shift+0xc>
 8009856:	bd70      	pop	{r4, r5, r6, pc}

08009858 <__match>:
 8009858:	b530      	push	{r4, r5, lr}
 800985a:	6803      	ldr	r3, [r0, #0]
 800985c:	3301      	adds	r3, #1
 800985e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009862:	b914      	cbnz	r4, 800986a <__match+0x12>
 8009864:	6003      	str	r3, [r0, #0]
 8009866:	2001      	movs	r0, #1
 8009868:	bd30      	pop	{r4, r5, pc}
 800986a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009872:	2d19      	cmp	r5, #25
 8009874:	bf98      	it	ls
 8009876:	3220      	addls	r2, #32
 8009878:	42a2      	cmp	r2, r4
 800987a:	d0f0      	beq.n	800985e <__match+0x6>
 800987c:	2000      	movs	r0, #0
 800987e:	e7f3      	b.n	8009868 <__match+0x10>

08009880 <__hexnan>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	680b      	ldr	r3, [r1, #0]
 8009886:	6801      	ldr	r1, [r0, #0]
 8009888:	115e      	asrs	r6, r3, #5
 800988a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800988e:	f013 031f 	ands.w	r3, r3, #31
 8009892:	b087      	sub	sp, #28
 8009894:	bf18      	it	ne
 8009896:	3604      	addne	r6, #4
 8009898:	2500      	movs	r5, #0
 800989a:	1f37      	subs	r7, r6, #4
 800989c:	4682      	mov	sl, r0
 800989e:	4690      	mov	r8, r2
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80098a6:	46b9      	mov	r9, r7
 80098a8:	463c      	mov	r4, r7
 80098aa:	9502      	str	r5, [sp, #8]
 80098ac:	46ab      	mov	fp, r5
 80098ae:	784a      	ldrb	r2, [r1, #1]
 80098b0:	1c4b      	adds	r3, r1, #1
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	b342      	cbz	r2, 8009908 <__hexnan+0x88>
 80098b6:	4610      	mov	r0, r2
 80098b8:	9105      	str	r1, [sp, #20]
 80098ba:	9204      	str	r2, [sp, #16]
 80098bc:	f7ff fd76 	bl	80093ac <__hexdig_fun>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d14f      	bne.n	8009964 <__hexnan+0xe4>
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	9905      	ldr	r1, [sp, #20]
 80098c8:	2a20      	cmp	r2, #32
 80098ca:	d818      	bhi.n	80098fe <__hexnan+0x7e>
 80098cc:	9b02      	ldr	r3, [sp, #8]
 80098ce:	459b      	cmp	fp, r3
 80098d0:	dd13      	ble.n	80098fa <__hexnan+0x7a>
 80098d2:	454c      	cmp	r4, r9
 80098d4:	d206      	bcs.n	80098e4 <__hexnan+0x64>
 80098d6:	2d07      	cmp	r5, #7
 80098d8:	dc04      	bgt.n	80098e4 <__hexnan+0x64>
 80098da:	462a      	mov	r2, r5
 80098dc:	4649      	mov	r1, r9
 80098de:	4620      	mov	r0, r4
 80098e0:	f7ff ffa8 	bl	8009834 <L_shift>
 80098e4:	4544      	cmp	r4, r8
 80098e6:	d950      	bls.n	800998a <__hexnan+0x10a>
 80098e8:	2300      	movs	r3, #0
 80098ea:	f1a4 0904 	sub.w	r9, r4, #4
 80098ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80098f2:	f8cd b008 	str.w	fp, [sp, #8]
 80098f6:	464c      	mov	r4, r9
 80098f8:	461d      	mov	r5, r3
 80098fa:	9903      	ldr	r1, [sp, #12]
 80098fc:	e7d7      	b.n	80098ae <__hexnan+0x2e>
 80098fe:	2a29      	cmp	r2, #41	; 0x29
 8009900:	d155      	bne.n	80099ae <__hexnan+0x12e>
 8009902:	3102      	adds	r1, #2
 8009904:	f8ca 1000 	str.w	r1, [sl]
 8009908:	f1bb 0f00 	cmp.w	fp, #0
 800990c:	d04f      	beq.n	80099ae <__hexnan+0x12e>
 800990e:	454c      	cmp	r4, r9
 8009910:	d206      	bcs.n	8009920 <__hexnan+0xa0>
 8009912:	2d07      	cmp	r5, #7
 8009914:	dc04      	bgt.n	8009920 <__hexnan+0xa0>
 8009916:	462a      	mov	r2, r5
 8009918:	4649      	mov	r1, r9
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff ff8a 	bl	8009834 <L_shift>
 8009920:	4544      	cmp	r4, r8
 8009922:	d934      	bls.n	800998e <__hexnan+0x10e>
 8009924:	f1a8 0204 	sub.w	r2, r8, #4
 8009928:	4623      	mov	r3, r4
 800992a:	f853 1b04 	ldr.w	r1, [r3], #4
 800992e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009932:	429f      	cmp	r7, r3
 8009934:	d2f9      	bcs.n	800992a <__hexnan+0xaa>
 8009936:	1b3b      	subs	r3, r7, r4
 8009938:	f023 0303 	bic.w	r3, r3, #3
 800993c:	3304      	adds	r3, #4
 800993e:	3e03      	subs	r6, #3
 8009940:	3401      	adds	r4, #1
 8009942:	42a6      	cmp	r6, r4
 8009944:	bf38      	it	cc
 8009946:	2304      	movcc	r3, #4
 8009948:	4443      	add	r3, r8
 800994a:	2200      	movs	r2, #0
 800994c:	f843 2b04 	str.w	r2, [r3], #4
 8009950:	429f      	cmp	r7, r3
 8009952:	d2fb      	bcs.n	800994c <__hexnan+0xcc>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	b91b      	cbnz	r3, 8009960 <__hexnan+0xe0>
 8009958:	4547      	cmp	r7, r8
 800995a:	d126      	bne.n	80099aa <__hexnan+0x12a>
 800995c:	2301      	movs	r3, #1
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	2005      	movs	r0, #5
 8009962:	e025      	b.n	80099b0 <__hexnan+0x130>
 8009964:	3501      	adds	r5, #1
 8009966:	2d08      	cmp	r5, #8
 8009968:	f10b 0b01 	add.w	fp, fp, #1
 800996c:	dd06      	ble.n	800997c <__hexnan+0xfc>
 800996e:	4544      	cmp	r4, r8
 8009970:	d9c3      	bls.n	80098fa <__hexnan+0x7a>
 8009972:	2300      	movs	r3, #0
 8009974:	f844 3c04 	str.w	r3, [r4, #-4]
 8009978:	2501      	movs	r5, #1
 800997a:	3c04      	subs	r4, #4
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	f000 000f 	and.w	r0, r0, #15
 8009982:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	e7b7      	b.n	80098fa <__hexnan+0x7a>
 800998a:	2508      	movs	r5, #8
 800998c:	e7b5      	b.n	80098fa <__hexnan+0x7a>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0df      	beq.n	8009954 <__hexnan+0xd4>
 8009994:	f1c3 0320 	rsb	r3, r3, #32
 8009998:	f04f 32ff 	mov.w	r2, #4294967295
 800999c:	40da      	lsrs	r2, r3
 800999e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80099a2:	4013      	ands	r3, r2
 80099a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80099a8:	e7d4      	b.n	8009954 <__hexnan+0xd4>
 80099aa:	3f04      	subs	r7, #4
 80099ac:	e7d2      	b.n	8009954 <__hexnan+0xd4>
 80099ae:	2004      	movs	r0, #4
 80099b0:	b007      	add	sp, #28
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099b6 <__ascii_mbtowc>:
 80099b6:	b082      	sub	sp, #8
 80099b8:	b901      	cbnz	r1, 80099bc <__ascii_mbtowc+0x6>
 80099ba:	a901      	add	r1, sp, #4
 80099bc:	b142      	cbz	r2, 80099d0 <__ascii_mbtowc+0x1a>
 80099be:	b14b      	cbz	r3, 80099d4 <__ascii_mbtowc+0x1e>
 80099c0:	7813      	ldrb	r3, [r2, #0]
 80099c2:	600b      	str	r3, [r1, #0]
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	1e10      	subs	r0, r2, #0
 80099c8:	bf18      	it	ne
 80099ca:	2001      	movne	r0, #1
 80099cc:	b002      	add	sp, #8
 80099ce:	4770      	bx	lr
 80099d0:	4610      	mov	r0, r2
 80099d2:	e7fb      	b.n	80099cc <__ascii_mbtowc+0x16>
 80099d4:	f06f 0001 	mvn.w	r0, #1
 80099d8:	e7f8      	b.n	80099cc <__ascii_mbtowc+0x16>

080099da <_realloc_r>:
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	4680      	mov	r8, r0
 80099e0:	4614      	mov	r4, r2
 80099e2:	460e      	mov	r6, r1
 80099e4:	b921      	cbnz	r1, 80099f0 <_realloc_r+0x16>
 80099e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ea:	4611      	mov	r1, r2
 80099ec:	f7fd be2e 	b.w	800764c <_malloc_r>
 80099f0:	b92a      	cbnz	r2, 80099fe <_realloc_r+0x24>
 80099f2:	f7fd fdb7 	bl	8007564 <_free_r>
 80099f6:	4625      	mov	r5, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fe:	f000 f842 	bl	8009a86 <_malloc_usable_size_r>
 8009a02:	4284      	cmp	r4, r0
 8009a04:	4607      	mov	r7, r0
 8009a06:	d802      	bhi.n	8009a0e <_realloc_r+0x34>
 8009a08:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a0c:	d812      	bhi.n	8009a34 <_realloc_r+0x5a>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4640      	mov	r0, r8
 8009a12:	f7fd fe1b 	bl	800764c <_malloc_r>
 8009a16:	4605      	mov	r5, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d0ed      	beq.n	80099f8 <_realloc_r+0x1e>
 8009a1c:	42bc      	cmp	r4, r7
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4631      	mov	r1, r6
 8009a22:	bf28      	it	cs
 8009a24:	463a      	movcs	r2, r7
 8009a26:	f7ff fc23 	bl	8009270 <memcpy>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	f7fd fd99 	bl	8007564 <_free_r>
 8009a32:	e7e1      	b.n	80099f8 <_realloc_r+0x1e>
 8009a34:	4635      	mov	r5, r6
 8009a36:	e7df      	b.n	80099f8 <_realloc_r+0x1e>

08009a38 <__ascii_wctomb>:
 8009a38:	b149      	cbz	r1, 8009a4e <__ascii_wctomb+0x16>
 8009a3a:	2aff      	cmp	r2, #255	; 0xff
 8009a3c:	bf85      	ittet	hi
 8009a3e:	238a      	movhi	r3, #138	; 0x8a
 8009a40:	6003      	strhi	r3, [r0, #0]
 8009a42:	700a      	strbls	r2, [r1, #0]
 8009a44:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a48:	bf98      	it	ls
 8009a4a:	2001      	movls	r0, #1
 8009a4c:	4770      	bx	lr
 8009a4e:	4608      	mov	r0, r1
 8009a50:	4770      	bx	lr
	...

08009a54 <fiprintf>:
 8009a54:	b40e      	push	{r1, r2, r3}
 8009a56:	b503      	push	{r0, r1, lr}
 8009a58:	4601      	mov	r1, r0
 8009a5a:	ab03      	add	r3, sp, #12
 8009a5c:	4805      	ldr	r0, [pc, #20]	; (8009a74 <fiprintf+0x20>)
 8009a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a62:	6800      	ldr	r0, [r0, #0]
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	f000 f83f 	bl	8009ae8 <_vfiprintf_r>
 8009a6a:	b002      	add	sp, #8
 8009a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a70:	b003      	add	sp, #12
 8009a72:	4770      	bx	lr
 8009a74:	2000017c 	.word	0x2000017c

08009a78 <abort>:
 8009a78:	b508      	push	{r3, lr}
 8009a7a:	2006      	movs	r0, #6
 8009a7c:	f000 fa0c 	bl	8009e98 <raise>
 8009a80:	2001      	movs	r0, #1
 8009a82:	f7f8 f9cb 	bl	8001e1c <_exit>

08009a86 <_malloc_usable_size_r>:
 8009a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a8a:	1f18      	subs	r0, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bfbc      	itt	lt
 8009a90:	580b      	ldrlt	r3, [r1, r0]
 8009a92:	18c0      	addlt	r0, r0, r3
 8009a94:	4770      	bx	lr

08009a96 <__sfputc_r>:
 8009a96:	6893      	ldr	r3, [r2, #8]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	b410      	push	{r4}
 8009a9e:	6093      	str	r3, [r2, #8]
 8009aa0:	da08      	bge.n	8009ab4 <__sfputc_r+0x1e>
 8009aa2:	6994      	ldr	r4, [r2, #24]
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	db01      	blt.n	8009aac <__sfputc_r+0x16>
 8009aa8:	290a      	cmp	r1, #10
 8009aaa:	d103      	bne.n	8009ab4 <__sfputc_r+0x1e>
 8009aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ab0:	f000 b934 	b.w	8009d1c <__swbuf_r>
 8009ab4:	6813      	ldr	r3, [r2, #0]
 8009ab6:	1c58      	adds	r0, r3, #1
 8009ab8:	6010      	str	r0, [r2, #0]
 8009aba:	7019      	strb	r1, [r3, #0]
 8009abc:	4608      	mov	r0, r1
 8009abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <__sfputs_r>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	4614      	mov	r4, r2
 8009acc:	18d5      	adds	r5, r2, r3
 8009ace:	42ac      	cmp	r4, r5
 8009ad0:	d101      	bne.n	8009ad6 <__sfputs_r+0x12>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e007      	b.n	8009ae6 <__sfputs_r+0x22>
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	463a      	mov	r2, r7
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff ffda 	bl	8009a96 <__sfputc_r>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d1f3      	bne.n	8009ace <__sfputs_r+0xa>
 8009ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ae8 <_vfiprintf_r>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	460d      	mov	r5, r1
 8009aee:	b09d      	sub	sp, #116	; 0x74
 8009af0:	4614      	mov	r4, r2
 8009af2:	4698      	mov	r8, r3
 8009af4:	4606      	mov	r6, r0
 8009af6:	b118      	cbz	r0, 8009b00 <_vfiprintf_r+0x18>
 8009af8:	6a03      	ldr	r3, [r0, #32]
 8009afa:	b90b      	cbnz	r3, 8009b00 <_vfiprintf_r+0x18>
 8009afc:	f7fc fd9a 	bl	8006634 <__sinit>
 8009b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d405      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	059a      	lsls	r2, r3, #22
 8009b0a:	d402      	bmi.n	8009b12 <_vfiprintf_r+0x2a>
 8009b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b0e:	f7fc fea7 	bl	8006860 <__retarget_lock_acquire_recursive>
 8009b12:	89ab      	ldrh	r3, [r5, #12]
 8009b14:	071b      	lsls	r3, r3, #28
 8009b16:	d501      	bpl.n	8009b1c <_vfiprintf_r+0x34>
 8009b18:	692b      	ldr	r3, [r5, #16]
 8009b1a:	b99b      	cbnz	r3, 8009b44 <_vfiprintf_r+0x5c>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f000 f93a 	bl	8009d98 <__swsetup_r>
 8009b24:	b170      	cbz	r0, 8009b44 <_vfiprintf_r+0x5c>
 8009b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b28:	07dc      	lsls	r4, r3, #31
 8009b2a:	d504      	bpl.n	8009b36 <_vfiprintf_r+0x4e>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b01d      	add	sp, #116	; 0x74
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	0598      	lsls	r0, r3, #22
 8009b3a:	d4f7      	bmi.n	8009b2c <_vfiprintf_r+0x44>
 8009b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b3e:	f7fc fe90 	bl	8006862 <__retarget_lock_release_recursive>
 8009b42:	e7f3      	b.n	8009b2c <_vfiprintf_r+0x44>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9309      	str	r3, [sp, #36]	; 0x24
 8009b48:	2320      	movs	r3, #32
 8009b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b52:	2330      	movs	r3, #48	; 0x30
 8009b54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d08 <_vfiprintf_r+0x220>
 8009b58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b5c:	f04f 0901 	mov.w	r9, #1
 8009b60:	4623      	mov	r3, r4
 8009b62:	469a      	mov	sl, r3
 8009b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b68:	b10a      	cbz	r2, 8009b6e <_vfiprintf_r+0x86>
 8009b6a:	2a25      	cmp	r2, #37	; 0x25
 8009b6c:	d1f9      	bne.n	8009b62 <_vfiprintf_r+0x7a>
 8009b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009b72:	d00b      	beq.n	8009b8c <_vfiprintf_r+0xa4>
 8009b74:	465b      	mov	r3, fp
 8009b76:	4622      	mov	r2, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7ff ffa2 	bl	8009ac4 <__sfputs_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	f000 80a9 	beq.w	8009cd8 <_vfiprintf_r+0x1f0>
 8009b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b88:	445a      	add	r2, fp
 8009b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 80a1 	beq.w	8009cd8 <_vfiprintf_r+0x1f0>
 8009b96:	2300      	movs	r3, #0
 8009b98:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba0:	f10a 0a01 	add.w	sl, sl, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bac:	931a      	str	r3, [sp, #104]	; 0x68
 8009bae:	4654      	mov	r4, sl
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb6:	4854      	ldr	r0, [pc, #336]	; (8009d08 <_vfiprintf_r+0x220>)
 8009bb8:	f7f6 fb12 	bl	80001e0 <memchr>
 8009bbc:	9a04      	ldr	r2, [sp, #16]
 8009bbe:	b9d8      	cbnz	r0, 8009bf8 <_vfiprintf_r+0x110>
 8009bc0:	06d1      	lsls	r1, r2, #27
 8009bc2:	bf44      	itt	mi
 8009bc4:	2320      	movmi	r3, #32
 8009bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bca:	0713      	lsls	r3, r2, #28
 8009bcc:	bf44      	itt	mi
 8009bce:	232b      	movmi	r3, #43	; 0x2b
 8009bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bda:	d015      	beq.n	8009c08 <_vfiprintf_r+0x120>
 8009bdc:	9a07      	ldr	r2, [sp, #28]
 8009bde:	4654      	mov	r4, sl
 8009be0:	2000      	movs	r0, #0
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4621      	mov	r1, r4
 8009be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bec:	3b30      	subs	r3, #48	; 0x30
 8009bee:	2b09      	cmp	r3, #9
 8009bf0:	d94d      	bls.n	8009c8e <_vfiprintf_r+0x1a6>
 8009bf2:	b1b0      	cbz	r0, 8009c22 <_vfiprintf_r+0x13a>
 8009bf4:	9207      	str	r2, [sp, #28]
 8009bf6:	e014      	b.n	8009c22 <_vfiprintf_r+0x13a>
 8009bf8:	eba0 0308 	sub.w	r3, r0, r8
 8009bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8009c00:	4313      	orrs	r3, r2
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	46a2      	mov	sl, r4
 8009c06:	e7d2      	b.n	8009bae <_vfiprintf_r+0xc6>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	1d19      	adds	r1, r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfbb      	ittet	lt
 8009c14:	425b      	neglt	r3, r3
 8009c16:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1a:	9307      	strge	r3, [sp, #28]
 8009c1c:	9307      	strlt	r3, [sp, #28]
 8009c1e:	bfb8      	it	lt
 8009c20:	9204      	strlt	r2, [sp, #16]
 8009c22:	7823      	ldrb	r3, [r4, #0]
 8009c24:	2b2e      	cmp	r3, #46	; 0x2e
 8009c26:	d10c      	bne.n	8009c42 <_vfiprintf_r+0x15a>
 8009c28:	7863      	ldrb	r3, [r4, #1]
 8009c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2c:	d134      	bne.n	8009c98 <_vfiprintf_r+0x1b0>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9203      	str	r2, [sp, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bfb8      	it	lt
 8009c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c3e:	3402      	adds	r4, #2
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d18 <_vfiprintf_r+0x230>
 8009c46:	7821      	ldrb	r1, [r4, #0]
 8009c48:	2203      	movs	r2, #3
 8009c4a:	4650      	mov	r0, sl
 8009c4c:	f7f6 fac8 	bl	80001e0 <memchr>
 8009c50:	b138      	cbz	r0, 8009c62 <_vfiprintf_r+0x17a>
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	eba0 000a 	sub.w	r0, r0, sl
 8009c58:	2240      	movs	r2, #64	; 0x40
 8009c5a:	4082      	lsls	r2, r0
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	3401      	adds	r4, #1
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c66:	4829      	ldr	r0, [pc, #164]	; (8009d0c <_vfiprintf_r+0x224>)
 8009c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c6c:	2206      	movs	r2, #6
 8009c6e:	f7f6 fab7 	bl	80001e0 <memchr>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d03f      	beq.n	8009cf6 <_vfiprintf_r+0x20e>
 8009c76:	4b26      	ldr	r3, [pc, #152]	; (8009d10 <_vfiprintf_r+0x228>)
 8009c78:	bb1b      	cbnz	r3, 8009cc2 <_vfiprintf_r+0x1da>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	3307      	adds	r3, #7
 8009c7e:	f023 0307 	bic.w	r3, r3, #7
 8009c82:	3308      	adds	r3, #8
 8009c84:	9303      	str	r3, [sp, #12]
 8009c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c88:	443b      	add	r3, r7
 8009c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8c:	e768      	b.n	8009b60 <_vfiprintf_r+0x78>
 8009c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c92:	460c      	mov	r4, r1
 8009c94:	2001      	movs	r0, #1
 8009c96:	e7a6      	b.n	8009be6 <_vfiprintf_r+0xfe>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	3401      	adds	r4, #1
 8009c9c:	9305      	str	r3, [sp, #20]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	f04f 0c0a 	mov.w	ip, #10
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009caa:	3a30      	subs	r2, #48	; 0x30
 8009cac:	2a09      	cmp	r2, #9
 8009cae:	d903      	bls.n	8009cb8 <_vfiprintf_r+0x1d0>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0c6      	beq.n	8009c42 <_vfiprintf_r+0x15a>
 8009cb4:	9105      	str	r1, [sp, #20]
 8009cb6:	e7c4      	b.n	8009c42 <_vfiprintf_r+0x15a>
 8009cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e7f0      	b.n	8009ca4 <_vfiprintf_r+0x1bc>
 8009cc2:	ab03      	add	r3, sp, #12
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <_vfiprintf_r+0x22c>)
 8009cca:	a904      	add	r1, sp, #16
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f7fb fe61 	bl	8005994 <_printf_float>
 8009cd2:	4607      	mov	r7, r0
 8009cd4:	1c78      	adds	r0, r7, #1
 8009cd6:	d1d6      	bne.n	8009c86 <_vfiprintf_r+0x19e>
 8009cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cda:	07d9      	lsls	r1, r3, #31
 8009cdc:	d405      	bmi.n	8009cea <_vfiprintf_r+0x202>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	059a      	lsls	r2, r3, #22
 8009ce2:	d402      	bmi.n	8009cea <_vfiprintf_r+0x202>
 8009ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce6:	f7fc fdbc 	bl	8006862 <__retarget_lock_release_recursive>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	065b      	lsls	r3, r3, #25
 8009cee:	f53f af1d 	bmi.w	8009b2c <_vfiprintf_r+0x44>
 8009cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf4:	e71c      	b.n	8009b30 <_vfiprintf_r+0x48>
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <_vfiprintf_r+0x22c>)
 8009cfe:	a904      	add	r1, sp, #16
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7fc f8eb 	bl	8005edc <_printf_i>
 8009d06:	e7e4      	b.n	8009cd2 <_vfiprintf_r+0x1ea>
 8009d08:	0800b409 	.word	0x0800b409
 8009d0c:	0800b413 	.word	0x0800b413
 8009d10:	08005995 	.word	0x08005995
 8009d14:	08009ac5 	.word	0x08009ac5
 8009d18:	0800b40f 	.word	0x0800b40f

08009d1c <__swbuf_r>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	460e      	mov	r6, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	4605      	mov	r5, r0
 8009d24:	b118      	cbz	r0, 8009d2e <__swbuf_r+0x12>
 8009d26:	6a03      	ldr	r3, [r0, #32]
 8009d28:	b90b      	cbnz	r3, 8009d2e <__swbuf_r+0x12>
 8009d2a:	f7fc fc83 	bl	8006634 <__sinit>
 8009d2e:	69a3      	ldr	r3, [r4, #24]
 8009d30:	60a3      	str	r3, [r4, #8]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	071a      	lsls	r2, r3, #28
 8009d36:	d525      	bpl.n	8009d84 <__swbuf_r+0x68>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	b31b      	cbz	r3, 8009d84 <__swbuf_r+0x68>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	6922      	ldr	r2, [r4, #16]
 8009d40:	1a98      	subs	r0, r3, r2
 8009d42:	6963      	ldr	r3, [r4, #20]
 8009d44:	b2f6      	uxtb	r6, r6
 8009d46:	4283      	cmp	r3, r0
 8009d48:	4637      	mov	r7, r6
 8009d4a:	dc04      	bgt.n	8009d56 <__swbuf_r+0x3a>
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f7ff fa2a 	bl	80091a8 <_fflush_r>
 8009d54:	b9e0      	cbnz	r0, 8009d90 <__swbuf_r+0x74>
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	701e      	strb	r6, [r3, #0]
 8009d64:	6962      	ldr	r2, [r4, #20]
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d004      	beq.n	8009d76 <__swbuf_r+0x5a>
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	07db      	lsls	r3, r3, #31
 8009d70:	d506      	bpl.n	8009d80 <__swbuf_r+0x64>
 8009d72:	2e0a      	cmp	r6, #10
 8009d74:	d104      	bne.n	8009d80 <__swbuf_r+0x64>
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f7ff fa15 	bl	80091a8 <_fflush_r>
 8009d7e:	b938      	cbnz	r0, 8009d90 <__swbuf_r+0x74>
 8009d80:	4638      	mov	r0, r7
 8009d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d84:	4621      	mov	r1, r4
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 f806 	bl	8009d98 <__swsetup_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d0d5      	beq.n	8009d3c <__swbuf_r+0x20>
 8009d90:	f04f 37ff 	mov.w	r7, #4294967295
 8009d94:	e7f4      	b.n	8009d80 <__swbuf_r+0x64>
	...

08009d98 <__swsetup_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <__swsetup_r+0xac>)
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	6818      	ldr	r0, [r3, #0]
 8009da0:	460c      	mov	r4, r1
 8009da2:	b118      	cbz	r0, 8009dac <__swsetup_r+0x14>
 8009da4:	6a03      	ldr	r3, [r0, #32]
 8009da6:	b90b      	cbnz	r3, 8009dac <__swsetup_r+0x14>
 8009da8:	f7fc fc44 	bl	8006634 <__sinit>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009db2:	0718      	lsls	r0, r3, #28
 8009db4:	d422      	bmi.n	8009dfc <__swsetup_r+0x64>
 8009db6:	06d9      	lsls	r1, r3, #27
 8009db8:	d407      	bmi.n	8009dca <__swsetup_r+0x32>
 8009dba:	2309      	movs	r3, #9
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc8:	e034      	b.n	8009e34 <__swsetup_r+0x9c>
 8009dca:	0758      	lsls	r0, r3, #29
 8009dcc:	d512      	bpl.n	8009df4 <__swsetup_r+0x5c>
 8009dce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dd0:	b141      	cbz	r1, 8009de4 <__swsetup_r+0x4c>
 8009dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d002      	beq.n	8009de0 <__swsetup_r+0x48>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f7fd fbc2 	bl	8007564 <_free_r>
 8009de0:	2300      	movs	r3, #0
 8009de2:	6363      	str	r3, [r4, #52]	; 0x34
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	2300      	movs	r3, #0
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0308 	orr.w	r3, r3, #8
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	b94b      	cbnz	r3, 8009e14 <__swsetup_r+0x7c>
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0a:	d003      	beq.n	8009e14 <__swsetup_r+0x7c>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f000 f884 	bl	8009f1c <__smakebuf_r>
 8009e14:	89a0      	ldrh	r0, [r4, #12]
 8009e16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e1a:	f010 0301 	ands.w	r3, r0, #1
 8009e1e:	d00a      	beq.n	8009e36 <__swsetup_r+0x9e>
 8009e20:	2300      	movs	r3, #0
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	6963      	ldr	r3, [r4, #20]
 8009e26:	425b      	negs	r3, r3
 8009e28:	61a3      	str	r3, [r4, #24]
 8009e2a:	6923      	ldr	r3, [r4, #16]
 8009e2c:	b943      	cbnz	r3, 8009e40 <__swsetup_r+0xa8>
 8009e2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e32:	d1c4      	bne.n	8009dbe <__swsetup_r+0x26>
 8009e34:	bd38      	pop	{r3, r4, r5, pc}
 8009e36:	0781      	lsls	r1, r0, #30
 8009e38:	bf58      	it	pl
 8009e3a:	6963      	ldrpl	r3, [r4, #20]
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	e7f4      	b.n	8009e2a <__swsetup_r+0x92>
 8009e40:	2000      	movs	r0, #0
 8009e42:	e7f7      	b.n	8009e34 <__swsetup_r+0x9c>
 8009e44:	2000017c 	.word	0x2000017c

08009e48 <_raise_r>:
 8009e48:	291f      	cmp	r1, #31
 8009e4a:	b538      	push	{r3, r4, r5, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	d904      	bls.n	8009e5c <_raise_r+0x14>
 8009e52:	2316      	movs	r3, #22
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e5e:	b112      	cbz	r2, 8009e66 <_raise_r+0x1e>
 8009e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e64:	b94b      	cbnz	r3, 8009e7a <_raise_r+0x32>
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 f830 	bl	8009ecc <_getpid_r>
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4601      	mov	r1, r0
 8009e70:	4620      	mov	r0, r4
 8009e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e76:	f000 b817 	b.w	8009ea8 <_kill_r>
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d00a      	beq.n	8009e94 <_raise_r+0x4c>
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	d103      	bne.n	8009e8a <_raise_r+0x42>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	2001      	movs	r0, #1
 8009e88:	e7e7      	b.n	8009e5a <_raise_r+0x12>
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e90:	4628      	mov	r0, r5
 8009e92:	4798      	blx	r3
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7e0      	b.n	8009e5a <_raise_r+0x12>

08009e98 <raise>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <raise+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f7ff bfd3 	b.w	8009e48 <_raise_r>
 8009ea2:	bf00      	nop
 8009ea4:	2000017c 	.word	0x2000017c

08009ea8 <_kill_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	; (8009ec8 <_kill_r+0x20>)
 8009eac:	2300      	movs	r3, #0
 8009eae:	4604      	mov	r4, r0
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	602b      	str	r3, [r5, #0]
 8009eb6:	f7f7 ffa1 	bl	8001dfc <_kill>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	d102      	bne.n	8009ec4 <_kill_r+0x1c>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	b103      	cbz	r3, 8009ec4 <_kill_r+0x1c>
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200007e8 	.word	0x200007e8

08009ecc <_getpid_r>:
 8009ecc:	f7f7 bf8e 	b.w	8001dec <_getpid>

08009ed0 <__swhatbuf_r>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	b096      	sub	sp, #88	; 0x58
 8009edc:	4615      	mov	r5, r2
 8009ede:	461e      	mov	r6, r3
 8009ee0:	da0d      	bge.n	8009efe <__swhatbuf_r+0x2e>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ee8:	f04f 0100 	mov.w	r1, #0
 8009eec:	bf0c      	ite	eq
 8009eee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ef2:	2340      	movne	r3, #64	; 0x40
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	6031      	str	r1, [r6, #0]
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	b016      	add	sp, #88	; 0x58
 8009efc:	bd70      	pop	{r4, r5, r6, pc}
 8009efe:	466a      	mov	r2, sp
 8009f00:	f000 f848 	bl	8009f94 <_fstat_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	dbec      	blt.n	8009ee2 <__swhatbuf_r+0x12>
 8009f08:	9901      	ldr	r1, [sp, #4]
 8009f0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f12:	4259      	negs	r1, r3
 8009f14:	4159      	adcs	r1, r3
 8009f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f1a:	e7eb      	b.n	8009ef4 <__swhatbuf_r+0x24>

08009f1c <__smakebuf_r>:
 8009f1c:	898b      	ldrh	r3, [r1, #12]
 8009f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f20:	079d      	lsls	r5, r3, #30
 8009f22:	4606      	mov	r6, r0
 8009f24:	460c      	mov	r4, r1
 8009f26:	d507      	bpl.n	8009f38 <__smakebuf_r+0x1c>
 8009f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	6123      	str	r3, [r4, #16]
 8009f30:	2301      	movs	r3, #1
 8009f32:	6163      	str	r3, [r4, #20]
 8009f34:	b002      	add	sp, #8
 8009f36:	bd70      	pop	{r4, r5, r6, pc}
 8009f38:	ab01      	add	r3, sp, #4
 8009f3a:	466a      	mov	r2, sp
 8009f3c:	f7ff ffc8 	bl	8009ed0 <__swhatbuf_r>
 8009f40:	9900      	ldr	r1, [sp, #0]
 8009f42:	4605      	mov	r5, r0
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7fd fb81 	bl	800764c <_malloc_r>
 8009f4a:	b948      	cbnz	r0, 8009f60 <__smakebuf_r+0x44>
 8009f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f50:	059a      	lsls	r2, r3, #22
 8009f52:	d4ef      	bmi.n	8009f34 <__smakebuf_r+0x18>
 8009f54:	f023 0303 	bic.w	r3, r3, #3
 8009f58:	f043 0302 	orr.w	r3, r3, #2
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	e7e3      	b.n	8009f28 <__smakebuf_r+0xc>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	6020      	str	r0, [r4, #0]
 8009f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	9b00      	ldr	r3, [sp, #0]
 8009f6c:	6163      	str	r3, [r4, #20]
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	6120      	str	r0, [r4, #16]
 8009f72:	b15b      	cbz	r3, 8009f8c <__smakebuf_r+0x70>
 8009f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 f81d 	bl	8009fb8 <_isatty_r>
 8009f7e:	b128      	cbz	r0, 8009f8c <__smakebuf_r+0x70>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f023 0303 	bic.w	r3, r3, #3
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	431d      	orrs	r5, r3
 8009f90:	81a5      	strh	r5, [r4, #12]
 8009f92:	e7cf      	b.n	8009f34 <__smakebuf_r+0x18>

08009f94 <_fstat_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d07      	ldr	r5, [pc, #28]	; (8009fb4 <_fstat_r+0x20>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f7 ff8a 	bl	8001eba <_fstat>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_fstat_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_fstat_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200007e8 	.word	0x200007e8

08009fb8 <_isatty_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_isatty_r+0x1c>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f7 ff89 	bl	8001eda <_isatty>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_isatty_r+0x1a>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_isatty_r+0x1a>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	200007e8 	.word	0x200007e8

08009fd8 <sin>:
 8009fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fda:	ec53 2b10 	vmov	r2, r3, d0
 8009fde:	4828      	ldr	r0, [pc, #160]	; (800a080 <sin+0xa8>)
 8009fe0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fe4:	4281      	cmp	r1, r0
 8009fe6:	dc07      	bgt.n	8009ff8 <sin+0x20>
 8009fe8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a078 <sin+0xa0>
 8009fec:	2000      	movs	r0, #0
 8009fee:	b005      	add	sp, #20
 8009ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff4:	f000 b910 	b.w	800a218 <__kernel_sin>
 8009ff8:	4822      	ldr	r0, [pc, #136]	; (800a084 <sin+0xac>)
 8009ffa:	4281      	cmp	r1, r0
 8009ffc:	dd09      	ble.n	800a012 <sin+0x3a>
 8009ffe:	ee10 0a10 	vmov	r0, s0
 800a002:	4619      	mov	r1, r3
 800a004:	f7f6 f948 	bl	8000298 <__aeabi_dsub>
 800a008:	ec41 0b10 	vmov	d0, r0, r1
 800a00c:	b005      	add	sp, #20
 800a00e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a012:	4668      	mov	r0, sp
 800a014:	f000 f9c0 	bl	800a398 <__ieee754_rem_pio2>
 800a018:	f000 0003 	and.w	r0, r0, #3
 800a01c:	2801      	cmp	r0, #1
 800a01e:	d00c      	beq.n	800a03a <sin+0x62>
 800a020:	2802      	cmp	r0, #2
 800a022:	d011      	beq.n	800a048 <sin+0x70>
 800a024:	b9f0      	cbnz	r0, 800a064 <sin+0x8c>
 800a026:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a02a:	ed9d 0b00 	vldr	d0, [sp]
 800a02e:	2001      	movs	r0, #1
 800a030:	f000 f8f2 	bl	800a218 <__kernel_sin>
 800a034:	ec51 0b10 	vmov	r0, r1, d0
 800a038:	e7e6      	b.n	800a008 <sin+0x30>
 800a03a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a03e:	ed9d 0b00 	vldr	d0, [sp]
 800a042:	f000 f821 	bl	800a088 <__kernel_cos>
 800a046:	e7f5      	b.n	800a034 <sin+0x5c>
 800a048:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a04c:	ed9d 0b00 	vldr	d0, [sp]
 800a050:	2001      	movs	r0, #1
 800a052:	f000 f8e1 	bl	800a218 <__kernel_sin>
 800a056:	ec53 2b10 	vmov	r2, r3, d0
 800a05a:	ee10 0a10 	vmov	r0, s0
 800a05e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a062:	e7d1      	b.n	800a008 <sin+0x30>
 800a064:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a068:	ed9d 0b00 	vldr	d0, [sp]
 800a06c:	f000 f80c 	bl	800a088 <__kernel_cos>
 800a070:	e7f1      	b.n	800a056 <sin+0x7e>
 800a072:	bf00      	nop
 800a074:	f3af 8000 	nop.w
	...
 800a080:	3fe921fb 	.word	0x3fe921fb
 800a084:	7fefffff 	.word	0x7fefffff

0800a088 <__kernel_cos>:
 800a088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	ec57 6b10 	vmov	r6, r7, d0
 800a090:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a094:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a098:	ed8d 1b00 	vstr	d1, [sp]
 800a09c:	da07      	bge.n	800a0ae <__kernel_cos+0x26>
 800a09e:	ee10 0a10 	vmov	r0, s0
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fd60 	bl	8000b68 <__aeabi_d2iz>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f000 8088 	beq.w	800a1be <__kernel_cos+0x136>
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 faa7 	bl	8000608 <__aeabi_dmul>
 800a0ba:	4b51      	ldr	r3, [pc, #324]	; (800a200 <__kernel_cos+0x178>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	f7f6 faa1 	bl	8000608 <__aeabi_dmul>
 800a0c6:	a340      	add	r3, pc, #256	; (adr r3, 800a1c8 <__kernel_cos+0x140>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	468b      	mov	fp, r1
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 fa98 	bl	8000608 <__aeabi_dmul>
 800a0d8:	a33d      	add	r3, pc, #244	; (adr r3, 800a1d0 <__kernel_cos+0x148>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 f8dd 	bl	800029c <__adddf3>
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	f7f6 fa8f 	bl	8000608 <__aeabi_dmul>
 800a0ea:	a33b      	add	r3, pc, #236	; (adr r3, 800a1d8 <__kernel_cos+0x150>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8d2 	bl	8000298 <__aeabi_dsub>
 800a0f4:	4622      	mov	r2, r4
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	f7f6 fa86 	bl	8000608 <__aeabi_dmul>
 800a0fc:	a338      	add	r3, pc, #224	; (adr r3, 800a1e0 <__kernel_cos+0x158>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	f7f6 f8cb 	bl	800029c <__adddf3>
 800a106:	4622      	mov	r2, r4
 800a108:	462b      	mov	r3, r5
 800a10a:	f7f6 fa7d 	bl	8000608 <__aeabi_dmul>
 800a10e:	a336      	add	r3, pc, #216	; (adr r3, 800a1e8 <__kernel_cos+0x160>)
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	f7f6 f8c0 	bl	8000298 <__aeabi_dsub>
 800a118:	4622      	mov	r2, r4
 800a11a:	462b      	mov	r3, r5
 800a11c:	f7f6 fa74 	bl	8000608 <__aeabi_dmul>
 800a120:	a333      	add	r3, pc, #204	; (adr r3, 800a1f0 <__kernel_cos+0x168>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f8b9 	bl	800029c <__adddf3>
 800a12a:	4622      	mov	r2, r4
 800a12c:	462b      	mov	r3, r5
 800a12e:	f7f6 fa6b 	bl	8000608 <__aeabi_dmul>
 800a132:	4622      	mov	r2, r4
 800a134:	462b      	mov	r3, r5
 800a136:	f7f6 fa67 	bl	8000608 <__aeabi_dmul>
 800a13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
 800a142:	4630      	mov	r0, r6
 800a144:	4639      	mov	r1, r7
 800a146:	f7f6 fa5f 	bl	8000608 <__aeabi_dmul>
 800a14a:	460b      	mov	r3, r1
 800a14c:	4602      	mov	r2, r0
 800a14e:	4629      	mov	r1, r5
 800a150:	4620      	mov	r0, r4
 800a152:	f7f6 f8a1 	bl	8000298 <__aeabi_dsub>
 800a156:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <__kernel_cos+0x17c>)
 800a158:	4598      	cmp	r8, r3
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	dc10      	bgt.n	800a182 <__kernel_cos+0xfa>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4650      	mov	r0, sl
 800a166:	4659      	mov	r1, fp
 800a168:	f7f6 f896 	bl	8000298 <__aeabi_dsub>
 800a16c:	460b      	mov	r3, r1
 800a16e:	4926      	ldr	r1, [pc, #152]	; (800a208 <__kernel_cos+0x180>)
 800a170:	4602      	mov	r2, r0
 800a172:	2000      	movs	r0, #0
 800a174:	f7f6 f890 	bl	8000298 <__aeabi_dsub>
 800a178:	ec41 0b10 	vmov	d0, r0, r1
 800a17c:	b003      	add	sp, #12
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	4b22      	ldr	r3, [pc, #136]	; (800a20c <__kernel_cos+0x184>)
 800a184:	4920      	ldr	r1, [pc, #128]	; (800a208 <__kernel_cos+0x180>)
 800a186:	4598      	cmp	r8, r3
 800a188:	bfcc      	ite	gt
 800a18a:	4d21      	ldrgt	r5, [pc, #132]	; (800a210 <__kernel_cos+0x188>)
 800a18c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a190:	2400      	movs	r4, #0
 800a192:	4622      	mov	r2, r4
 800a194:	462b      	mov	r3, r5
 800a196:	2000      	movs	r0, #0
 800a198:	f7f6 f87e 	bl	8000298 <__aeabi_dsub>
 800a19c:	4622      	mov	r2, r4
 800a19e:	4680      	mov	r8, r0
 800a1a0:	4689      	mov	r9, r1
 800a1a2:	462b      	mov	r3, r5
 800a1a4:	4650      	mov	r0, sl
 800a1a6:	4659      	mov	r1, fp
 800a1a8:	f7f6 f876 	bl	8000298 <__aeabi_dsub>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	f7f6 f872 	bl	8000298 <__aeabi_dsub>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	e7da      	b.n	800a174 <__kernel_cos+0xec>
 800a1be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a1f8 <__kernel_cos+0x170>
 800a1c2:	e7db      	b.n	800a17c <__kernel_cos+0xf4>
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	be8838d4 	.word	0xbe8838d4
 800a1cc:	bda8fae9 	.word	0xbda8fae9
 800a1d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a1d4:	3e21ee9e 	.word	0x3e21ee9e
 800a1d8:	809c52ad 	.word	0x809c52ad
 800a1dc:	3e927e4f 	.word	0x3e927e4f
 800a1e0:	19cb1590 	.word	0x19cb1590
 800a1e4:	3efa01a0 	.word	0x3efa01a0
 800a1e8:	16c15177 	.word	0x16c15177
 800a1ec:	3f56c16c 	.word	0x3f56c16c
 800a1f0:	5555554c 	.word	0x5555554c
 800a1f4:	3fa55555 	.word	0x3fa55555
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	3ff00000 	.word	0x3ff00000
 800a200:	3fe00000 	.word	0x3fe00000
 800a204:	3fd33332 	.word	0x3fd33332
 800a208:	3ff00000 	.word	0x3ff00000
 800a20c:	3fe90000 	.word	0x3fe90000
 800a210:	3fd20000 	.word	0x3fd20000
 800a214:	00000000 	.word	0x00000000

0800a218 <__kernel_sin>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b04 	vpush	{d8-d9}
 800a220:	eeb0 8a41 	vmov.f32	s16, s2
 800a224:	eef0 8a61 	vmov.f32	s17, s3
 800a228:	ec55 4b10 	vmov	r4, r5, d0
 800a22c:	b083      	sub	sp, #12
 800a22e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a232:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a236:	9001      	str	r0, [sp, #4]
 800a238:	da06      	bge.n	800a248 <__kernel_sin+0x30>
 800a23a:	ee10 0a10 	vmov	r0, s0
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 fc92 	bl	8000b68 <__aeabi_d2iz>
 800a244:	2800      	cmp	r0, #0
 800a246:	d051      	beq.n	800a2ec <__kernel_sin+0xd4>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 f9da 	bl	8000608 <__aeabi_dmul>
 800a254:	4682      	mov	sl, r0
 800a256:	468b      	mov	fp, r1
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4620      	mov	r0, r4
 800a25e:	4629      	mov	r1, r5
 800a260:	f7f6 f9d2 	bl	8000608 <__aeabi_dmul>
 800a264:	a341      	add	r3, pc, #260	; (adr r3, 800a36c <__kernel_sin+0x154>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	4680      	mov	r8, r0
 800a26c:	4689      	mov	r9, r1
 800a26e:	4650      	mov	r0, sl
 800a270:	4659      	mov	r1, fp
 800a272:	f7f6 f9c9 	bl	8000608 <__aeabi_dmul>
 800a276:	a33f      	add	r3, pc, #252	; (adr r3, 800a374 <__kernel_sin+0x15c>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f6 f80c 	bl	8000298 <__aeabi_dsub>
 800a280:	4652      	mov	r2, sl
 800a282:	465b      	mov	r3, fp
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	a33c      	add	r3, pc, #240	; (adr r3, 800a37c <__kernel_sin+0x164>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f805 	bl	800029c <__adddf3>
 800a292:	4652      	mov	r2, sl
 800a294:	465b      	mov	r3, fp
 800a296:	f7f6 f9b7 	bl	8000608 <__aeabi_dmul>
 800a29a:	a33a      	add	r3, pc, #232	; (adr r3, 800a384 <__kernel_sin+0x16c>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f7f5 fffa 	bl	8000298 <__aeabi_dsub>
 800a2a4:	4652      	mov	r2, sl
 800a2a6:	465b      	mov	r3, fp
 800a2a8:	f7f6 f9ae 	bl	8000608 <__aeabi_dmul>
 800a2ac:	a337      	add	r3, pc, #220	; (adr r3, 800a38c <__kernel_sin+0x174>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f7f5 fff3 	bl	800029c <__adddf3>
 800a2b6:	9b01      	ldr	r3, [sp, #4]
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	b9eb      	cbnz	r3, 800a2fa <__kernel_sin+0xe2>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	4659      	mov	r1, fp
 800a2c6:	f7f6 f99f 	bl	8000608 <__aeabi_dmul>
 800a2ca:	a325      	add	r3, pc, #148	; (adr r3, 800a360 <__kernel_sin+0x148>)
 800a2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d0:	f7f5 ffe2 	bl	8000298 <__aeabi_dsub>
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	464b      	mov	r3, r9
 800a2d8:	f7f6 f996 	bl	8000608 <__aeabi_dmul>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	460b      	mov	r3, r1
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	f7f5 ffda 	bl	800029c <__adddf3>
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	ec45 4b10 	vmov	d0, r4, r5
 800a2f0:	b003      	add	sp, #12
 800a2f2:	ecbd 8b04 	vpop	{d8-d9}
 800a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <__kernel_sin+0x150>)
 800a2fc:	ec51 0b18 	vmov	r0, r1, d8
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f981 	bl	8000608 <__aeabi_dmul>
 800a306:	4632      	mov	r2, r6
 800a308:	ec41 0b19 	vmov	d9, r0, r1
 800a30c:	463b      	mov	r3, r7
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f6 f979 	bl	8000608 <__aeabi_dmul>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	ec51 0b19 	vmov	r0, r1, d9
 800a31e:	f7f5 ffbb 	bl	8000298 <__aeabi_dsub>
 800a322:	4652      	mov	r2, sl
 800a324:	465b      	mov	r3, fp
 800a326:	f7f6 f96f 	bl	8000608 <__aeabi_dmul>
 800a32a:	ec53 2b18 	vmov	r2, r3, d8
 800a32e:	f7f5 ffb3 	bl	8000298 <__aeabi_dsub>
 800a332:	a30b      	add	r3, pc, #44	; (adr r3, 800a360 <__kernel_sin+0x148>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4606      	mov	r6, r0
 800a33a:	460f      	mov	r7, r1
 800a33c:	4640      	mov	r0, r8
 800a33e:	4649      	mov	r1, r9
 800a340:	f7f6 f962 	bl	8000608 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f5 ffa6 	bl	800029c <__adddf3>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ff9e 	bl	8000298 <__aeabi_dsub>
 800a35c:	e7c4      	b.n	800a2e8 <__kernel_sin+0xd0>
 800a35e:	bf00      	nop
 800a360:	55555549 	.word	0x55555549
 800a364:	3fc55555 	.word	0x3fc55555
 800a368:	3fe00000 	.word	0x3fe00000
 800a36c:	5acfd57c 	.word	0x5acfd57c
 800a370:	3de5d93a 	.word	0x3de5d93a
 800a374:	8a2b9ceb 	.word	0x8a2b9ceb
 800a378:	3e5ae5e6 	.word	0x3e5ae5e6
 800a37c:	57b1fe7d 	.word	0x57b1fe7d
 800a380:	3ec71de3 	.word	0x3ec71de3
 800a384:	19c161d5 	.word	0x19c161d5
 800a388:	3f2a01a0 	.word	0x3f2a01a0
 800a38c:	1110f8a6 	.word	0x1110f8a6
 800a390:	3f811111 	.word	0x3f811111
 800a394:	00000000 	.word	0x00000000

0800a398 <__ieee754_rem_pio2>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	ed2d 8b02 	vpush	{d8}
 800a3a0:	ec55 4b10 	vmov	r4, r5, d0
 800a3a4:	4bca      	ldr	r3, [pc, #808]	; (800a6d0 <__ieee754_rem_pio2+0x338>)
 800a3a6:	b08b      	sub	sp, #44	; 0x2c
 800a3a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a3ac:	4598      	cmp	r8, r3
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	9502      	str	r5, [sp, #8]
 800a3b2:	dc08      	bgt.n	800a3c6 <__ieee754_rem_pio2+0x2e>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	ed80 0b00 	vstr	d0, [r0]
 800a3bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a3c0:	f04f 0b00 	mov.w	fp, #0
 800a3c4:	e028      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a3c6:	4bc3      	ldr	r3, [pc, #780]	; (800a6d4 <__ieee754_rem_pio2+0x33c>)
 800a3c8:	4598      	cmp	r8, r3
 800a3ca:	dc78      	bgt.n	800a4be <__ieee754_rem_pio2+0x126>
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	4ec2      	ldr	r6, [pc, #776]	; (800a6d8 <__ieee754_rem_pio2+0x340>)
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	ee10 0a10 	vmov	r0, s0
 800a3d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a698 <__ieee754_rem_pio2+0x300>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	4629      	mov	r1, r5
 800a3de:	dd39      	ble.n	800a454 <__ieee754_rem_pio2+0xbc>
 800a3e0:	f7f5 ff5a 	bl	8000298 <__aeabi_dsub>
 800a3e4:	45b0      	cmp	r8, r6
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	d01b      	beq.n	800a424 <__ieee754_rem_pio2+0x8c>
 800a3ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f7f5 ff51 	bl	8000298 <__aeabi_dsub>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	e9ca 2300 	strd	r2, r3, [sl]
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f5 ff49 	bl	8000298 <__aeabi_dsub>
 800a406:	a3a6      	add	r3, pc, #664	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7f5 ff44 	bl	8000298 <__aeabi_dsub>
 800a410:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a414:	f04f 0b01 	mov.w	fp, #1
 800a418:	4658      	mov	r0, fp
 800a41a:	b00b      	add	sp, #44	; 0x2c
 800a41c:	ecbd 8b02 	vpop	{d8}
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	a3a0      	add	r3, pc, #640	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 ff35 	bl	8000298 <__aeabi_dsub>
 800a42e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	f7f5 ff2e 	bl	8000298 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9ca 2300 	strd	r2, r3, [sl]
 800a444:	4620      	mov	r0, r4
 800a446:	4629      	mov	r1, r5
 800a448:	f7f5 ff26 	bl	8000298 <__aeabi_dsub>
 800a44c:	a398      	add	r3, pc, #608	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	e7db      	b.n	800a40c <__ieee754_rem_pio2+0x74>
 800a454:	f7f5 ff22 	bl	800029c <__adddf3>
 800a458:	45b0      	cmp	r8, r6
 800a45a:	4604      	mov	r4, r0
 800a45c:	460d      	mov	r5, r1
 800a45e:	d016      	beq.n	800a48e <__ieee754_rem_pio2+0xf6>
 800a460:	a38f      	add	r3, pc, #572	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f5 ff19 	bl	800029c <__adddf3>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	e9ca 2300 	strd	r2, r3, [sl]
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f5 ff0f 	bl	8000298 <__aeabi_dsub>
 800a47a:	a389      	add	r3, pc, #548	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f5 ff0c 	bl	800029c <__adddf3>
 800a484:	f04f 3bff 	mov.w	fp, #4294967295
 800a488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a48c:	e7c4      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a48e:	a386      	add	r3, pc, #536	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 ff02 	bl	800029c <__adddf3>
 800a498:	a385      	add	r3, pc, #532	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	4604      	mov	r4, r0
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	f7f5 fefb 	bl	800029c <__adddf3>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9ca 2300 	strd	r2, r3, [sl]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f5 fef1 	bl	8000298 <__aeabi_dsub>
 800a4b6:	a37e      	add	r3, pc, #504	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	e7e0      	b.n	800a480 <__ieee754_rem_pio2+0xe8>
 800a4be:	4b87      	ldr	r3, [pc, #540]	; (800a6dc <__ieee754_rem_pio2+0x344>)
 800a4c0:	4598      	cmp	r8, r3
 800a4c2:	f300 80d8 	bgt.w	800a676 <__ieee754_rem_pio2+0x2de>
 800a4c6:	f000 f96d 	bl	800a7a4 <fabs>
 800a4ca:	ec55 4b10 	vmov	r4, r5, d0
 800a4ce:	ee10 0a10 	vmov	r0, s0
 800a4d2:	a379      	add	r3, pc, #484	; (adr r3, 800a6b8 <__ieee754_rem_pio2+0x320>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f7f6 f895 	bl	8000608 <__aeabi_dmul>
 800a4de:	4b80      	ldr	r3, [pc, #512]	; (800a6e0 <__ieee754_rem_pio2+0x348>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f7f5 fedb 	bl	800029c <__adddf3>
 800a4e6:	f7f6 fb3f 	bl	8000b68 <__aeabi_d2iz>
 800a4ea:	4683      	mov	fp, r0
 800a4ec:	f7f6 f822 	bl	8000534 <__aeabi_i2d>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	ec43 2b18 	vmov	d8, r2, r3
 800a4f8:	a367      	add	r3, pc, #412	; (adr r3, 800a698 <__ieee754_rem_pio2+0x300>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 f883 	bl	8000608 <__aeabi_dmul>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f5 fec5 	bl	8000298 <__aeabi_dsub>
 800a50e:	a364      	add	r3, pc, #400	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	ec51 0b18 	vmov	r0, r1, d8
 800a51c:	f7f6 f874 	bl	8000608 <__aeabi_dmul>
 800a520:	f1bb 0f1f 	cmp.w	fp, #31
 800a524:	4604      	mov	r4, r0
 800a526:	460d      	mov	r5, r1
 800a528:	dc0d      	bgt.n	800a546 <__ieee754_rem_pio2+0x1ae>
 800a52a:	4b6e      	ldr	r3, [pc, #440]	; (800a6e4 <__ieee754_rem_pio2+0x34c>)
 800a52c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a534:	4543      	cmp	r3, r8
 800a536:	d006      	beq.n	800a546 <__ieee754_rem_pio2+0x1ae>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f5 feaa 	bl	8000298 <__aeabi_dsub>
 800a544:	e00e      	b.n	800a564 <__ieee754_rem_pio2+0x1cc>
 800a546:	462b      	mov	r3, r5
 800a548:	4622      	mov	r2, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fea3 	bl	8000298 <__aeabi_dsub>
 800a552:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a55c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a560:	2b10      	cmp	r3, #16
 800a562:	dc02      	bgt.n	800a56a <__ieee754_rem_pio2+0x1d2>
 800a564:	e9ca 0100 	strd	r0, r1, [sl]
 800a568:	e039      	b.n	800a5de <__ieee754_rem_pio2+0x246>
 800a56a:	a34f      	add	r3, pc, #316	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	ec51 0b18 	vmov	r0, r1, d8
 800a574:	f7f6 f848 	bl	8000608 <__aeabi_dmul>
 800a578:	4604      	mov	r4, r0
 800a57a:	460d      	mov	r5, r1
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f5 fe88 	bl	8000298 <__aeabi_dsub>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4680      	mov	r8, r0
 800a58e:	4689      	mov	r9, r1
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f5 fe80 	bl	8000298 <__aeabi_dsub>
 800a598:	4622      	mov	r2, r4
 800a59a:	462b      	mov	r3, r5
 800a59c:	f7f5 fe7c 	bl	8000298 <__aeabi_dsub>
 800a5a0:	a343      	add	r3, pc, #268	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	ec51 0b18 	vmov	r0, r1, d8
 800a5ae:	f7f6 f82b 	bl	8000608 <__aeabi_dmul>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f7f5 fe6f 	bl	8000298 <__aeabi_dsub>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	f7f5 fe67 	bl	8000298 <__aeabi_dsub>
 800a5ca:	9a03      	ldr	r2, [sp, #12]
 800a5cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b31      	cmp	r3, #49	; 0x31
 800a5d4:	dc24      	bgt.n	800a620 <__ieee754_rem_pio2+0x288>
 800a5d6:	e9ca 0100 	strd	r0, r1, [sl]
 800a5da:	4646      	mov	r6, r8
 800a5dc:	464f      	mov	r7, r9
 800a5de:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	464b      	mov	r3, r9
 800a5e8:	4639      	mov	r1, r7
 800a5ea:	f7f5 fe55 	bl	8000298 <__aeabi_dsub>
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	f7f5 fe51 	bl	8000298 <__aeabi_dsub>
 800a5f6:	9b02      	ldr	r3, [sp, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5fe:	f6bf af0b 	bge.w	800a418 <__ieee754_rem_pio2+0x80>
 800a602:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a606:	f8ca 3004 	str.w	r3, [sl, #4]
 800a60a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a60e:	f8ca 8000 	str.w	r8, [sl]
 800a612:	f8ca 0008 	str.w	r0, [sl, #8]
 800a616:	f8ca 300c 	str.w	r3, [sl, #12]
 800a61a:	f1cb 0b00 	rsb	fp, fp, #0
 800a61e:	e6fb      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a620:	a327      	add	r3, pc, #156	; (adr r3, 800a6c0 <__ieee754_rem_pio2+0x328>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	ec51 0b18 	vmov	r0, r1, d8
 800a62a:	f7f5 ffed 	bl	8000608 <__aeabi_dmul>
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4640      	mov	r0, r8
 800a638:	4649      	mov	r1, r9
 800a63a:	f7f5 fe2d 	bl	8000298 <__aeabi_dsub>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fe25 	bl	8000298 <__aeabi_dsub>
 800a64e:	4622      	mov	r2, r4
 800a650:	462b      	mov	r3, r5
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	a31c      	add	r3, pc, #112	; (adr r3, 800a6c8 <__ieee754_rem_pio2+0x330>)
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	ec51 0b18 	vmov	r0, r1, d8
 800a664:	f7f5 ffd0 	bl	8000608 <__aeabi_dmul>
 800a668:	4622      	mov	r2, r4
 800a66a:	462b      	mov	r3, r5
 800a66c:	f7f5 fe14 	bl	8000298 <__aeabi_dsub>
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	e760      	b.n	800a538 <__ieee754_rem_pio2+0x1a0>
 800a676:	4b1c      	ldr	r3, [pc, #112]	; (800a6e8 <__ieee754_rem_pio2+0x350>)
 800a678:	4598      	cmp	r8, r3
 800a67a:	dd37      	ble.n	800a6ec <__ieee754_rem_pio2+0x354>
 800a67c:	ee10 2a10 	vmov	r2, s0
 800a680:	462b      	mov	r3, r5
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f5 fe07 	bl	8000298 <__aeabi_dsub>
 800a68a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a68e:	e9ca 0100 	strd	r0, r1, [sl]
 800a692:	e695      	b.n	800a3c0 <__ieee754_rem_pio2+0x28>
 800a694:	f3af 8000 	nop.w
 800a698:	54400000 	.word	0x54400000
 800a69c:	3ff921fb 	.word	0x3ff921fb
 800a6a0:	1a626331 	.word	0x1a626331
 800a6a4:	3dd0b461 	.word	0x3dd0b461
 800a6a8:	1a600000 	.word	0x1a600000
 800a6ac:	3dd0b461 	.word	0x3dd0b461
 800a6b0:	2e037073 	.word	0x2e037073
 800a6b4:	3ba3198a 	.word	0x3ba3198a
 800a6b8:	6dc9c883 	.word	0x6dc9c883
 800a6bc:	3fe45f30 	.word	0x3fe45f30
 800a6c0:	2e000000 	.word	0x2e000000
 800a6c4:	3ba3198a 	.word	0x3ba3198a
 800a6c8:	252049c1 	.word	0x252049c1
 800a6cc:	397b839a 	.word	0x397b839a
 800a6d0:	3fe921fb 	.word	0x3fe921fb
 800a6d4:	4002d97b 	.word	0x4002d97b
 800a6d8:	3ff921fb 	.word	0x3ff921fb
 800a6dc:	413921fb 	.word	0x413921fb
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	0800b4c0 	.word	0x0800b4c0
 800a6e8:	7fefffff 	.word	0x7fefffff
 800a6ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a6f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a6f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	460d      	mov	r5, r1
 800a6fc:	f7f6 fa34 	bl	8000b68 <__aeabi_d2iz>
 800a700:	f7f5 ff18 	bl	8000534 <__aeabi_i2d>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a710:	f7f5 fdc2 	bl	8000298 <__aeabi_dsub>
 800a714:	4b21      	ldr	r3, [pc, #132]	; (800a79c <__ieee754_rem_pio2+0x404>)
 800a716:	2200      	movs	r2, #0
 800a718:	f7f5 ff76 	bl	8000608 <__aeabi_dmul>
 800a71c:	460d      	mov	r5, r1
 800a71e:	4604      	mov	r4, r0
 800a720:	f7f6 fa22 	bl	8000b68 <__aeabi_d2iz>
 800a724:	f7f5 ff06 	bl	8000534 <__aeabi_i2d>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4620      	mov	r0, r4
 800a72e:	4629      	mov	r1, r5
 800a730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a734:	f7f5 fdb0 	bl	8000298 <__aeabi_dsub>
 800a738:	4b18      	ldr	r3, [pc, #96]	; (800a79c <__ieee754_rem_pio2+0x404>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	f7f5 ff64 	bl	8000608 <__aeabi_dmul>
 800a740:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a744:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a748:	2703      	movs	r7, #3
 800a74a:	2400      	movs	r4, #0
 800a74c:	2500      	movs	r5, #0
 800a74e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a752:	4622      	mov	r2, r4
 800a754:	462b      	mov	r3, r5
 800a756:	46b9      	mov	r9, r7
 800a758:	3f01      	subs	r7, #1
 800a75a:	f7f6 f9bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d1f5      	bne.n	800a74e <__ieee754_rem_pio2+0x3b6>
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <__ieee754_rem_pio2+0x408>)
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	2302      	movs	r3, #2
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	4632      	mov	r2, r6
 800a76c:	464b      	mov	r3, r9
 800a76e:	4651      	mov	r1, sl
 800a770:	a804      	add	r0, sp, #16
 800a772:	f000 f821 	bl	800a7b8 <__kernel_rem_pio2>
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	4683      	mov	fp, r0
 800a77c:	f6bf ae4c 	bge.w	800a418 <__ieee754_rem_pio2+0x80>
 800a780:	e9da 2100 	ldrd	r2, r1, [sl]
 800a784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a788:	e9ca 2300 	strd	r2, r3, [sl]
 800a78c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a794:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a798:	e73f      	b.n	800a61a <__ieee754_rem_pio2+0x282>
 800a79a:	bf00      	nop
 800a79c:	41700000 	.word	0x41700000
 800a7a0:	0800b540 	.word	0x0800b540

0800a7a4 <fabs>:
 800a7a4:	ec51 0b10 	vmov	r0, r1, d0
 800a7a8:	ee10 2a10 	vmov	r2, s0
 800a7ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7b0:	ec43 2b10 	vmov	d0, r2, r3
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <__kernel_rem_pio2>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	ed2d 8b02 	vpush	{d8}
 800a7c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a7c4:	f112 0f14 	cmn.w	r2, #20
 800a7c8:	9306      	str	r3, [sp, #24]
 800a7ca:	9104      	str	r1, [sp, #16]
 800a7cc:	4bc2      	ldr	r3, [pc, #776]	; (800aad8 <__kernel_rem_pio2+0x320>)
 800a7ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a7d0:	9009      	str	r0, [sp, #36]	; 0x24
 800a7d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7de:	bfa8      	it	ge
 800a7e0:	1ed4      	subge	r4, r2, #3
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	bfb2      	itee	lt
 800a7e6:	2400      	movlt	r4, #0
 800a7e8:	2318      	movge	r3, #24
 800a7ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800a7ee:	f06f 0317 	mvn.w	r3, #23
 800a7f2:	fb04 3303 	mla	r3, r4, r3, r3
 800a7f6:	eb03 0a02 	add.w	sl, r3, r2
 800a7fa:	9b00      	ldr	r3, [sp, #0]
 800a7fc:	9a05      	ldr	r2, [sp, #20]
 800a7fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800aac8 <__kernel_rem_pio2+0x310>
 800a802:	eb03 0802 	add.w	r8, r3, r2
 800a806:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a808:	1aa7      	subs	r7, r4, r2
 800a80a:	ae20      	add	r6, sp, #128	; 0x80
 800a80c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a810:	2500      	movs	r5, #0
 800a812:	4545      	cmp	r5, r8
 800a814:	dd13      	ble.n	800a83e <__kernel_rem_pio2+0x86>
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	aa20      	add	r2, sp, #128	; 0x80
 800a81a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a81e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a822:	f04f 0800 	mov.w	r8, #0
 800a826:	9b00      	ldr	r3, [sp, #0]
 800a828:	4598      	cmp	r8, r3
 800a82a:	dc31      	bgt.n	800a890 <__kernel_rem_pio2+0xd8>
 800a82c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800aac8 <__kernel_rem_pio2+0x310>
 800a830:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a834:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a838:	462f      	mov	r7, r5
 800a83a:	2600      	movs	r6, #0
 800a83c:	e01b      	b.n	800a876 <__kernel_rem_pio2+0xbe>
 800a83e:	42ef      	cmn	r7, r5
 800a840:	d407      	bmi.n	800a852 <__kernel_rem_pio2+0x9a>
 800a842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a846:	f7f5 fe75 	bl	8000534 <__aeabi_i2d>
 800a84a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a84e:	3501      	adds	r5, #1
 800a850:	e7df      	b.n	800a812 <__kernel_rem_pio2+0x5a>
 800a852:	ec51 0b18 	vmov	r0, r1, d8
 800a856:	e7f8      	b.n	800a84a <__kernel_rem_pio2+0x92>
 800a858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a860:	f7f5 fed2 	bl	8000608 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a86c:	f7f5 fd16 	bl	800029c <__adddf3>
 800a870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a874:	3601      	adds	r6, #1
 800a876:	9b05      	ldr	r3, [sp, #20]
 800a878:	429e      	cmp	r6, r3
 800a87a:	f1a7 0708 	sub.w	r7, r7, #8
 800a87e:	ddeb      	ble.n	800a858 <__kernel_rem_pio2+0xa0>
 800a880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a884:	f108 0801 	add.w	r8, r8, #1
 800a888:	ecab 7b02 	vstmia	fp!, {d7}
 800a88c:	3508      	adds	r5, #8
 800a88e:	e7ca      	b.n	800a826 <__kernel_rem_pio2+0x6e>
 800a890:	9b00      	ldr	r3, [sp, #0]
 800a892:	aa0c      	add	r2, sp, #48	; 0x30
 800a894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a898:	930b      	str	r3, [sp, #44]	; 0x2c
 800a89a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a89c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a8a0:	9c00      	ldr	r4, [sp, #0]
 800a8a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a4:	00e3      	lsls	r3, r4, #3
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	ab98      	add	r3, sp, #608	; 0x260
 800a8aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a8b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a8b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a8b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a8bc:	46c3      	mov	fp, r8
 800a8be:	46a1      	mov	r9, r4
 800a8c0:	f1b9 0f00 	cmp.w	r9, #0
 800a8c4:	f1a5 0508 	sub.w	r5, r5, #8
 800a8c8:	dc77      	bgt.n	800a9ba <__kernel_rem_pio2+0x202>
 800a8ca:	ec47 6b10 	vmov	d0, r6, r7
 800a8ce:	4650      	mov	r0, sl
 800a8d0:	f000 fac2 	bl	800ae58 <scalbn>
 800a8d4:	ec57 6b10 	vmov	r6, r7, d0
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a8de:	ee10 0a10 	vmov	r0, s0
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f5 fe90 	bl	8000608 <__aeabi_dmul>
 800a8e8:	ec41 0b10 	vmov	d0, r0, r1
 800a8ec:	f000 fb34 	bl	800af58 <floor>
 800a8f0:	4b7a      	ldr	r3, [pc, #488]	; (800aadc <__kernel_rem_pio2+0x324>)
 800a8f2:	ec51 0b10 	vmov	r0, r1, d0
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f7f5 fe86 	bl	8000608 <__aeabi_dmul>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f5 fcc8 	bl	8000298 <__aeabi_dsub>
 800a908:	460f      	mov	r7, r1
 800a90a:	4606      	mov	r6, r0
 800a90c:	f7f6 f92c 	bl	8000b68 <__aeabi_d2iz>
 800a910:	9002      	str	r0, [sp, #8]
 800a912:	f7f5 fe0f 	bl	8000534 <__aeabi_i2d>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	f7f5 fcbb 	bl	8000298 <__aeabi_dsub>
 800a922:	f1ba 0f00 	cmp.w	sl, #0
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	dd6d      	ble.n	800aa08 <__kernel_rem_pio2+0x250>
 800a92c:	1e61      	subs	r1, r4, #1
 800a92e:	ab0c      	add	r3, sp, #48	; 0x30
 800a930:	9d02      	ldr	r5, [sp, #8]
 800a932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a936:	f1ca 0018 	rsb	r0, sl, #24
 800a93a:	fa43 f200 	asr.w	r2, r3, r0
 800a93e:	4415      	add	r5, r2
 800a940:	4082      	lsls	r2, r0
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	aa0c      	add	r2, sp, #48	; 0x30
 800a946:	9502      	str	r5, [sp, #8]
 800a948:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a94c:	f1ca 0217 	rsb	r2, sl, #23
 800a950:	fa43 fb02 	asr.w	fp, r3, r2
 800a954:	f1bb 0f00 	cmp.w	fp, #0
 800a958:	dd65      	ble.n	800aa26 <__kernel_rem_pio2+0x26e>
 800a95a:	9b02      	ldr	r3, [sp, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	3301      	adds	r3, #1
 800a960:	9302      	str	r3, [sp, #8]
 800a962:	4615      	mov	r5, r2
 800a964:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a968:	4294      	cmp	r4, r2
 800a96a:	f300 809f 	bgt.w	800aaac <__kernel_rem_pio2+0x2f4>
 800a96e:	f1ba 0f00 	cmp.w	sl, #0
 800a972:	dd07      	ble.n	800a984 <__kernel_rem_pio2+0x1cc>
 800a974:	f1ba 0f01 	cmp.w	sl, #1
 800a978:	f000 80c1 	beq.w	800aafe <__kernel_rem_pio2+0x346>
 800a97c:	f1ba 0f02 	cmp.w	sl, #2
 800a980:	f000 80c7 	beq.w	800ab12 <__kernel_rem_pio2+0x35a>
 800a984:	f1bb 0f02 	cmp.w	fp, #2
 800a988:	d14d      	bne.n	800aa26 <__kernel_rem_pio2+0x26e>
 800a98a:	4632      	mov	r2, r6
 800a98c:	463b      	mov	r3, r7
 800a98e:	4954      	ldr	r1, [pc, #336]	; (800aae0 <__kernel_rem_pio2+0x328>)
 800a990:	2000      	movs	r0, #0
 800a992:	f7f5 fc81 	bl	8000298 <__aeabi_dsub>
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	d043      	beq.n	800aa26 <__kernel_rem_pio2+0x26e>
 800a99e:	4650      	mov	r0, sl
 800a9a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800aad0 <__kernel_rem_pio2+0x318>
 800a9a4:	f000 fa58 	bl	800ae58 <scalbn>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	ec53 2b10 	vmov	r2, r3, d0
 800a9b0:	f7f5 fc72 	bl	8000298 <__aeabi_dsub>
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	460f      	mov	r7, r1
 800a9b8:	e035      	b.n	800aa26 <__kernel_rem_pio2+0x26e>
 800a9ba:	4b4a      	ldr	r3, [pc, #296]	; (800aae4 <__kernel_rem_pio2+0x32c>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4630      	mov	r0, r6
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f5 fe21 	bl	8000608 <__aeabi_dmul>
 800a9c6:	f7f6 f8cf 	bl	8000b68 <__aeabi_d2iz>
 800a9ca:	f7f5 fdb3 	bl	8000534 <__aeabi_i2d>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	ec43 2b18 	vmov	d8, r2, r3
 800a9d6:	4b44      	ldr	r3, [pc, #272]	; (800aae8 <__kernel_rem_pio2+0x330>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f7f5 fe15 	bl	8000608 <__aeabi_dmul>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	f7f5 fc57 	bl	8000298 <__aeabi_dsub>
 800a9ea:	f7f6 f8bd 	bl	8000b68 <__aeabi_d2iz>
 800a9ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9f2:	f84b 0b04 	str.w	r0, [fp], #4
 800a9f6:	ec51 0b18 	vmov	r0, r1, d8
 800a9fa:	f7f5 fc4f 	bl	800029c <__adddf3>
 800a9fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	e75b      	b.n	800a8c0 <__kernel_rem_pio2+0x108>
 800aa08:	d106      	bne.n	800aa18 <__kernel_rem_pio2+0x260>
 800aa0a:	1e63      	subs	r3, r4, #1
 800aa0c:	aa0c      	add	r2, sp, #48	; 0x30
 800aa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa12:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800aa16:	e79d      	b.n	800a954 <__kernel_rem_pio2+0x19c>
 800aa18:	4b34      	ldr	r3, [pc, #208]	; (800aaec <__kernel_rem_pio2+0x334>)
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f7f6 f87a 	bl	8000b14 <__aeabi_dcmpge>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	d140      	bne.n	800aaa6 <__kernel_rem_pio2+0x2ee>
 800aa24:	4683      	mov	fp, r0
 800aa26:	2200      	movs	r2, #0
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	f7f6 f853 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f000 80c1 	beq.w	800abba <__kernel_rem_pio2+0x402>
 800aa38:	1e65      	subs	r5, r4, #1
 800aa3a:	462b      	mov	r3, r5
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	9900      	ldr	r1, [sp, #0]
 800aa40:	428b      	cmp	r3, r1
 800aa42:	da6d      	bge.n	800ab20 <__kernel_rem_pio2+0x368>
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	f000 808a 	beq.w	800ab5e <__kernel_rem_pio2+0x3a6>
 800aa4a:	ab0c      	add	r3, sp, #48	; 0x30
 800aa4c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa50:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80ae 	beq.w	800abb6 <__kernel_rem_pio2+0x3fe>
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800aad0 <__kernel_rem_pio2+0x318>
 800aa60:	f000 f9fa 	bl	800ae58 <scalbn>
 800aa64:	1c6b      	adds	r3, r5, #1
 800aa66:	00da      	lsls	r2, r3, #3
 800aa68:	9205      	str	r2, [sp, #20]
 800aa6a:	ec57 6b10 	vmov	r6, r7, d0
 800aa6e:	aa70      	add	r2, sp, #448	; 0x1c0
 800aa70:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800aae4 <__kernel_rem_pio2+0x32c>
 800aa74:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800aa78:	462c      	mov	r4, r5
 800aa7a:	f04f 0800 	mov.w	r8, #0
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	f280 80d4 	bge.w	800ac2c <__kernel_rem_pio2+0x474>
 800aa84:	462c      	mov	r4, r5
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	f2c0 8102 	blt.w	800ac90 <__kernel_rem_pio2+0x4d8>
 800aa8c:	4b18      	ldr	r3, [pc, #96]	; (800aaf0 <__kernel_rem_pio2+0x338>)
 800aa8e:	461e      	mov	r6, r3
 800aa90:	ab70      	add	r3, sp, #448	; 0x1c0
 800aa92:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800aa96:	1b2b      	subs	r3, r5, r4
 800aa98:	f04f 0900 	mov.w	r9, #0
 800aa9c:	f04f 0a00 	mov.w	sl, #0
 800aaa0:	2700      	movs	r7, #0
 800aaa2:	9306      	str	r3, [sp, #24]
 800aaa4:	e0e6      	b.n	800ac74 <__kernel_rem_pio2+0x4bc>
 800aaa6:	f04f 0b02 	mov.w	fp, #2
 800aaaa:	e756      	b.n	800a95a <__kernel_rem_pio2+0x1a2>
 800aaac:	f8d8 3000 	ldr.w	r3, [r8]
 800aab0:	bb05      	cbnz	r5, 800aaf4 <__kernel_rem_pio2+0x33c>
 800aab2:	b123      	cbz	r3, 800aabe <__kernel_rem_pio2+0x306>
 800aab4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aab8:	f8c8 3000 	str.w	r3, [r8]
 800aabc:	2301      	movs	r3, #1
 800aabe:	3201      	adds	r2, #1
 800aac0:	f108 0804 	add.w	r8, r8, #4
 800aac4:	461d      	mov	r5, r3
 800aac6:	e74f      	b.n	800a968 <__kernel_rem_pio2+0x1b0>
	...
 800aad4:	3ff00000 	.word	0x3ff00000
 800aad8:	0800b688 	.word	0x0800b688
 800aadc:	40200000 	.word	0x40200000
 800aae0:	3ff00000 	.word	0x3ff00000
 800aae4:	3e700000 	.word	0x3e700000
 800aae8:	41700000 	.word	0x41700000
 800aaec:	3fe00000 	.word	0x3fe00000
 800aaf0:	0800b648 	.word	0x0800b648
 800aaf4:	1acb      	subs	r3, r1, r3
 800aaf6:	f8c8 3000 	str.w	r3, [r8]
 800aafa:	462b      	mov	r3, r5
 800aafc:	e7df      	b.n	800aabe <__kernel_rem_pio2+0x306>
 800aafe:	1e62      	subs	r2, r4, #1
 800ab00:	ab0c      	add	r3, sp, #48	; 0x30
 800ab02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab0a:	a90c      	add	r1, sp, #48	; 0x30
 800ab0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab10:	e738      	b.n	800a984 <__kernel_rem_pio2+0x1cc>
 800ab12:	1e62      	subs	r2, r4, #1
 800ab14:	ab0c      	add	r3, sp, #48	; 0x30
 800ab16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab1e:	e7f4      	b.n	800ab0a <__kernel_rem_pio2+0x352>
 800ab20:	a90c      	add	r1, sp, #48	; 0x30
 800ab22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab26:	3b01      	subs	r3, #1
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	e788      	b.n	800aa3e <__kernel_rem_pio2+0x286>
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab32:	2900      	cmp	r1, #0
 800ab34:	d0fa      	beq.n	800ab2c <__kernel_rem_pio2+0x374>
 800ab36:	9a08      	ldr	r2, [sp, #32]
 800ab38:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ab3c:	446a      	add	r2, sp
 800ab3e:	3a98      	subs	r2, #152	; 0x98
 800ab40:	9208      	str	r2, [sp, #32]
 800ab42:	9a06      	ldr	r2, [sp, #24]
 800ab44:	a920      	add	r1, sp, #128	; 0x80
 800ab46:	18a2      	adds	r2, r4, r2
 800ab48:	18e3      	adds	r3, r4, r3
 800ab4a:	f104 0801 	add.w	r8, r4, #1
 800ab4e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	9b02      	ldr	r3, [sp, #8]
 800ab56:	4543      	cmp	r3, r8
 800ab58:	da04      	bge.n	800ab64 <__kernel_rem_pio2+0x3ac>
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	e6a2      	b.n	800a8a4 <__kernel_rem_pio2+0xec>
 800ab5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab60:	2301      	movs	r3, #1
 800ab62:	e7e4      	b.n	800ab2e <__kernel_rem_pio2+0x376>
 800ab64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab6a:	f7f5 fce3 	bl	8000534 <__aeabi_i2d>
 800ab6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab74:	46ab      	mov	fp, r5
 800ab76:	461c      	mov	r4, r3
 800ab78:	f04f 0900 	mov.w	r9, #0
 800ab7c:	2600      	movs	r6, #0
 800ab7e:	2700      	movs	r7, #0
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	4599      	cmp	r9, r3
 800ab84:	dd06      	ble.n	800ab94 <__kernel_rem_pio2+0x3dc>
 800ab86:	9b08      	ldr	r3, [sp, #32]
 800ab88:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ab8c:	f108 0801 	add.w	r8, r8, #1
 800ab90:	9308      	str	r3, [sp, #32]
 800ab92:	e7df      	b.n	800ab54 <__kernel_rem_pio2+0x39c>
 800ab94:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab98:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab9c:	f7f5 fd34 	bl	8000608 <__aeabi_dmul>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 fb78 	bl	800029c <__adddf3>
 800abac:	f109 0901 	add.w	r9, r9, #1
 800abb0:	4606      	mov	r6, r0
 800abb2:	460f      	mov	r7, r1
 800abb4:	e7e4      	b.n	800ab80 <__kernel_rem_pio2+0x3c8>
 800abb6:	3d01      	subs	r5, #1
 800abb8:	e747      	b.n	800aa4a <__kernel_rem_pio2+0x292>
 800abba:	ec47 6b10 	vmov	d0, r6, r7
 800abbe:	f1ca 0000 	rsb	r0, sl, #0
 800abc2:	f000 f949 	bl	800ae58 <scalbn>
 800abc6:	ec57 6b10 	vmov	r6, r7, d0
 800abca:	4ba0      	ldr	r3, [pc, #640]	; (800ae4c <__kernel_rem_pio2+0x694>)
 800abcc:	ee10 0a10 	vmov	r0, s0
 800abd0:	2200      	movs	r2, #0
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 ff9e 	bl	8000b14 <__aeabi_dcmpge>
 800abd8:	b1f8      	cbz	r0, 800ac1a <__kernel_rem_pio2+0x462>
 800abda:	4b9d      	ldr	r3, [pc, #628]	; (800ae50 <__kernel_rem_pio2+0x698>)
 800abdc:	2200      	movs	r2, #0
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	f7f5 fd11 	bl	8000608 <__aeabi_dmul>
 800abe6:	f7f5 ffbf 	bl	8000b68 <__aeabi_d2iz>
 800abea:	4680      	mov	r8, r0
 800abec:	f7f5 fca2 	bl	8000534 <__aeabi_i2d>
 800abf0:	4b96      	ldr	r3, [pc, #600]	; (800ae4c <__kernel_rem_pio2+0x694>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	f7f5 fd08 	bl	8000608 <__aeabi_dmul>
 800abf8:	460b      	mov	r3, r1
 800abfa:	4602      	mov	r2, r0
 800abfc:	4639      	mov	r1, r7
 800abfe:	4630      	mov	r0, r6
 800ac00:	f7f5 fb4a 	bl	8000298 <__aeabi_dsub>
 800ac04:	f7f5 ffb0 	bl	8000b68 <__aeabi_d2iz>
 800ac08:	1c65      	adds	r5, r4, #1
 800ac0a:	ab0c      	add	r3, sp, #48	; 0x30
 800ac0c:	f10a 0a18 	add.w	sl, sl, #24
 800ac10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac14:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ac18:	e71f      	b.n	800aa5a <__kernel_rem_pio2+0x2a2>
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f7f5 ffa3 	bl	8000b68 <__aeabi_d2iz>
 800ac22:	ab0c      	add	r3, sp, #48	; 0x30
 800ac24:	4625      	mov	r5, r4
 800ac26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac2a:	e716      	b.n	800aa5a <__kernel_rem_pio2+0x2a2>
 800ac2c:	ab0c      	add	r3, sp, #48	; 0x30
 800ac2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ac32:	f7f5 fc7f 	bl	8000534 <__aeabi_i2d>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	4642      	mov	r2, r8
 800ac40:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ac44:	464b      	mov	r3, r9
 800ac46:	4630      	mov	r0, r6
 800ac48:	4639      	mov	r1, r7
 800ac4a:	f7f5 fcdd 	bl	8000608 <__aeabi_dmul>
 800ac4e:	3c01      	subs	r4, #1
 800ac50:	4606      	mov	r6, r0
 800ac52:	460f      	mov	r7, r1
 800ac54:	e713      	b.n	800aa7e <__kernel_rem_pio2+0x2c6>
 800ac56:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ac5a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ac5e:	f7f5 fcd3 	bl	8000608 <__aeabi_dmul>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4648      	mov	r0, r9
 800ac68:	4651      	mov	r1, sl
 800ac6a:	f7f5 fb17 	bl	800029c <__adddf3>
 800ac6e:	3701      	adds	r7, #1
 800ac70:	4681      	mov	r9, r0
 800ac72:	468a      	mov	sl, r1
 800ac74:	9b00      	ldr	r3, [sp, #0]
 800ac76:	429f      	cmp	r7, r3
 800ac78:	dc02      	bgt.n	800ac80 <__kernel_rem_pio2+0x4c8>
 800ac7a:	9b06      	ldr	r3, [sp, #24]
 800ac7c:	429f      	cmp	r7, r3
 800ac7e:	ddea      	ble.n	800ac56 <__kernel_rem_pio2+0x49e>
 800ac80:	9a06      	ldr	r2, [sp, #24]
 800ac82:	ab48      	add	r3, sp, #288	; 0x120
 800ac84:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ac88:	e9c6 9a00 	strd	r9, sl, [r6]
 800ac8c:	3c01      	subs	r4, #1
 800ac8e:	e6fa      	b.n	800aa86 <__kernel_rem_pio2+0x2ce>
 800ac90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	dc0b      	bgt.n	800acae <__kernel_rem_pio2+0x4f6>
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dc39      	bgt.n	800ad0e <__kernel_rem_pio2+0x556>
 800ac9a:	d05d      	beq.n	800ad58 <__kernel_rem_pio2+0x5a0>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	f003 0007 	and.w	r0, r3, #7
 800aca2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aca6:	ecbd 8b02 	vpop	{d8}
 800acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d1f3      	bne.n	800ac9c <__kernel_rem_pio2+0x4e4>
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	9500      	str	r5, [sp, #0]
 800acb8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800acbc:	eb0d 0403 	add.w	r4, sp, r3
 800acc0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800acc4:	46a2      	mov	sl, r4
 800acc6:	9b00      	ldr	r3, [sp, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f1aa 0a08 	sub.w	sl, sl, #8
 800acce:	dc69      	bgt.n	800ada4 <__kernel_rem_pio2+0x5ec>
 800acd0:	46aa      	mov	sl, r5
 800acd2:	f1ba 0f01 	cmp.w	sl, #1
 800acd6:	f1a4 0408 	sub.w	r4, r4, #8
 800acda:	f300 8083 	bgt.w	800ade4 <__kernel_rem_pio2+0x62c>
 800acde:	9c05      	ldr	r4, [sp, #20]
 800ace0:	ab48      	add	r3, sp, #288	; 0x120
 800ace2:	441c      	add	r4, r3
 800ace4:	2000      	movs	r0, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	2d01      	cmp	r5, #1
 800acea:	f300 809a 	bgt.w	800ae22 <__kernel_rem_pio2+0x66a>
 800acee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800acf2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800acf6:	f1bb 0f00 	cmp.w	fp, #0
 800acfa:	f040 8098 	bne.w	800ae2e <__kernel_rem_pio2+0x676>
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	e9c3 7800 	strd	r7, r8, [r3]
 800ad04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ad08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ad0c:	e7c6      	b.n	800ac9c <__kernel_rem_pio2+0x4e4>
 800ad0e:	9e05      	ldr	r6, [sp, #20]
 800ad10:	ab48      	add	r3, sp, #288	; 0x120
 800ad12:	441e      	add	r6, r3
 800ad14:	462c      	mov	r4, r5
 800ad16:	2000      	movs	r0, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	2c00      	cmp	r4, #0
 800ad1c:	da33      	bge.n	800ad86 <__kernel_rem_pio2+0x5ce>
 800ad1e:	f1bb 0f00 	cmp.w	fp, #0
 800ad22:	d036      	beq.n	800ad92 <__kernel_rem_pio2+0x5da>
 800ad24:	4602      	mov	r2, r0
 800ad26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad2a:	9c04      	ldr	r4, [sp, #16]
 800ad2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ad38:	f7f5 faae 	bl	8000298 <__aeabi_dsub>
 800ad3c:	ae4a      	add	r6, sp, #296	; 0x128
 800ad3e:	2401      	movs	r4, #1
 800ad40:	42a5      	cmp	r5, r4
 800ad42:	da29      	bge.n	800ad98 <__kernel_rem_pio2+0x5e0>
 800ad44:	f1bb 0f00 	cmp.w	fp, #0
 800ad48:	d002      	beq.n	800ad50 <__kernel_rem_pio2+0x598>
 800ad4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad4e:	4619      	mov	r1, r3
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad56:	e7a1      	b.n	800ac9c <__kernel_rem_pio2+0x4e4>
 800ad58:	9c05      	ldr	r4, [sp, #20]
 800ad5a:	ab48      	add	r3, sp, #288	; 0x120
 800ad5c:	441c      	add	r4, r3
 800ad5e:	2000      	movs	r0, #0
 800ad60:	2100      	movs	r1, #0
 800ad62:	2d00      	cmp	r5, #0
 800ad64:	da09      	bge.n	800ad7a <__kernel_rem_pio2+0x5c2>
 800ad66:	f1bb 0f00 	cmp.w	fp, #0
 800ad6a:	d002      	beq.n	800ad72 <__kernel_rem_pio2+0x5ba>
 800ad6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad70:	4619      	mov	r1, r3
 800ad72:	9b04      	ldr	r3, [sp, #16]
 800ad74:	e9c3 0100 	strd	r0, r1, [r3]
 800ad78:	e790      	b.n	800ac9c <__kernel_rem_pio2+0x4e4>
 800ad7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad7e:	f7f5 fa8d 	bl	800029c <__adddf3>
 800ad82:	3d01      	subs	r5, #1
 800ad84:	e7ed      	b.n	800ad62 <__kernel_rem_pio2+0x5aa>
 800ad86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ad8a:	f7f5 fa87 	bl	800029c <__adddf3>
 800ad8e:	3c01      	subs	r4, #1
 800ad90:	e7c3      	b.n	800ad1a <__kernel_rem_pio2+0x562>
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	e7c8      	b.n	800ad2a <__kernel_rem_pio2+0x572>
 800ad98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ad9c:	f7f5 fa7e 	bl	800029c <__adddf3>
 800ada0:	3401      	adds	r4, #1
 800ada2:	e7cd      	b.n	800ad40 <__kernel_rem_pio2+0x588>
 800ada4:	e9da 8900 	ldrd	r8, r9, [sl]
 800ada8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	3b01      	subs	r3, #1
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	4632      	mov	r2, r6
 800adb4:	463b      	mov	r3, r7
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 fa6f 	bl	800029c <__adddf3>
 800adbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4640      	mov	r0, r8
 800adc8:	4649      	mov	r1, r9
 800adca:	f7f5 fa65 	bl	8000298 <__aeabi_dsub>
 800adce:	4632      	mov	r2, r6
 800add0:	463b      	mov	r3, r7
 800add2:	f7f5 fa63 	bl	800029c <__adddf3>
 800add6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800adda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800adde:	ed8a 7b00 	vstr	d7, [sl]
 800ade2:	e770      	b.n	800acc6 <__kernel_rem_pio2+0x50e>
 800ade4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ade8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800adec:	4640      	mov	r0, r8
 800adee:	4632      	mov	r2, r6
 800adf0:	463b      	mov	r3, r7
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 fa52 	bl	800029c <__adddf3>
 800adf8:	e9cd 0100 	strd	r0, r1, [sp]
 800adfc:	4602      	mov	r2, r0
 800adfe:	460b      	mov	r3, r1
 800ae00:	4640      	mov	r0, r8
 800ae02:	4649      	mov	r1, r9
 800ae04:	f7f5 fa48 	bl	8000298 <__aeabi_dsub>
 800ae08:	4632      	mov	r2, r6
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	f7f5 fa46 	bl	800029c <__adddf3>
 800ae10:	ed9d 7b00 	vldr	d7, [sp]
 800ae14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae18:	ed84 7b00 	vstr	d7, [r4]
 800ae1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae20:	e757      	b.n	800acd2 <__kernel_rem_pio2+0x51a>
 800ae22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae26:	f7f5 fa39 	bl	800029c <__adddf3>
 800ae2a:	3d01      	subs	r5, #1
 800ae2c:	e75c      	b.n	800ace8 <__kernel_rem_pio2+0x530>
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	601f      	str	r7, [r3, #0]
 800ae34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ae38:	605c      	str	r4, [r3, #4]
 800ae3a:	609d      	str	r5, [r3, #8]
 800ae3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae40:	60d3      	str	r3, [r2, #12]
 800ae42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae46:	6110      	str	r0, [r2, #16]
 800ae48:	6153      	str	r3, [r2, #20]
 800ae4a:	e727      	b.n	800ac9c <__kernel_rem_pio2+0x4e4>
 800ae4c:	41700000 	.word	0x41700000
 800ae50:	3e700000 	.word	0x3e700000
 800ae54:	00000000 	.word	0x00000000

0800ae58 <scalbn>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	ec55 4b10 	vmov	r4, r5, d0
 800ae5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ae62:	4606      	mov	r6, r0
 800ae64:	462b      	mov	r3, r5
 800ae66:	b999      	cbnz	r1, 800ae90 <scalbn+0x38>
 800ae68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae6c:	4323      	orrs	r3, r4
 800ae6e:	d03f      	beq.n	800aef0 <scalbn+0x98>
 800ae70:	4b35      	ldr	r3, [pc, #212]	; (800af48 <scalbn+0xf0>)
 800ae72:	4629      	mov	r1, r5
 800ae74:	ee10 0a10 	vmov	r0, s0
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f7f5 fbc5 	bl	8000608 <__aeabi_dmul>
 800ae7e:	4b33      	ldr	r3, [pc, #204]	; (800af4c <scalbn+0xf4>)
 800ae80:	429e      	cmp	r6, r3
 800ae82:	4604      	mov	r4, r0
 800ae84:	460d      	mov	r5, r1
 800ae86:	da10      	bge.n	800aeaa <scalbn+0x52>
 800ae88:	a327      	add	r3, pc, #156	; (adr r3, 800af28 <scalbn+0xd0>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	e01f      	b.n	800aed0 <scalbn+0x78>
 800ae90:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae94:	4291      	cmp	r1, r2
 800ae96:	d10c      	bne.n	800aeb2 <scalbn+0x5a>
 800ae98:	ee10 2a10 	vmov	r2, s0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f7f5 f9fc 	bl	800029c <__adddf3>
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	e022      	b.n	800aef0 <scalbn+0x98>
 800aeaa:	460b      	mov	r3, r1
 800aeac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aeb0:	3936      	subs	r1, #54	; 0x36
 800aeb2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aeb6:	4296      	cmp	r6, r2
 800aeb8:	dd0d      	ble.n	800aed6 <scalbn+0x7e>
 800aeba:	2d00      	cmp	r5, #0
 800aebc:	a11c      	add	r1, pc, #112	; (adr r1, 800af30 <scalbn+0xd8>)
 800aebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec2:	da02      	bge.n	800aeca <scalbn+0x72>
 800aec4:	a11c      	add	r1, pc, #112	; (adr r1, 800af38 <scalbn+0xe0>)
 800aec6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeca:	a319      	add	r3, pc, #100	; (adr r3, 800af30 <scalbn+0xd8>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 fb9a 	bl	8000608 <__aeabi_dmul>
 800aed4:	e7e6      	b.n	800aea4 <scalbn+0x4c>
 800aed6:	1872      	adds	r2, r6, r1
 800aed8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aedc:	428a      	cmp	r2, r1
 800aede:	dcec      	bgt.n	800aeba <scalbn+0x62>
 800aee0:	2a00      	cmp	r2, #0
 800aee2:	dd08      	ble.n	800aef6 <scalbn+0x9e>
 800aee4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aee8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aeec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aef0:	ec45 4b10 	vmov	d0, r4, r5
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aefa:	da08      	bge.n	800af0e <scalbn+0xb6>
 800aefc:	2d00      	cmp	r5, #0
 800aefe:	a10a      	add	r1, pc, #40	; (adr r1, 800af28 <scalbn+0xd0>)
 800af00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af04:	dac0      	bge.n	800ae88 <scalbn+0x30>
 800af06:	a10e      	add	r1, pc, #56	; (adr r1, 800af40 <scalbn+0xe8>)
 800af08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af0c:	e7bc      	b.n	800ae88 <scalbn+0x30>
 800af0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af12:	3236      	adds	r2, #54	; 0x36
 800af14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800af1c:	4620      	mov	r0, r4
 800af1e:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <scalbn+0xf8>)
 800af20:	2200      	movs	r2, #0
 800af22:	e7d5      	b.n	800aed0 <scalbn+0x78>
 800af24:	f3af 8000 	nop.w
 800af28:	c2f8f359 	.word	0xc2f8f359
 800af2c:	01a56e1f 	.word	0x01a56e1f
 800af30:	8800759c 	.word	0x8800759c
 800af34:	7e37e43c 	.word	0x7e37e43c
 800af38:	8800759c 	.word	0x8800759c
 800af3c:	fe37e43c 	.word	0xfe37e43c
 800af40:	c2f8f359 	.word	0xc2f8f359
 800af44:	81a56e1f 	.word	0x81a56e1f
 800af48:	43500000 	.word	0x43500000
 800af4c:	ffff3cb0 	.word	0xffff3cb0
 800af50:	3c900000 	.word	0x3c900000
 800af54:	00000000 	.word	0x00000000

0800af58 <floor>:
 800af58:	ec51 0b10 	vmov	r0, r1, d0
 800af5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800af68:	2e13      	cmp	r6, #19
 800af6a:	ee10 5a10 	vmov	r5, s0
 800af6e:	ee10 8a10 	vmov	r8, s0
 800af72:	460c      	mov	r4, r1
 800af74:	dc31      	bgt.n	800afda <floor+0x82>
 800af76:	2e00      	cmp	r6, #0
 800af78:	da14      	bge.n	800afa4 <floor+0x4c>
 800af7a:	a333      	add	r3, pc, #204	; (adr r3, 800b048 <floor+0xf0>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f98c 	bl	800029c <__adddf3>
 800af84:	2200      	movs	r2, #0
 800af86:	2300      	movs	r3, #0
 800af88:	f7f5 fdce 	bl	8000b28 <__aeabi_dcmpgt>
 800af8c:	b138      	cbz	r0, 800af9e <floor+0x46>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	da53      	bge.n	800b03a <floor+0xe2>
 800af92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800af96:	4325      	orrs	r5, r4
 800af98:	d052      	beq.n	800b040 <floor+0xe8>
 800af9a:	4c2d      	ldr	r4, [pc, #180]	; (800b050 <floor+0xf8>)
 800af9c:	2500      	movs	r5, #0
 800af9e:	4621      	mov	r1, r4
 800afa0:	4628      	mov	r0, r5
 800afa2:	e024      	b.n	800afee <floor+0x96>
 800afa4:	4f2b      	ldr	r7, [pc, #172]	; (800b054 <floor+0xfc>)
 800afa6:	4137      	asrs	r7, r6
 800afa8:	ea01 0307 	and.w	r3, r1, r7
 800afac:	4303      	orrs	r3, r0
 800afae:	d01e      	beq.n	800afee <floor+0x96>
 800afb0:	a325      	add	r3, pc, #148	; (adr r3, 800b048 <floor+0xf0>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 f971 	bl	800029c <__adddf3>
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f7f5 fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0eb      	beq.n	800af9e <floor+0x46>
 800afc6:	2c00      	cmp	r4, #0
 800afc8:	bfbe      	ittt	lt
 800afca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800afce:	4133      	asrlt	r3, r6
 800afd0:	18e4      	addlt	r4, r4, r3
 800afd2:	ea24 0407 	bic.w	r4, r4, r7
 800afd6:	2500      	movs	r5, #0
 800afd8:	e7e1      	b.n	800af9e <floor+0x46>
 800afda:	2e33      	cmp	r6, #51	; 0x33
 800afdc:	dd0b      	ble.n	800aff6 <floor+0x9e>
 800afde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800afe2:	d104      	bne.n	800afee <floor+0x96>
 800afe4:	ee10 2a10 	vmov	r2, s0
 800afe8:	460b      	mov	r3, r1
 800afea:	f7f5 f957 	bl	800029c <__adddf3>
 800afee:	ec41 0b10 	vmov	d0, r0, r1
 800aff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800affa:	f04f 37ff 	mov.w	r7, #4294967295
 800affe:	40df      	lsrs	r7, r3
 800b000:	4238      	tst	r0, r7
 800b002:	d0f4      	beq.n	800afee <floor+0x96>
 800b004:	a310      	add	r3, pc, #64	; (adr r3, 800b048 <floor+0xf0>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f947 	bl	800029c <__adddf3>
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	f7f5 fd89 	bl	8000b28 <__aeabi_dcmpgt>
 800b016:	2800      	cmp	r0, #0
 800b018:	d0c1      	beq.n	800af9e <floor+0x46>
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	da0a      	bge.n	800b034 <floor+0xdc>
 800b01e:	2e14      	cmp	r6, #20
 800b020:	d101      	bne.n	800b026 <floor+0xce>
 800b022:	3401      	adds	r4, #1
 800b024:	e006      	b.n	800b034 <floor+0xdc>
 800b026:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b02a:	2301      	movs	r3, #1
 800b02c:	40b3      	lsls	r3, r6
 800b02e:	441d      	add	r5, r3
 800b030:	45a8      	cmp	r8, r5
 800b032:	d8f6      	bhi.n	800b022 <floor+0xca>
 800b034:	ea25 0507 	bic.w	r5, r5, r7
 800b038:	e7b1      	b.n	800af9e <floor+0x46>
 800b03a:	2500      	movs	r5, #0
 800b03c:	462c      	mov	r4, r5
 800b03e:	e7ae      	b.n	800af9e <floor+0x46>
 800b040:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b044:	e7ab      	b.n	800af9e <floor+0x46>
 800b046:	bf00      	nop
 800b048:	8800759c 	.word	0x8800759c
 800b04c:	7e37e43c 	.word	0x7e37e43c
 800b050:	bff00000 	.word	0xbff00000
 800b054:	000fffff 	.word	0x000fffff

0800b058 <_init>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr

0800b064 <_fini>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	bf00      	nop
 800b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b06a:	bc08      	pop	{r3}
 800b06c:	469e      	mov	lr, r3
 800b06e:	4770      	bx	lr
